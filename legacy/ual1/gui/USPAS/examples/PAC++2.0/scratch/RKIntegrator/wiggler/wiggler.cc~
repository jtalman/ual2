#include "Map/Map.hh"
#include "RKIntegrator/RKIntegrator.hh"

int SH_NUMBER = 5;

Series& sh(Series& x)
{
   Series sum, term;

   term  = 1.;
   sum   = 0.;
 
   int now = SH_NUMBER;
   for(int i=1; i <= now; i++)
   {
     term *= x;
     term /= i;
     if((i/2)*2 != i) sum  += term;
   }

   return(sum*1.);
}

Series& ch(Series& x)
{
   Series sum, term;

   term  = 1.;
   sum   = 1.;
 
   int now = SH_NUMBER;
   for(int i=1; i <= now; i++)
   {
     term *= x;
     term /= i;
     if((i/2)*2 == i) sum  += term;
   }

   return(sum*1.);
}

void wigglerField(double s, Series* y, Series* bF, Series* eF, double* param)
{

   // param[1] - length
   // param[2] - k_x
   // param[3] - k_y
   // param[4] - k_z
   // param[5] - phase 
   // param[6] - B0/BR


   Series xk, yk;

   if(!param[3]){
     cerr << "wigglerField: param[3]/ k_y / == 0. \n";
     exit(1);
   }
   
   for(int i=0; i <= 3; i++){
     eF[i] = 0.;
     bF[i] = 0.;
   }

   xk = y[1]*param[2];
   yk = y[3]*param[3];

   bF[1]  = sh(yk);
   bF[2]  = ch(xk);
   bF[3]  = bF[1]*bF[2];

   bF[1] *=  sh(xk);
   bF[1] *=  cos(param[4]*s + param[5])*param[6]*param[2]/param[3];

   bF[2] *=  ch(yk);
   bF[2] *=  cos(param[4]*s + param[5])*param[6];

   bF[3] *= -sin(param[4]*s + param[5])*param[6]*param[4]/param[3];

}

main()
{

  BEAM_DIM   = 6;
  ZLIB_DIM   = 6;
  ZLIB_ORDER = 4;

// wiggler Parameter

  double energy  = 5.0;       // GeV 
  double c       = 0.3;       // 1.0e+9 m/c - the speed of light
  double b0      = 1.2;       // T
  double lambda  = 0.196;     // m
  double kx      = 6.4;       // 1/m

  double p[7]; 

  p[0] = 6.;                           // number of parameters
  p[1] = lambda;                       // Length
  p[2] = kx;                           // k_x 
  p[4] = 2*PI/lambda;                  // k_z 
  p[3] = sqrt(p[4]*p[4] - p[2]*p[2]);  // k_y
  p[5] = -PI;                          // phase
  p[6] = b0*c/energy;                  // B0/BR

// Initial coordinates
  ZMap z; z = 1;

// DA Runge-Kutta integrator
  RKIntegrator<ZSeries, ZMap> wiggler(wigglerField, p, 0.01);

  ofstream daFile("wiggler.out");
  daFile << wiggler*z << "\n";
  daFile.close();

  return(1);
}
