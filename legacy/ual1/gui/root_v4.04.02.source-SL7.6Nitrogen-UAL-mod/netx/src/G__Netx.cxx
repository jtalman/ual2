//
// File generated by utils/src/rootcint_tmp at Tue Jun 30 21:35:19 2020.
// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

#include "G__Netx.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TStreamerInfo.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"

#include "TCollectionProxy.h"

namespace ROOT {
   namespace Shadow {
   } // Of namespace ROOT::Shadow
} // Of namespace ROOT

namespace ROOT {
   void TXSocket_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TXSocket_IsA(const void*);
   static void delete_TXSocket(void *p);
   static void deleteArray_TXSocket(void *p);
   static void destruct_TXSocket(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TXSocket*)
   {
      ::TXSocket *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TXSocket", ::TXSocket::Class_Version(), "netx/inc/TXSocket.h", 57,
                  typeid(::TXSocket), DefineBehavior(ptr, ptr),
                  &::TXSocket::Dictionary, &TXSocket_IsA, 0,
                  sizeof(::TXSocket) );
      instance.SetDelete(&delete_TXSocket);
      instance.SetDeleteArray(&deleteArray_TXSocket);
      instance.SetDestructor(&destruct_TXSocket);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TXSocket*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TXMessage_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TXMessage_IsA(const void*);
   static void *new_TXMessage(void *p = 0);
   static void *newArray_TXMessage(Long_t size);
   static void delete_TXMessage(void *p);
   static void deleteArray_TXMessage(void *p);
   static void destruct_TXMessage(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TXMessage*)
   {
      ::TXMessage *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TXMessage", ::TXMessage::Class_Version(), "netx/inc/TXMessage.h", 36,
                  typeid(::TXMessage), DefineBehavior(ptr, ptr),
                  &::TXMessage::Dictionary, &TXMessage_IsA, 0,
                  sizeof(::TXMessage) );
      instance.SetNew(&new_TXMessage);
      instance.SetNewArray(&newArray_TXMessage);
      instance.SetDelete(&delete_TXMessage);
      instance.SetDeleteArray(&deleteArray_TXMessage);
      instance.SetDestructor(&destruct_TXMessage);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TXMessage*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TXAbsNetCommon_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void TXAbsNetCommon_Dictionary();
   static TClass *TXAbsNetCommon_IsA(const void*);
   static void delete_TXAbsNetCommon(void *p);
   static void deleteArray_TXAbsNetCommon(void *p);
   static void destruct_TXAbsNetCommon(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TXAbsNetCommon*)
   {
      ::TXAbsNetCommon *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TXAbsNetCommon", "netx/inc/TXAbsNetCommon.h", 29,
                  typeid(::TXAbsNetCommon), DefineBehavior(ptr, ptr),
                  0, &TXAbsNetCommon_Dictionary, &TXAbsNetCommon_IsA, 0,
                  sizeof(::TXAbsNetCommon) );
      instance.SetDelete(&delete_TXAbsNetCommon);
      instance.SetDeleteArray(&deleteArray_TXAbsNetCommon);
      instance.SetDestructor(&destruct_TXAbsNetCommon);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TXAbsNetCommon*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TXAbsNetCommon_Dictionary() {
      ::ROOT::GenerateInitInstance((const ::TXAbsNetCommon*)0x0)->GetClass();
   }

}

namespace ROOT {
   void TXNetConn_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TXNetConn_IsA(const void*);
   static void *new_TXNetConn(void *p = 0);
   static void *newArray_TXNetConn(Long_t size);
   static void delete_TXNetConn(void *p);
   static void deleteArray_TXNetConn(void *p);
   static void destruct_TXNetConn(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TXNetConn*)
   {
      ::TXNetConn *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TXNetConn", ::TXNetConn::Class_Version(), "netx/inc/TXNetConn.h", 49,
                  typeid(::TXNetConn), DefineBehavior(ptr, ptr),
                  &::TXNetConn::Dictionary, &TXNetConn_IsA, 1,
                  sizeof(::TXNetConn) );
      instance.SetNew(&new_TXNetConn);
      instance.SetNewArray(&newArray_TXNetConn);
      instance.SetDelete(&delete_TXNetConn);
      instance.SetDeleteArray(&deleteArray_TXNetConn);
      instance.SetDestructor(&destruct_TXNetConn);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TXNetConn*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TXNetFile_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TXNetFile_IsA(const void*);
   static void delete_TXNetFile(void *p);
   static void deleteArray_TXNetFile(void *p);
   static void destruct_TXNetFile(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TXNetFile*)
   {
      ::TXNetFile *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TXNetFile", ::TXNetFile::Class_Version(), "netx/inc/TXNetFile.h", 73,
                  typeid(::TXNetFile), DefineBehavior(ptr, ptr),
                  &::TXNetFile::Dictionary, &TXNetFile_IsA, 1,
                  sizeof(::TXNetFile) );
      instance.SetDelete(&delete_TXNetFile);
      instance.SetDeleteArray(&deleteArray_TXNetFile);
      instance.SetDestructor(&destruct_TXNetFile);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TXNetFile*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TXPhyConnection_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TXPhyConnection_IsA(const void*);
   static void delete_TXPhyConnection(void *p);
   static void deleteArray_TXPhyConnection(void *p);
   static void destruct_TXPhyConnection(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TXPhyConnection*)
   {
      ::TXPhyConnection *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TXPhyConnection", ::TXPhyConnection::Class_Version(), "netx/inc/TXPhyConnection.h", 59,
                  typeid(::TXPhyConnection), DefineBehavior(ptr, ptr),
                  &::TXPhyConnection::Dictionary, &TXPhyConnection_IsA, 0,
                  sizeof(::TXPhyConnection) );
      instance.SetDelete(&delete_TXPhyConnection);
      instance.SetDeleteArray(&deleteArray_TXPhyConnection);
      instance.SetDestructor(&destruct_TXPhyConnection);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TXPhyConnection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TXInputBuffer_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void TXInputBuffer_Dictionary();
   static TClass *TXInputBuffer_IsA(const void*);
   static void *new_TXInputBuffer(void *p = 0);
   static void *newArray_TXInputBuffer(Long_t size);
   static void delete_TXInputBuffer(void *p);
   static void deleteArray_TXInputBuffer(void *p);
   static void destruct_TXInputBuffer(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TXInputBuffer*)
   {
      ::TXInputBuffer *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TXInputBuffer", "netx/inc/TXInputBuffer.h", 36,
                  typeid(::TXInputBuffer), DefineBehavior(ptr, ptr),
                  0, &TXInputBuffer_Dictionary, &TXInputBuffer_IsA, 0,
                  sizeof(::TXInputBuffer) );
      instance.SetNew(&new_TXInputBuffer);
      instance.SetNewArray(&newArray_TXInputBuffer);
      instance.SetDelete(&delete_TXInputBuffer);
      instance.SetDeleteArray(&deleteArray_TXInputBuffer);
      instance.SetDestructor(&destruct_TXInputBuffer);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TXInputBuffer*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void TXInputBuffer_Dictionary() {
      ::ROOT::GenerateInitInstance((const ::TXInputBuffer*)0x0)->GetClass();
   }

}

namespace ROOT {
   void TXLogConnection_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TXLogConnection_IsA(const void*);
   static void *new_TXLogConnection(void *p = 0);
   static void *newArray_TXLogConnection(Long_t size);
   static void delete_TXLogConnection(void *p);
   static void deleteArray_TXLogConnection(void *p);
   static void destruct_TXLogConnection(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TXLogConnection*)
   {
      ::TXLogConnection *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TXLogConnection", ::TXLogConnection::Class_Version(), "netx/inc/TXLogConnection.h", 34,
                  typeid(::TXLogConnection), DefineBehavior(ptr, ptr),
                  &::TXLogConnection::Dictionary, &TXLogConnection_IsA, 0,
                  sizeof(::TXLogConnection) );
      instance.SetNew(&new_TXLogConnection);
      instance.SetNewArray(&newArray_TXLogConnection);
      instance.SetDelete(&delete_TXLogConnection);
      instance.SetDeleteArray(&deleteArray_TXLogConnection);
      instance.SetDestructor(&destruct_TXLogConnection);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TXLogConnection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TXConnectionMgr_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TXConnectionMgr_IsA(const void*);
   static void *new_TXConnectionMgr(void *p = 0);
   static void *newArray_TXConnectionMgr(Long_t size);
   static void delete_TXConnectionMgr(void *p);
   static void deleteArray_TXConnectionMgr(void *p);
   static void destruct_TXConnectionMgr(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TXConnectionMgr*)
   {
      ::TXConnectionMgr *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TXConnectionMgr", ::TXConnectionMgr::Class_Version(), "netx/inc/TXConnectionMgr.h", 67,
                  typeid(::TXConnectionMgr), DefineBehavior(ptr, ptr),
                  &::TXConnectionMgr::Dictionary, &TXConnectionMgr_IsA, 0,
                  sizeof(::TXConnectionMgr) );
      instance.SetNew(&new_TXConnectionMgr);
      instance.SetNewArray(&newArray_TXConnectionMgr);
      instance.SetDelete(&delete_TXConnectionMgr);
      instance.SetDeleteArray(&deleteArray_TXConnectionMgr);
      instance.SetDestructor(&destruct_TXConnectionMgr);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TXConnectionMgr*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TXUrl_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TXUrl_IsA(const void*);
   static void delete_TXUrl(void *p);
   static void deleteArray_TXUrl(void *p);
   static void destruct_TXUrl(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TXUrl*)
   {
      ::TXUrl *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TXUrl", ::TXUrl::Class_Version(), "netx/inc/TXUrl.h", 34,
                  typeid(::TXUrl), DefineBehavior(ptr, ptr),
                  &::TXUrl::Dictionary, &TXUrl_IsA, 0,
                  sizeof(::TXUrl) );
      instance.SetDelete(&delete_TXUrl);
      instance.SetDeleteArray(&deleteArray_TXUrl);
      instance.SetDestructor(&destruct_TXUrl);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TXUrl*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

//______________________________________________________________________________
TClass *TXSocket::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TXSocket::Class_Name()
{
   return "TXSocket";
}

//______________________________________________________________________________
const char *TXSocket::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TXSocket*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TXSocket::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TXSocket*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TXSocket::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TXSocket*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TXSocket::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TXSocket*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TXMessage::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TXMessage::Class_Name()
{
   return "TXMessage";
}

//______________________________________________________________________________
const char *TXMessage::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TXMessage*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TXMessage::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TXMessage*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TXMessage::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TXMessage*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TXMessage::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TXMessage*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TXNetConn::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TXNetConn::Class_Name()
{
   return "TXNetConn";
}

//______________________________________________________________________________
const char *TXNetConn::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TXNetConn*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TXNetConn::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TXNetConn*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TXNetConn::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TXNetConn*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TXNetConn::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TXNetConn*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TXNetFile::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TXNetFile::Class_Name()
{
   return "TXNetFile";
}

//______________________________________________________________________________
const char *TXNetFile::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TXNetFile*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TXNetFile::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TXNetFile*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TXNetFile::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TXNetFile*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TXNetFile::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TXNetFile*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TXPhyConnection::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TXPhyConnection::Class_Name()
{
   return "TXPhyConnection";
}

//______________________________________________________________________________
const char *TXPhyConnection::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TXPhyConnection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TXPhyConnection::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TXPhyConnection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TXPhyConnection::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TXPhyConnection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TXPhyConnection::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TXPhyConnection*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TXLogConnection::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TXLogConnection::Class_Name()
{
   return "TXLogConnection";
}

//______________________________________________________________________________
const char *TXLogConnection::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TXLogConnection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TXLogConnection::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TXLogConnection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TXLogConnection::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TXLogConnection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TXLogConnection::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TXLogConnection*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TXConnectionMgr::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TXConnectionMgr::Class_Name()
{
   return "TXConnectionMgr";
}

//______________________________________________________________________________
const char *TXConnectionMgr::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TXConnectionMgr*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TXConnectionMgr::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TXConnectionMgr*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TXConnectionMgr::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TXConnectionMgr*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TXConnectionMgr::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TXConnectionMgr*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TXUrl::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TXUrl::Class_Name()
{
   return "TXUrl";
}

//______________________________________________________________________________
const char *TXUrl::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TXUrl*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TXUrl::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TXUrl*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TXUrl::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TXUrl*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TXUrl::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TXUrl*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TXNetFile::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TXNetFile.

      TClass *R__cl = ::TXNetFile::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fAlreadyStated", &fAlreadyStated);
      R__insp.Inspect(R__cl, R__parent, "fAlreadyDetected", &fAlreadyDetected);
      R__insp.Inspect(R__cl, R__parent, "*fConnModule", &fConnModule);
      R__insp.Inspect(R__cl, R__parent, "fCreateMode", &fCreateMode);
      R__insp.Inspect(R__cl, R__parent, "fHandle[4]", fHandle);
      R__insp.Inspect(R__cl, R__parent, "fIsROOT", &fIsROOT);
      R__insp.Inspect(R__cl, R__parent, "fOpenPars", (void*)&fOpenPars);
      ::ROOT::GenericShowMembers("Params_Open", (void*)&fOpenPars, R__insp, strcat(R__parent,"fOpenPars."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fOpenWithRefresh", &fOpenWithRefresh);
      R__insp.Inspect(R__cl, R__parent, "fSize", &fSize);
      TNetFile::ShowMembers(R__insp, R__parent);
      ::ROOT::GenericShowMembers("TXAbsNetCommon", ( ::TXAbsNetCommon *) (this ), R__insp, R__parent, false);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TXNetFile_IsA(const void *obj) {
      return ((::TXNetFile*)obj)->IsA();
   }
   // Wrapper around operator delete
   static void delete_TXNetFile(void *p) {
      delete ((::TXNetFile*)p);
   }
   static void deleteArray_TXNetFile(void *p) {
      delete [] ((::TXNetFile*)p);
   }
   static void destruct_TXNetFile(void *p) {
      typedef ::TXNetFile current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TXNetFile

//______________________________________________________________________________
void TXNetConn::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TXNetConn.

      TClass *R__cl = ::TXNetConn::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fLastDataBytesRecv", &fLastDataBytesRecv);
      R__insp.Inspect(R__cl, R__parent, "fLastDataBytesSent", &fLastDataBytesSent);
      R__insp.Inspect(R__cl, R__parent, "fOpenError", &fOpenError);
      R__insp.Inspect(R__cl, R__parent, "fOpenErrorMsg", &fOpenErrorMsg);
      fOpenErrorMsg.ShowMembers(R__insp, strcat(R__parent,"fOpenErrorMsg.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fLastServerResp", (void*)&fLastServerResp);
      ::ROOT::GenericShowMembers("ServerResponseHeader", (void*)&fLastServerResp, R__insp, strcat(R__parent,"fLastServerResp."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fClientHostDomain", &fClientHostDomain);
      fClientHostDomain.ShowMembers(R__insp, strcat(R__parent,"fClientHostDomain.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fConnected", &fConnected);
      R__insp.Inspect(R__cl, R__parent, "fGlobalRedirCnt", &fGlobalRedirCnt);
      R__insp.Inspect(R__cl, R__parent, "fGlobalRedirLastUpdateTimestamp", &fGlobalRedirLastUpdateTimestamp);
      R__insp.Inspect(R__cl, R__parent, "fLastNetopt", &fLastNetopt);
      R__insp.Inspect(R__cl, R__parent, "*fLBSUrl", &fLBSUrl);
      R__insp.Inspect(R__cl, R__parent, "fLogConnID", &fLogConnID);
      R__insp.Inspect(R__cl, R__parent, "fMaxGlobalRedirCnt", &fMaxGlobalRedirCnt);
      R__insp.Inspect(R__cl, R__parent, "*fRedirHandler", &fRedirHandler);
      R__insp.Inspect(R__cl, R__parent, "fRedirInternalToken", &fRedirInternalToken);
      fRedirInternalToken.ShowMembers(R__insp, strcat(R__parent,"fRedirInternalToken.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fServerProto", &fServerProto);
      R__insp.Inspect(R__cl, R__parent, "fServerType", &fServerType);
      R__insp.Inspect(R__cl, R__parent, "fUrl", &fUrl);
      fUrl.ShowMembers(R__insp, strcat(R__parent,"fUrl.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fLastRootdSocket", &fLastRootdSocket);
      R__insp.Inspect(R__cl, R__parent, "fLastRootdProto", &fLastRootdProto);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TXNetConn_IsA(const void *obj) {
      return ((::TXNetConn*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TXNetConn(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TXNetConn : new ::TXNetConn;
   }
   static void *newArray_TXNetConn(Long_t size) {
      return new ::TXNetConn[size];
   }
   // Wrapper around operator delete
   static void delete_TXNetConn(void *p) {
      delete ((::TXNetConn*)p);
   }
   static void deleteArray_TXNetConn(void *p) {
      delete [] ((::TXNetConn*)p);
   }
   static void destruct_TXNetConn(void *p) {
      typedef ::TXNetConn current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TXNetConn

//______________________________________________________________________________
void TXSocket::Streamer(TBuffer &R__b)
{
   // Stream an object of class TXSocket.

   TSocket::Streamer(R__b);
}

//______________________________________________________________________________
void TXSocket::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TXSocket.

      TClass *R__cl = ::TXSocket::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fASYNC", &fASYNC);
      R__insp.Inspect(R__cl, R__parent, "fHost2contact", (void*)&fHost2contact);
      ::ROOT::GenericShowMembers("TXSocketConnectParms", (void*)&fHost2contact, R__insp, strcat(R__parent,"fHost2contact."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fRequestTimeout", &fRequestTimeout);
      TSocket::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TXSocket_IsA(const void *obj) {
      return ((::TXSocket*)obj)->IsA();
   }
   // Wrapper around operator delete
   static void delete_TXSocket(void *p) {
      delete ((::TXSocket*)p);
   }
   static void deleteArray_TXSocket(void *p) {
      delete [] ((::TXSocket*)p);
   }
   static void destruct_TXSocket(void *p) {
      typedef ::TXSocket current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TXSocket

//______________________________________________________________________________
void TXMessage::Streamer(TBuffer &R__b)
{
   // Stream an object of class TXMessage.

   ::Error("TXMessage::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TXMessage::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TXMessage.

      TClass *R__cl = ::TXMessage::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fAllocated", &fAllocated);
      R__insp.Inspect(R__cl, R__parent, "*fData", &fData);
      R__insp.Inspect(R__cl, R__parent, "fMarshalled", &fMarshalled);
      R__insp.Inspect(R__cl, R__parent, "fStatusCode", &fStatusCode);
      R__insp.Inspect(R__cl, R__parent, "fHdr", (void*)&fHdr);
      ::ROOT::GenericShowMembers("ServerResponseHeader", (void*)&fHdr, R__insp, strcat(R__parent,"fHdr."),false);
      R__parent[R__ncp] = 0;
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TXMessage_IsA(const void *obj) {
      return ((::TXMessage*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TXMessage(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TXMessage : new ::TXMessage;
   }
   static void *newArray_TXMessage(Long_t size) {
      return new ::TXMessage[size];
   }
   // Wrapper around operator delete
   static void delete_TXMessage(void *p) {
      delete ((::TXMessage*)p);
   }
   static void deleteArray_TXMessage(void *p) {
      delete [] ((::TXMessage*)p);
   }
   static void destruct_TXMessage(void *p) {
      typedef ::TXMessage current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TXMessage

//______________________________________________________________________________
void TXUrl::Streamer(TBuffer &R__b)
{
   // Stream an object of class TXUrl.

   ::Error("TXUrl::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TXUrl::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TXUrl.

      TClass *R__cl = ::TXUrl::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fUrlArray", (void*)&fUrlArray);
      ::ROOT::GenericShowMembers("UrlArray", (void*)&fUrlArray, R__insp, strcat(R__parent,"fUrlArray."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fTmpUrlArray", (void*)&fTmpUrlArray);
      ::ROOT::GenericShowMembers("UrlArray", (void*)&fTmpUrlArray, R__insp, strcat(R__parent,"fTmpUrlArray."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fPathName", &fPathName);
      fPathName.ShowMembers(R__insp, strcat(R__parent,"fPathName.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fIsValid", &fIsValid);
      R__insp.Inspect(R__cl, R__parent, "fRndgen", &fRndgen);
      fRndgen.ShowMembers(R__insp, strcat(R__parent,"fRndgen.")); R__parent[R__ncp] = 0;
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TXUrl_IsA(const void *obj) {
      return ((::TXUrl*)obj)->IsA();
   }
   // Wrapper around operator delete
   static void delete_TXUrl(void *p) {
      delete ((::TXUrl*)p);
   }
   static void deleteArray_TXUrl(void *p) {
      delete [] ((::TXUrl*)p);
   }
   static void destruct_TXUrl(void *p) {
      typedef ::TXUrl current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TXUrl

//______________________________________________________________________________
void TXConnectionMgr::Streamer(TBuffer &R__b)
{
   // Stream an object of class TXConnectionMgr.

   ::Error("TXConnectionMgr::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TXConnectionMgr::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TXConnectionMgr.

      TClass *R__cl = ::TXConnectionMgr::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fInitialized", &fInitialized);
      R__insp.Inspect(R__cl, R__parent, "fLogVec", (void*)&fLogVec);
      ::ROOT::GenericShowMembers("vector<TXLogConnection*>", (void*)&fLogVec, R__insp, strcat(R__parent,"fLogVec."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fPhyVec", (void*)&fPhyVec);
      ::ROOT::GenericShowMembers("vector<TXPhyConnection*>", (void*)&fPhyVec, R__insp, strcat(R__parent,"fPhyVec."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fMutex", &fMutex);
      R__insp.Inspect(R__cl, R__parent, "*fThreadHandler", &fThreadHandler);
      R__insp.Inspect(R__cl, R__parent, "fThreadKilled", &fThreadKilled);
      ::ROOT::GenericShowMembers("TXAbsUnsolicitedMsgHandler", ( ::TXAbsUnsolicitedMsgHandler *) (this ), R__insp, R__parent, false);
      ::ROOT::GenericShowMembers("TXUnsolicitedMsgSender", ( ::TXUnsolicitedMsgSender *) (this ), R__insp, R__parent, false);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TXConnectionMgr_IsA(const void *obj) {
      return ((::TXConnectionMgr*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TXConnectionMgr(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TXConnectionMgr : new ::TXConnectionMgr;
   }
   static void *newArray_TXConnectionMgr(Long_t size) {
      return new ::TXConnectionMgr[size];
   }
   // Wrapper around operator delete
   static void delete_TXConnectionMgr(void *p) {
      delete ((::TXConnectionMgr*)p);
   }
   static void deleteArray_TXConnectionMgr(void *p) {
      delete [] ((::TXConnectionMgr*)p);
   }
   static void destruct_TXConnectionMgr(void *p) {
      typedef ::TXConnectionMgr current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TXConnectionMgr

//______________________________________________________________________________
void TXLogConnection::Streamer(TBuffer &R__b)
{
   // Stream an object of class TXLogConnection.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> fPhyConnection;
      R__b >> fLogLastBytesSent;
      R__b >> fLogBytesSent;
      R__b >> fLogLastBytesRecv;
      R__b >> fLogBytesRecv;
      R__b.CheckByteCount(R__s, R__c, TXLogConnection::IsA());
   } else {
      R__c = R__b.WriteVersion(TXLogConnection::IsA(), kTRUE);
      R__b << fPhyConnection;
      R__b << fLogLastBytesSent;
      R__b << fLogBytesSent;
      R__b << fLogLastBytesRecv;
      R__b << fLogBytesRecv;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TXLogConnection::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TXLogConnection.

      TClass *R__cl = ::TXLogConnection::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fPhyConnection", &fPhyConnection);
      R__insp.Inspect(R__cl, R__parent, "fLogLastBytesSent", &fLogLastBytesSent);
      R__insp.Inspect(R__cl, R__parent, "fLogBytesSent", &fLogBytesSent);
      R__insp.Inspect(R__cl, R__parent, "fLogLastBytesRecv", &fLogLastBytesRecv);
      R__insp.Inspect(R__cl, R__parent, "fLogBytesRecv", &fLogBytesRecv);
      ::ROOT::GenericShowMembers("TXAbsUnsolicitedMsgHandler", ( ::TXAbsUnsolicitedMsgHandler *) (this ), R__insp, R__parent, false);
      ::ROOT::GenericShowMembers("TXUnsolicitedMsgSender", ( ::TXUnsolicitedMsgSender *) (this ), R__insp, R__parent, false);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TXLogConnection_IsA(const void *obj) {
      return ((::TXLogConnection*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TXLogConnection(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TXLogConnection : new ::TXLogConnection;
   }
   static void *newArray_TXLogConnection(Long_t size) {
      return new ::TXLogConnection[size];
   }
   // Wrapper around operator delete
   static void delete_TXLogConnection(void *p) {
      delete ((::TXLogConnection*)p);
   }
   static void deleteArray_TXLogConnection(void *p) {
      delete [] ((::TXLogConnection*)p);
   }
   static void destruct_TXLogConnection(void *p) {
      typedef ::TXLogConnection current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TXLogConnection

//______________________________________________________________________________
void TXPhyConnection::Streamer(TBuffer &R__b)
{
   // Stream an object of class TXPhyConnection.

   ::Error("TXPhyConnection::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TXPhyConnection::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TXPhyConnection.

      TClass *R__cl = ::TXPhyConnection::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fLastUseTimestamp", &fLastUseTimestamp);
      R__insp.Inspect(R__cl, R__parent, "fLogged", &fLogged);
      R__insp.Inspect(R__cl, R__parent, "fMsgQ", (void*)&fMsgQ);
      ::ROOT::GenericShowMembers("TXInputBuffer", (void*)&fMsgQ, R__insp, strcat(R__parent,"fMsgQ."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fRequestTimeout", &fRequestTimeout);
      R__insp.Inspect(R__cl, R__parent, "*fRwMutex", &fRwMutex);
      R__insp.Inspect(R__cl, R__parent, "*fMutex", &fMutex);
      R__insp.Inspect(R__cl, R__parent, "*fReaderthreadhandler", &fReaderthreadhandler);
      R__insp.Inspect(R__cl, R__parent, "fReaderthreadrunning", &fReaderthreadrunning);
      R__insp.Inspect(R__cl, R__parent, "fReaderthreadkilled", &fReaderthreadkilled);
      R__insp.Inspect(R__cl, R__parent, "fRemoteAddress", &fRemoteAddress);
      fRemoteAddress.ShowMembers(R__insp, strcat(R__parent,"fRemoteAddress.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fRemotePort", &fRemotePort);
      R__insp.Inspect(R__cl, R__parent, "*fSocket", &fSocket);
      R__insp.Inspect(R__cl, R__parent, "*fReaderCV", &fReaderCV);
      R__insp.Inspect(R__cl, R__parent, "fServer", &fServer);
      R__insp.Inspect(R__cl, R__parent, "fTTLsec", &fTTLsec);
      ::ROOT::GenericShowMembers("TXUnsolicitedMsgSender", ( ::TXUnsolicitedMsgSender *) (this ), R__insp, R__parent, false);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TXPhyConnection_IsA(const void *obj) {
      return ((::TXPhyConnection*)obj)->IsA();
   }
   // Wrapper around operator delete
   static void delete_TXPhyConnection(void *p) {
      delete ((::TXPhyConnection*)p);
   }
   static void deleteArray_TXPhyConnection(void *p) {
      delete [] ((::TXPhyConnection*)p);
   }
   static void destruct_TXPhyConnection(void *p) {
      typedef ::TXPhyConnection current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TXPhyConnection

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TXInputBuffer_IsA(const void *obj) {
      return GetROOT()->GetClass(typeid(*(::TXInputBuffer*)obj));
   }
   // Wrappers around operator new
   static void *new_TXInputBuffer(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TXInputBuffer : new ::TXInputBuffer;
   }
   static void *newArray_TXInputBuffer(Long_t size) {
      return new ::TXInputBuffer[size];
   }
   // Wrapper around operator delete
   static void delete_TXInputBuffer(void *p) {
      delete ((::TXInputBuffer*)p);
   }
   static void deleteArray_TXInputBuffer(void *p) {
      delete [] ((::TXInputBuffer*)p);
   }
   static void destruct_TXInputBuffer(void *p) {
      typedef ::TXInputBuffer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TXInputBuffer

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TXAbsNetCommon_IsA(const void *obj) {
      return GetROOT()->GetClass(typeid(*(::TXAbsNetCommon*)obj));
   }
   // Wrapper around operator delete
   static void delete_TXAbsNetCommon(void *p) {
      delete ((::TXAbsNetCommon*)p);
   }
   static void deleteArray_TXAbsNetCommon(void *p) {
      delete [] ((::TXAbsNetCommon*)p);
   }
   static void destruct_TXAbsNetCommon(void *p) {
      typedef ::TXAbsNetCommon current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TXAbsNetCommon

/********************************************************
* netx/src/G__Netx.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableG__Netx();

extern "C" void G__set_cpp_environmentG__Netx() {
  G__add_compiledheader("base/inc/TROOT.h");
  G__add_compiledheader("base/inc/TMemberInspector.h");
  G__add_compiledheader("netx/inc/TXNetFile.h");
  G__add_compiledheader("netx/inc/TXConnectionMgr.h");
  G__add_compiledheader("netx/inc/TXUnsolicitedMsg.h");
  G__add_compiledheader("netx/inc/TXAbsNetCommon.h");
  G__add_compiledheader("netx/inc/TXSocket.h");
  G__add_compiledheader("netx/inc/TXInputBuffer.h");
  G__add_compiledheader("netx/inc/TXDebug.h");
  G__add_compiledheader("netx/inc/TXLogConnection.h");
  G__add_compiledheader("netx/inc/TXPhyConnection.h");
  G__add_compiledheader("netx/inc/TXUrl.h");
  G__add_compiledheader("netx/inc/TXNetConn.h");
  G__add_compiledheader("netx/inc/TXMessage.h");
  G__add_compiledheader("netx/inc/TXError.h");
  G__cpp_reset_tagtableG__Netx();
}
class G__netxdIsrcdIG__NetxdOcxx_tag {};

void* operator new(size_t size,G__netxdIsrcdIG__NetxdOcxx_tag* p) {
  if(p && G__PVOID!=G__getgvp()) return((void*)p);
#ifndef G__ROOT
  return(malloc(size));
#else
  return(::operator new(size));
#endif
}

/* dummy, for exception */
#ifdef G__EH_DUMMY_DELETE
void operator delete(void *p,G__netxdIsrcdIG__NetxdOcxx_tag* x) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}
#endif

static void G__operator_delete(void *p) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}

void G__DELDMY_netxdIsrcdIG__NetxdOcxx() { G__operator_delete(0); }

extern "C" int G__cpp_dllrevG__Netx() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TXSocket */
static int G__G__Netx_148_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TXSocket *p=NULL;
   switch(libp->paran) {
   case 3:
      p = new TXSocket(
*((TString*)G__int(libp->para[0])),(Int_t)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2]));
      break;
   case 2:
      p = new TXSocket(*((TString*)G__int(libp->para[0])),(Int_t)G__int(libp->para[1]));
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__NetxLN_TXSocket);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_148_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TXSocket::CatchTimeOut();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_148_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXSocket*)(G__getstructoffset()))->Create(*((TString*)G__int(libp->para[0])),(Int_t)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_148_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 3:
      G__letint(result7,105,(long)((TXSocket*)(G__getstructoffset()))->RecvRaw((void*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(ESendRecvOptions)G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7,105,(long)((TXSocket*)(G__getstructoffset()))->RecvRaw((void*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_148_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 3:
      G__letint(result7,105,(long)((TXSocket*)(G__getstructoffset()))->SendRaw((const void*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(ESendRecvOptions)G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7,105,(long)((TXSocket*)(G__getstructoffset()))->SendRaw((const void*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_148_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXSocket*)(G__getstructoffset()))->TryConnect();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_148_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TXSocket::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_148_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXSocket::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_148_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TXSocket::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_148_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TXSocket::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_148_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TXSocket*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_148_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXSocket*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_148_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXSocket*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_148_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXSocket*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_148_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXSocket::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_148_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TXSocket::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_148_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXSocket::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_148_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TXSocket::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Netx_148_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TXSocket *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TXSocket(*(TXSocket*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__NetxLN_TXSocket);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TXSocket G__TTXSocket;
static int G__G__Netx_148_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TXSocket *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TXSocket *)((G__getstructoffset())+sizeof(TXSocket)*i);
   else  delete (TXSocket *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TXMessage */
static int G__G__Netx_204_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TXMessage *p=NULL;
      p=::new((G__netxdIsrcdIG__NetxdOcxx_tag*)G__getgvp()) TXMessage(*((ServerResponseHeader*)G__int(libp->para[0])));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__NetxLN_TXMessage);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TXMessage *p=NULL;
   if(G__getaryconstruct()) p=new TXMessage[G__getaryconstruct()];
   else p=::new((G__netxdIsrcdIG__NetxdOcxx_tag*)G__getgvp()) TXMessage;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__NetxLN_TXMessage);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXMessage*)(G__getstructoffset()))->CreateData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TXMessage*)(G__getstructoffset()))->DataLen());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,89,(long)((TXMessage*)(G__getstructoffset()))->DonateData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,89,(long)((TXMessage*)(G__getstructoffset()))->GetData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)((TXMessage*)(G__getstructoffset()))->GetStatusCode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)((TXMessage*)(G__getstructoffset()))->HeaderStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)((TXMessage*)(G__getstructoffset()))->HeaderSID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXMessage*)(G__getstructoffset()))->IsAttn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXMessage*)(G__getstructoffset()))->IsError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXMessage*)(G__getstructoffset()))->IsMarshalled());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXMessage*)(G__getstructoffset()))->Marshall();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXMessage*)(G__getstructoffset()))->MatchStreamid((Short_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TXMessage*)(G__getstructoffset()))->ReadRaw((TXPhyConnection*)G__int(libp->para[0]),(ESendRecvOptions)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXMessage*)(G__getstructoffset()))->SetHeaderStatus((kXR_int16)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXMessage*)(G__getstructoffset()))->SetMarshalled((Bool_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXMessage*)(G__getstructoffset()))->SetStatusCode((kXR_int16)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXMessage*)(G__getstructoffset()))->Unmarshall();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TXMessage::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXMessage::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TXMessage::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TXMessage::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TXMessage*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXMessage*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXMessage*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXMessage*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_0_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXMessage::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_1_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TXMessage::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_2_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXMessage::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_204_3_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TXMessage::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Netx_204_4_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TXMessage *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TXMessage(*(TXMessage*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__NetxLN_TXMessage);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TXMessage G__TTXMessage;
static int G__G__Netx_204_5_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TXMessage *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((TXMessage *)((G__getstructoffset())+sizeof(TXMessage)*i))->~G__TTXMessage();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((TXMessage *)(G__getstructoffset()))->~G__TTXMessage();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Netx_204_6_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TXMessage *dest = (TXMessage*)(G__getstructoffset());
   *dest = (*(TXMessage*)libp->para[0].ref);
   const TXMessage& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TXAbsNetCommon */
static int G__G__Netx_206_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXAbsNetCommon*)(G__getstructoffset()))->OpenFileWhenRedirected((char*)G__int(libp->para[0]),*(Bool_t*)G__Boolref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_206_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXAbsNetCommon*)(G__getstructoffset()))->SetParm((const char*)G__int(libp->para[0]),(int)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_206_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXAbsNetCommon*)(G__getstructoffset()))->SetParm((const char*)G__int(libp->para[0]),(double)G__double(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TXAbsNetCommon G__TTXAbsNetCommon;
static int G__G__Netx_206_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TXAbsNetCommon *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((TXAbsNetCommon *)((G__getstructoffset())+sizeof(TXAbsNetCommon)*i))->~G__TTXAbsNetCommon();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((TXAbsNetCommon *)(G__getstructoffset()))->~G__TTXAbsNetCommon();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Netx_206_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TXAbsNetCommon *dest = (TXAbsNetCommon*)(G__getstructoffset());
   *dest = (*(TXAbsNetCommon*)libp->para[0].ref);
   const TXAbsNetCommon& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TXNetConn */
static int G__G__Netx_207_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TXNetConn *p=NULL;
   if(G__getaryconstruct()) p=new TXNetConn[G__getaryconstruct()];
   else p=::new((G__netxdIsrcdIG__NetxdOcxx_tag*)G__getgvp()) TXNetConn;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__NetxLN_TXNetConn);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXNetConn*)(G__getstructoffset()))->CheckHostDomain(*((TString*)G__int(libp->para[0])),*((TString*)G__int(libp->para[1]))
,*((TString*)G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)((TXNetConn*)(G__getstructoffset()))->Connect(*((TString*)G__int(libp->para[0])),(Int_t)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXNetConn*)(G__getstructoffset()))->Disconnect((Bool_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXNetConn*)(G__getstructoffset()))->GetAccessToSrv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
const         TString *pobj,xobj=((const TXNetConn*)(G__getstructoffset()))->GetClientHostDomain();
        pobj=new TString(xobj);
        result7->obj.i=(long)((void*)pobj); result7->ref=result7->obj.i;
        G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TXNetConn*)(G__getstructoffset()))->GetLogConnID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TXNetConn*)(G__getstructoffset()))->GetLBSUrl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TXNetConn*)(G__getstructoffset()))->GetOpenError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TXNetConn*)(G__getstructoffset()))->GetRootdSocket());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TXNetConn*)(G__getstructoffset()))->GoToAnotherServer(*((TString*)G__int(libp->para[0])),(Int_t)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const TXNetConn*)(G__getstructoffset()))->IsConnected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TXNetConn*)(G__getstructoffset()))->LastBytesRecv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TXNetConn*)(G__getstructoffset()))->LastBytesSent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TXNetConn*)(G__getstructoffset()))->LastDataBytesRecv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TXNetConn*)(G__getstructoffset()))->LastDataBytesSent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 7:
      G__letint(result7,103,(long)((TXNetConn*)(G__getstructoffset()))->SendGenCommand(
(ClientRequest*)G__int(libp->para[0]),(const void*)G__int(libp->para[1])
,(void**)G__int(libp->para[2]),(void*)G__int(libp->para[3])
,(Bool_t)G__int(libp->para[4]),(char*)G__int(libp->para[5])
,(ServerResponseHeader*)G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7,103,(long)((TXNetConn*)(G__getstructoffset()))->SendGenCommand((ClientRequest*)G__int(libp->para[0]),(const void*)G__int(libp->para[1])
,(void**)G__int(libp->para[2]),(void*)G__int(libp->para[3])
,(Bool_t)G__int(libp->para[4]),(char*)G__int(libp->para[5])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TXNetConn*)(G__getstructoffset()))->GetServerType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXNetConn*)(G__getstructoffset()))->SetClientHostDomain((const char*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXNetConn*)(G__getstructoffset()))->SetConnected((Bool_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXNetConn*)(G__getstructoffset()))->SetLogConnID((Short_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXNetConn*)(G__getstructoffset()))->SetOpenError((XErrorCode)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXNetConn*)(G__getstructoffset()))->SetRedirHandler((TXAbsNetCommon*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXNetConn*)(G__getstructoffset()))->SetServerType((TXNetConn::ServerType)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXNetConn*)(G__getstructoffset()))->SetSID((kXR_char*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXNetConn*)(G__getstructoffset()))->SetUrl(*((TUrl*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TXNetConn::SetTXConnectionMgr((TXConnectionMgr*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_1_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TXNetConn::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_2_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXNetConn::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_3_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TXNetConn::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_4_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TXNetConn::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_5_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TXNetConn*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_6_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXNetConn*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_7_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXNetConn*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_8_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXNetConn*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_9_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXNetConn::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_0_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TXNetConn::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_1_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXNetConn::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_207_2_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TXNetConn::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Netx_207_3_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TXNetConn *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TXNetConn(*(TXNetConn*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__NetxLN_TXNetConn);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TXNetConn G__TTXNetConn;
static int G__G__Netx_207_4_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TXNetConn *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((TXNetConn *)((G__getstructoffset())+sizeof(TXNetConn)*i))->~G__TTXNetConn();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((TXNetConn *)(G__getstructoffset()))->~G__TTXNetConn();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Netx_207_5_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TXNetConn *dest = (TXNetConn*)(G__getstructoffset());
   *dest = (*(TXNetConn*)libp->para[0].ref);
   const TXNetConn& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TXNetFile */
static int G__G__Netx_209_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TXNetFile *p=NULL;
   switch(libp->paran) {
   case 5:
      p = new TXNetFile(
(const char*)G__int(libp->para[0]),(Option_t*)G__int(libp->para[1])
,(const char*)G__int(libp->para[2]),(Int_t)G__int(libp->para[3])
,(Int_t)G__int(libp->para[4]));
      break;
   case 4:
      p = new TXNetFile(
(const char*)G__int(libp->para[0]),(Option_t*)G__int(libp->para[1])
,(const char*)G__int(libp->para[2]),(Int_t)G__int(libp->para[3]));
      break;
   case 3:
      p = new TXNetFile(
(const char*)G__int(libp->para[0]),(Option_t*)G__int(libp->para[1])
,(const char*)G__int(libp->para[2]));
      break;
   case 2:
      p = new TXNetFile((const char*)G__int(libp->para[0]),(Option_t*)G__int(libp->para[1]));
      break;
   case 1:
      p = new TXNetFile((const char*)G__int(libp->para[0]));
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__NetxLN_TXNetFile);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXNetFile*)(G__getstructoffset()))->OpenFileWhenRedirected((char*)G__int(libp->para[0]),*(Bool_t*)G__Boolref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXNetFile*)(G__getstructoffset()))->ProcessUnsolicitedMsg((TXUnsolicitedMsgSender*)G__int(libp->para[0]),(TXMessage*)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TXNetFile*)(G__getstructoffset()))->Close((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TXNetFile*)(G__getstructoffset()))->Close();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXNetFile*)(G__getstructoffset()))->Flush();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,108,(long)((TXNetFile*)(G__getstructoffset()))->GetRemoteFile((void**)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const TXNetFile*)(G__getstructoffset()))->IsOpen());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TXNetFile*)(G__getstructoffset()))->LastBytesRecv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TXNetFile*)(G__getstructoffset()))->LastBytesSent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TXNetFile*)(G__getstructoffset()))->LastDataBytesRecv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TXNetFile*)(G__getstructoffset()))->LastDataBytesSent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXNetFile*)(G__getstructoffset()))->Open((Option_t*)G__int(libp->para[0]),(const char*)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2]),(Int_t)G__int(libp->para[3])
,(Bool_t)G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXNetFile*)(G__getstructoffset()))->ReadBuffer((char*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TXNetFile*)(G__getstructoffset()))->ReOpen((Option_t*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letLonglong(result7,110,(G__int64)((TXNetFile*)(G__getstructoffset()))->Size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXNetFile*)(G__getstructoffset()))->WriteBuffer((const char*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TXNetFile::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXNetFile::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TXNetFile::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TXNetFile::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TXNetFile*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXNetFile*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXNetFile*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXNetFile*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_0_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXNetFile::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_1_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TXNetFile::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_2_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXNetFile::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_209_3_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TXNetFile::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TXNetFile G__TTXNetFile;
static int G__G__Netx_209_4_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TXNetFile *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TXNetFile *)((G__getstructoffset())+sizeof(TXNetFile)*i);
   else  delete (TXNetFile *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TXPhyConnection */
static int G__G__Netx_228_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TXPhyConnection *p=NULL;
      p=::new((G__netxdIsrcdIG__NetxdOcxx_tag*)G__getgvp()) TXPhyConnection((TXAbsUnsolicitedMsgHandler*)G__int(libp->para[0]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__NetxLN_TXPhyConnection);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TXPhyConnection*)(G__getstructoffset()))->BuildXMessage((ESendRecvOptions)G__int(libp->para[0]),(Bool_t)G__int(libp->para[1])
,(Bool_t)G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXPhyConnection*)(G__getstructoffset()))->CheckAutoTerm();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXPhyConnection*)(G__getstructoffset()))->Connect(*((TString*)G__int(libp->para[0])),(Int_t)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXPhyConnection*)(G__getstructoffset()))->Disconnect();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXPhyConnection*)(G__getstructoffset()))->ExpiredTTL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((TXPhyConnection*)(G__getstructoffset()))->GetBytesRecv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((TXPhyConnection*)(G__getstructoffset()))->GetBytesSent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((TXPhyConnection*)(G__getstructoffset()))->GetSocketBytesRecv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((TXPhyConnection*)(G__getstructoffset()))->GetSocketBytesSent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,108,(long)((const TXPhyConnection*)(G__getstructoffset()))->GetTTL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXPhyConnection*)(G__getstructoffset()))->IsAddress(*(TString*)libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const TXPhyConnection*)(G__getstructoffset()))->ReaderThreadKilled());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TXPhyConnection*)(G__getstructoffset()))->IsLogged());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const TXPhyConnection*)(G__getstructoffset()))->IsPort((Int_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const TXPhyConnection*)(G__getstructoffset()))->IsValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXPhyConnection*)(G__getstructoffset()))->LockChannel();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXPhyConnection*)(G__getstructoffset()))->ReaderStarted();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 3:
      G__letint(result7,105,(long)((TXPhyConnection*)(G__getstructoffset()))->ReadRaw((void*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(ESendRecvOptions)G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7,105,(long)((TXPhyConnection*)(G__getstructoffset()))->ReadRaw((void*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TXPhyConnection*)(G__getstructoffset()))->ReadXMessage((Int_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXPhyConnection*)(G__getstructoffset()))->ReConnect(*((TString*)G__int(libp->para[0])),(Int_t)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TXPhyConnection*)(G__getstructoffset()))->SaveSocket());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXPhyConnection*)(G__getstructoffset()))->SetLogged((ELoginState)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXPhyConnection*)(G__getstructoffset()))->SetTTL((Long_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXPhyConnection*)(G__getstructoffset()))->StartReader();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXPhyConnection*)(G__getstructoffset()))->Touch();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXPhyConnection*)(G__getstructoffset()))->UnlockChannel();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 3:
      G__letint(result7,105,(long)((TXPhyConnection*)(G__getstructoffset()))->WriteRaw((const void*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(ESendRecvOptions)G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7,105,(long)((TXPhyConnection*)(G__getstructoffset()))->WriteRaw((const void*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_0_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TXPhyConnection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_1_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXPhyConnection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_2_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TXPhyConnection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_3_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TXPhyConnection::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_4_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TXPhyConnection*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_5_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXPhyConnection*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_6_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXPhyConnection*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_7_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXPhyConnection*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_8_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXPhyConnection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_9_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TXPhyConnection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_0_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXPhyConnection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_228_1_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TXPhyConnection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Netx_228_2_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TXPhyConnection *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TXPhyConnection(*(TXPhyConnection*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__NetxLN_TXPhyConnection);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TXPhyConnection G__TTXPhyConnection;
static int G__G__Netx_228_3_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TXPhyConnection *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((TXPhyConnection *)((G__getstructoffset())+sizeof(TXPhyConnection)*i))->~G__TTXPhyConnection();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((TXPhyConnection *)(G__getstructoffset()))->~G__TTXPhyConnection();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Netx_228_4_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TXPhyConnection *dest = (TXPhyConnection*)(G__getstructoffset());
   *dest = (*(TXPhyConnection*)libp->para[0].ref);
   const TXPhyConnection& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TXInputBuffer */
static int G__G__Netx_293_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TXInputBuffer *p=NULL;
   if(G__getaryconstruct()) p=new TXInputBuffer[G__getaryconstruct()];
   else p=::new((G__netxdIsrcdIG__NetxdOcxx_tag*)G__getgvp()) TXInputBuffer;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__NetxLN_TXInputBuffer);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_293_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXInputBuffer*)(G__getstructoffset()))->IsMexEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_293_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXInputBuffer*)(G__getstructoffset()))->IsSemEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_293_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,108,(long)((TXInputBuffer*)(G__getstructoffset()))->MexSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_293_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TXInputBuffer*)(G__getstructoffset()))->PutMsg((TXMessage*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_293_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,108,(long)((TXInputBuffer*)(G__getstructoffset()))->SemSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_293_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TXInputBuffer*)(G__getstructoffset()))->GetMsg((Short_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_293_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TXInputBuffer*)(G__getstructoffset()))->RetrieveMsg((Short_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Netx_293_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TXInputBuffer *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TXInputBuffer(*(TXInputBuffer*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__NetxLN_TXInputBuffer);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TXInputBuffer G__TTXInputBuffer;
static int G__G__Netx_293_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TXInputBuffer *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((TXInputBuffer *)((G__getstructoffset())+sizeof(TXInputBuffer)*i))->~G__TTXInputBuffer();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((TXInputBuffer *)(G__getstructoffset()))->~G__TTXInputBuffer();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Netx_293_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TXInputBuffer *dest = (TXInputBuffer*)(G__getstructoffset());
   *dest = (*(TXInputBuffer*)libp->para[0].ref);
   const TXInputBuffer& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TXLogConnection */
static int G__G__Netx_313_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TXLogConnection *p=NULL;
   if(G__getaryconstruct()) p=new TXLogConnection[G__getaryconstruct()];
   else p=::new((G__netxdIsrcdIG__NetxdOcxx_tag*)G__getgvp()) TXLogConnection;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__NetxLN_TXLogConnection);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((const TXLogConnection*)(G__getstructoffset()))->GetBytesSent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((const TXLogConnection*)(G__getstructoffset()))->GetBytesRecv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((TXLogConnection*)(G__getstructoffset()))->GetPhyBytesSent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((TXLogConnection*)(G__getstructoffset()))->GetPhyBytesRecv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TXLogConnection*)(G__getstructoffset()))->GetPhyConnection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TXLogConnection*)(G__getstructoffset()))->LastBytesRecv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TXLogConnection*)(G__getstructoffset()))->LastBytesSent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXLogConnection*)(G__getstructoffset()))->ProcessUnsolicitedMsg((TXUnsolicitedMsgSender*)G__int(libp->para[0]),(TXMessage*)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 3:
      G__letint(result7,105,(long)((TXLogConnection*)(G__getstructoffset()))->ReadRaw((void*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(ESendRecvOptions)G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7,105,(long)((TXLogConnection*)(G__getstructoffset()))->ReadRaw((void*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXLogConnection*)(G__getstructoffset()))->SetPhyConnection((TXPhyConnection*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 3:
      G__letint(result7,105,(long)((TXLogConnection*)(G__getstructoffset()))->WriteRaw((const void*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(ESendRecvOptions)G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7,105,(long)((TXLogConnection*)(G__getstructoffset()))->WriteRaw((const void*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TXLogConnection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXLogConnection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TXLogConnection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TXLogConnection::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TXLogConnection*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXLogConnection*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXLogConnection*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXLogConnection*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXLogConnection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TXLogConnection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXLogConnection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_313_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TXLogConnection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Netx_313_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TXLogConnection *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TXLogConnection(*(TXLogConnection*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__NetxLN_TXLogConnection);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TXLogConnection G__TTXLogConnection;
static int G__G__Netx_313_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TXLogConnection *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((TXLogConnection *)((G__getstructoffset())+sizeof(TXLogConnection)*i))->~G__TTXLogConnection();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((TXLogConnection *)(G__getstructoffset()))->~G__TTXLogConnection();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Netx_313_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TXLogConnection *dest = (TXLogConnection*)(G__getstructoffset());
   *dest = (*(TXLogConnection*)libp->para[0].ref);
   const TXLogConnection& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TXConnectionMgr */
static int G__G__Netx_314_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TXConnectionMgr *p=NULL;
   if(G__getaryconstruct()) p=new TXConnectionMgr[G__getaryconstruct()];
   else p=::new((G__netxdIsrcdIG__NetxdOcxx_tag*)G__getgvp()) TXConnectionMgr;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__NetxLN_TXConnectionMgr);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)((TXConnectionMgr*)(G__getstructoffset()))->Connect(*((TString*)G__int(libp->para[0])),(Int_t)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXConnectionMgr*)(G__getstructoffset()))->Disconnect((Short_t)G__int(libp->para[0]),(Bool_t)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TXConnectionMgr*)(G__getstructoffset()))->GetConnection((Short_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)((TXConnectionMgr*)(G__getstructoffset()))->GetPhyConnectionRefCount((TXPhyConnection*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXConnectionMgr*)(G__getstructoffset()))->Init();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
   G__letint(result7,85,(long)((TXConnectionMgr*)(G__getstructoffset()))->ReadMsg((Short_t)G__int(libp->para[0]),(ESendRecvOptions)G__int(libp->para[1])));
      break;
   case 1:
   G__letint(result7,85,(long)((TXConnectionMgr*)(G__getstructoffset()))->ReadMsg((Short_t)G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 4:
      G__letint(result7,105,(long)((TXConnectionMgr*)(G__getstructoffset()))->ReadRaw((Short_t)G__int(libp->para[0]),(void*)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2]),(ESendRecvOptions)G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7,105,(long)((TXConnectionMgr*)(G__getstructoffset()))->ReadRaw((Short_t)G__int(libp->para[0]),(void*)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const TXConnectionMgr*)(G__getstructoffset()))->ThreadKilled());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 4:
      G__letint(result7,105,(long)((TXConnectionMgr*)(G__getstructoffset()))->WriteRaw((Short_t)G__int(libp->para[0]),(const void*)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2]),(ESendRecvOptions)G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7,105,(long)((TXConnectionMgr*)(G__getstructoffset()))->WriteRaw((Short_t)G__int(libp->para[0]),(const void*)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TXConnectionMgr::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXConnectionMgr::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TXConnectionMgr::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TXConnectionMgr::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TXConnectionMgr*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXConnectionMgr*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXConnectionMgr*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXConnectionMgr*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXConnectionMgr::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TXConnectionMgr::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXConnectionMgr::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_314_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TXConnectionMgr::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Netx_314_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TXConnectionMgr *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TXConnectionMgr(*(TXConnectionMgr*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__NetxLN_TXConnectionMgr);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TXConnectionMgr G__TTXConnectionMgr;
static int G__G__Netx_314_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TXConnectionMgr *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((TXConnectionMgr *)((G__getstructoffset())+sizeof(TXConnectionMgr)*i))->~G__TTXConnectionMgr();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((TXConnectionMgr *)(G__getstructoffset()))->~G__TTXConnectionMgr();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Netx_314_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TXConnectionMgr *dest = (TXConnectionMgr*)(G__getstructoffset());
   *dest = (*(TXConnectionMgr*)libp->para[0].ref);
   const TXConnectionMgr& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TXUrl */
static int G__G__Netx_336_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TXUrl *p=NULL;
      p=::new((G__netxdIsrcdIG__NetxdOcxx_tag*)G__getgvp()) TXUrl(*((TString*)G__int(libp->para[0])));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__NetxLN_TXUrl);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        TString *pobj,xobj=((TXUrl*)(G__getstructoffset()))->GetServers();
        pobj=new TString(xobj);
        result7->obj.i=(long)((void*)pobj); result7->ref=result7->obj.i;
        G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TXUrl*)(G__getstructoffset()))->GetNextUrl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TXUrl*)(G__getstructoffset()))->GetARandomUrl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXUrl*)(G__getstructoffset()))->Rewind();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXUrl*)(G__getstructoffset()))->ShowUrls();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TXUrl*)(G__getstructoffset()))->Size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)((TXUrl*)(G__getstructoffset()))->GetFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TXUrl*)(G__getstructoffset()))->IsValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TXUrl::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXUrl::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TXUrl::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TXUrl::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TXUrl*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXUrl*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXUrl*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TXUrl*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXUrl::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TXUrl::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TXUrl::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Netx_336_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TXUrl::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Netx_336_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TXUrl *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TXUrl(*(TXUrl*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__NetxLN_TXUrl);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TXUrl G__TTXUrl;
static int G__G__Netx_336_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TXUrl *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((TXUrl *)((G__getstructoffset())+sizeof(TXUrl)*i))->~G__TTXUrl();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((TXUrl *)(G__getstructoffset()))->~G__TTXUrl();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Netx_336_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TXUrl *dest = (TXUrl*)(G__getstructoffset());
   *dest = (*(TXUrl*)libp->para[0].ref);
   const TXUrl& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TXSocket */

/* TXMessage */

/* TXAbsNetCommon */

/* TXNetConn */

/* TXNetFile */

/* TXPhyConnection */

/* TXInputBuffer */

/* TXLogConnection */

/* TXConnectionMgr */

/* TXUrl */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__Netx {
 public:
  G__Sizep2memfuncG__Netx() {p=&G__Sizep2memfuncG__Netx::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__Netx::*p)();
};

size_t G__get_sizep2memfuncG__Netx()
{
  G__Sizep2memfuncG__Netx a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__Netx() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__NetxLN_TXSocket))) {
     TXSocket *G__Lderived;
     G__Lderived=(TXSocket*)0x1000;
     {
       TSocket *G__Lpbase=(TSocket*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXSocket),G__get_linked_tagnum(&G__G__NetxLN_TSocket),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXSocket),G__get_linked_tagnum(&G__G__NetxLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXSocket),G__get_linked_tagnum(&G__G__NetxLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__NetxLN_TXAbsNetCommon))) {
     TXAbsNetCommon *G__Lderived;
     G__Lderived=(TXAbsNetCommon*)0x1000;
     {
       TXAbsUnsolicitedMsgHandler *G__Lpbase=(TXAbsUnsolicitedMsgHandler*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXAbsNetCommon),G__get_linked_tagnum(&G__G__NetxLN_TXAbsUnsolicitedMsgHandler),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile))) {
     TXNetFile *G__Lderived;
     G__Lderived=(TXNetFile*)0x1000;
     {
       TNetFile *G__Lpbase=(TNetFile*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile),G__get_linked_tagnum(&G__G__NetxLN_TNetFile),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TFile *G__Lpbase=(TFile*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile),G__get_linked_tagnum(&G__G__NetxLN_TFile),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TDirectory *G__Lpbase=(TDirectory*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile),G__get_linked_tagnum(&G__G__NetxLN_TDirectory),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile),G__get_linked_tagnum(&G__G__NetxLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile),G__get_linked_tagnum(&G__G__NetxLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TXAbsNetCommon *G__Lpbase=(TXAbsNetCommon*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile),G__get_linked_tagnum(&G__G__NetxLN_TXAbsNetCommon),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TXAbsUnsolicitedMsgHandler *G__Lpbase=(TXAbsUnsolicitedMsgHandler*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile),G__get_linked_tagnum(&G__G__NetxLN_TXAbsUnsolicitedMsgHandler),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__NetxLN_TXPhyConnection))) {
     TXPhyConnection *G__Lderived;
     G__Lderived=(TXPhyConnection*)0x1000;
     {
       TXUnsolicitedMsgSender *G__Lpbase=(TXUnsolicitedMsgSender*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXPhyConnection),G__get_linked_tagnum(&G__G__NetxLN_TXUnsolicitedMsgSender),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__NetxLN_TXLogConnection))) {
     TXLogConnection *G__Lderived;
     G__Lderived=(TXLogConnection*)0x1000;
     {
       TXAbsUnsolicitedMsgHandler *G__Lpbase=(TXAbsUnsolicitedMsgHandler*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXLogConnection),G__get_linked_tagnum(&G__G__NetxLN_TXAbsUnsolicitedMsgHandler),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TXUnsolicitedMsgSender *G__Lpbase=(TXUnsolicitedMsgSender*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXLogConnection),G__get_linked_tagnum(&G__G__NetxLN_TXUnsolicitedMsgSender),(long)G__Lpbase-(long)G__Lderived,4,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__NetxLN_TXConnectionMgr))) {
     TXConnectionMgr *G__Lderived;
     G__Lderived=(TXConnectionMgr*)0x1000;
     {
       TXAbsUnsolicitedMsgHandler *G__Lpbase=(TXAbsUnsolicitedMsgHandler*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXConnectionMgr),G__get_linked_tagnum(&G__G__NetxLN_TXAbsUnsolicitedMsgHandler),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TXUnsolicitedMsgSender *G__Lpbase=(TXUnsolicitedMsgSender*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__NetxLN_TXConnectionMgr),G__get_linked_tagnum(&G__G__NetxLN_TXUnsolicitedMsgSender),(long)G__Lpbase-(long)G__Lderived,4,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__Netx() {

   /* Setting up typedef entry */
   G__search_typename2("Short_t",115,-1,0,
-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,
-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,
-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Long_t",108,-1,0,
-1);
   G__setnewtype(-1,"Signed long integer 8 bytes (long)",0);
   G__search_typename2("Bool_t",103,-1,0,
-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,
-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,
-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("Long64_t",110,-1,0,
-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("vector<TStreamerInfo*>",117,G__get_linked_tagnum(&G__G__NetxLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__NetxLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__NetxLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__G__NetxLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__NetxLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__NetxLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("vector<unsigned int>",117,G__get_linked_tagnum(&G__G__NetxLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__G__NetxLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__NetxLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__NetxLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("kXR_char",98,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("kXR_int16",115,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("kXR_int32",105,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ClientRequest",117,G__get_linked_tagnum(&G__G__NetxLN_ClientRequest),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<TXMessage*>",117,G__get_linked_tagnum(&G__G__NetxLN_listlETXMessagemUcOallocatorlETXMessagemUgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("map<Short_t,TCondition*>",117,G__get_linked_tagnum(&G__G__NetxLN_maplEshortcOTConditionmUcOlesslEshortgRcOallocatorlEpairlEconstsPshortcOTConditionmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("map<short,TCondition*>",117,G__get_linked_tagnum(&G__G__NetxLN_maplEshortcOTConditionmUcOlesslEshortgRcOallocatorlEpairlEconstsPshortcOTConditionmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("map<short,TCondition*>less<short>>",117,G__get_linked_tagnum(&G__G__NetxLN_maplEshortcOTConditionmUcOlesslEshortgRcOallocatorlEpairlEconstsPshortcOTConditionmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("vector<TXLogConnection*>",117,G__get_linked_tagnum(&G__G__NetxLN_vectorlETXLogConnectionmUcOallocatorlETXLogConnectionmUgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlETXLogConnectionmUcOallocatorlETXLogConnectionmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__NetxLN_vectorlETXLogConnectionmUcOallocatorlETXLogConnectionmUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlETXLogConnectionmUcOallocatorlETXLogConnectionmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__NetxLN_vectorlETXLogConnectionmUcOallocatorlETXLogConnectionmUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("vector<TXPhyConnection*>",117,G__get_linked_tagnum(&G__G__NetxLN_vectorlETXPhyConnectionmUcOallocatorlETXPhyConnectionmUgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlETXPhyConnectionmUcOallocatorlETXPhyConnectionmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__NetxLN_vectorlETXPhyConnectionmUcOallocatorlETXPhyConnectionmUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlETXPhyConnectionmUcOallocatorlETXPhyConnectionmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__NetxLN_vectorlETXPhyConnectionmUcOallocatorlETXPhyConnectionmUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("vector<TUrl*>",117,G__get_linked_tagnum(&G__G__NetxLN_vectorlETUrlmUcOallocatorlETUrlmUgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlETUrlmUcOallocatorlETUrlmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__NetxLN_vectorlETUrlmUcOallocatorlETUrlmUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlETUrlmUcOallocatorlETUrlmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__NetxLN_vectorlETUrlmUcOallocatorlETUrlmUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TXSocket */
static void G__setup_memvarTXSocket(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__NetxLN_TXSocket));
   { TXSocket *p; p=(TXSocket*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fASYNC=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_TXSocketConnectParms),-1,-1,4,"fHost2contact=",0,"status connection thread");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRequestTimeout=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TXMessage */
static void G__setup_memvarTXMessage(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__NetxLN_TXMessage));
   { TXMessage *p; p=(TXMessage*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAllocated=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,89,0,0,-1,-1,-1,4,"fData=",0,"!");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fMarshalled=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,115,0,0,-1,G__defined_typename("kXR_int16"),-1,4,"fStatusCode=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__NetxLN_TXMessagecLcLEXMSCStatus),-1,-2,1,"kXMSC_ok=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__NetxLN_TXMessagecLcLEXMSCStatus),-1,-2,1,"kXMSC_readerr=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__NetxLN_TXMessagecLcLEXMSCStatus),-1,-2,1,"kXMSC_writeerr=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__NetxLN_TXMessagecLcLEXMSCStatus),-1,-2,1,"kXMSC_timeout=3",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fHdr)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__NetxLN_ServerResponseHeader),-1,-1,1,"fHdr=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TXAbsNetCommon */
static void G__setup_memvarTXAbsNetCommon(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__NetxLN_TXAbsNetCommon));
   { TXAbsNetCommon *p; p=(TXAbsNetCommon*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* TXNetConn */
static void G__setup_memvarTXNetConn(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetConn));
   { TXNetConn *p; p=(TXNetConn*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLServerType),-1,-2,1,"kSTError=-1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLServerType),-1,-2,1,"kSTNone=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLServerType),-1,-2,1,"kSTRootd=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLServerType),-1,-2,1,"kSTBaseXrootd=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLServerType),-1,-2,1,"kSTDataXrootd=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLESrvErrorHandlerRetval),-1,-2,1,"kSEHRReturnMsgToCaller=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLESrvErrorHandlerRetval),-1,-2,1,"kSEHRBreakLoop=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLESrvErrorHandlerRetval),-1,-2,1,"kSEHRContinue=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLESrvErrorHandlerRetval),-1,-2,1,"kSEHRReturnNoMsgToCaller=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLESrvErrorHandlerRetval),-1,-2,1,"kSEHRRedirLimitReached=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLEThreeStateReadHandler),-1,-2,1,"kTSRHReturnMex=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLEThreeStateReadHandler),-1,-2,1,"kTSRHReturnNullMex=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLEThreeStateReadHandler),-1,-2,1,"kTSRHContinue=2",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fLastDataBytesRecv)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fLastDataBytesRecv=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fLastDataBytesSent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fLastDataBytesSent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fOpenError)-(long)(p)),105,0,0,G__get_linked_tagnum(&G__G__NetxLN_XErrorCode),-1,-1,1,"fOpenError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fOpenErrorMsg)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__NetxLN_TString),-1,-1,1,"fOpenErrorMsg=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fLastServerResp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__NetxLN_ServerResponseHeader),-1,-1,1,"fLastServerResp=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_TString),-1,-1,4,"fClientHostDomain=",0,"Save the client's domain name");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fConnected=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fGlobalRedirCnt=",0,"Number of redirections");
   G__memvar_setup((void*)NULL,108,0,0,-1,G__defined_typename("time_t"),-1,4,"fGlobalRedirLastUpdateTimestamp=",0,"Timestamp of last redirection");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLastNetopt=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TUrl),-1,-1,4,"fLBSUrl=",0,"Needed to save the load balancer url");
   G__memvar_setup((void*)NULL,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fLogConnID=",0,"Logical connection ID of the current");
   G__memvar_setup((void*)NULL,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fMaxGlobalRedirCnt=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TXAbsNetCommon),-1,-1,4,"fRedirHandler=",0,"Pointer to a class inheriting from");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_TString),-1,-1,4,"fRedirInternalToken=",0,"Token returned by the server when");
   G__memvar_setup((void*)NULL,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"fServerProto=",0,"The server protocol");
   G__memvar_setup((void*)NULL,105,0,0,G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLServerType),-1,-1,4,"fServerType=",0,"Server type as returned by doHandShake()");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_TUrl),-1,-1,4,"fUrl=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TSocket),-1,-1,4,"fLastRootdSocket=",0,"rootd case: socket of the last open");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLastRootdProto=",0,"rootd case: remote server protocol");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TXConnectionMgr),-1,-2,4,"fgConnectionManager=",0,"Connection Manager");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TXNetFile */
static void G__setup_memvarTXNetFile(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile));
   { TXNetFile *p; p=(TXNetFile*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAlreadyStated=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAlreadyDetected=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TXNetConn),-1,-1,4,"fConnModule=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fCreateMode=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,99,0,0,-1,-1,-1,4,"fHandle[4]=",0,"The file handle returned by the server,");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsROOT=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_Params_Open),-1,-1,4,"fOpenPars=",0,"Just a container for the last parameters");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fOpenWithRefresh=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fSize=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"fgTagAlreadyPrinted=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TXPhyConnection */
static void G__setup_memvarTXPhyConnection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__NetxLN_TXPhyConnection));
   { TXPhyConnection *p; p=(TXPhyConnection*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,108,0,0,-1,G__defined_typename("time_t"),-1,4,"fLastUseTimestamp=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,G__get_linked_tagnum(&G__G__NetxLN_ELoginState),-1,-1,4,"fLogged=",0,"only 1 login/auth is needed for physical");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_TXInputBuffer),-1,-1,4,"fMsgQ=",0,"The queue used to hold incoming messages");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRequestTimeout=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TMutex),-1,-1,4,"fRwMutex=",0,"Lock before using the physical channel");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TMutex),-1,-1,4,"fMutex=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TThread),-1,-1,4,"fReaderthreadhandler=",0,"The thread which is going to pump");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fReaderthreadrunning=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fReaderthreadkilled=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_TString),-1,-1,4,"fRemoteAddress=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRemotePort=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TXSocket),-1,-1,4,"fSocket=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TCondition),-1,-1,4,"fReaderCV=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fServer)-(long)(p)),105,0,0,G__get_linked_tagnum(&G__G__NetxLN_ERemoteServer),-1,-1,1,"fServer=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fTTLsec)-(long)(p)),108,0,0,-1,G__defined_typename("Long_t"),-1,1,"fTTLsec=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TXInputBuffer */
static void G__setup_memvarTXInputBuffer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__NetxLN_TXInputBuffer));
   { TXInputBuffer *p; p=(TXInputBuffer*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_listlETXMessagemUcOallocatorlETXMessagemUgRsPgR),G__defined_typename("list<TXMessage*>"),-1,4,"fMsgQue=",0,"queue for incoming messages");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TMutex),-1,-1,4,"fMutex=",0,"mutex to protect data structures");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_maplEshortcOTConditionmUcOlesslEshortgRcOallocatorlEpairlEconstsPshortcOTConditionmUgRsPgRsPgR),G__defined_typename("map<Short_t,TCondition*>"),-1,4,"fSyncobjRepo=",0,"each streamid counts on a condition");
   }
   G__tag_memvar_reset();
}


   /* TXLogConnection */
static void G__setup_memvarTXLogConnection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__NetxLN_TXLogConnection));
   { TXLogConnection *p; p=(TXLogConnection*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TXPhyConnection),-1,-1,4,"fPhyConnection=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLogLastBytesSent=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLogBytesSent=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLogLastBytesRecv=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLogBytesRecv=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TXConnectionMgr */
static void G__setup_memvarTXConnectionMgr(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__NetxLN_TXConnectionMgr));
   { TXConnectionMgr *p; p=(TXConnectionMgr*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fInitialized=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_vectorlETXLogConnectionmUcOallocatorlETXLogConnectionmUgRsPgR),G__defined_typename("vector<TXLogConnection*>"),-1,4,"fLogVec=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_vectorlETXPhyConnectionmUcOallocatorlETXPhyConnectionmUgRsPgR),G__defined_typename("vector<TXPhyConnection*>"),-1,4,"fPhyVec=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TMutex),-1,-1,4,"fMutex=",0,"mutex used to protect local variables");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TThread),-1,-1,4,"fThreadHandler=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fThreadKilled=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TXUrl */
static void G__setup_memvarTXUrl(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__NetxLN_TXUrl));
   { TXUrl *p; p=(TXUrl*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_vectorlETUrlmUcOallocatorlETUrlmUgRsPgR),G__defined_typename("UrlArray"),-1,4,"fUrlArray=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_vectorlETUrlmUcOallocatorlETUrlmUgRsPgR),G__defined_typename("UrlArray"),-1,4,"fTmpUrlArray=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_TString),-1,-1,4,"fPathName=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsValid=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__NetxLN_TRandom),-1,-1,4,"fRndgen=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__Netx() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTXSocket(void) {
   /* TXSocket */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__NetxLN_TXSocket));
   G__memfunc_setup("ExtractSocket",1348,(G__InterfaceMethod)NULL,85,G__get_linked_tagnum(&G__G__NetxLN_TSocket),-1,0,0,1,2,0,"","Extract TSocket part",(void*)NULL,0);
   G__memfunc_setup("TXSocket",789,G__G__Netx_148_2_0,105,G__get_linked_tagnum(&G__G__NetxLN_TXSocket),-1,0,3,1,1,0,
"u 'TString' - 0 - host i - 'Int_t' 0 - port "
"i - 'Int_t' 0 -1 tcpwindowsize",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("CatchTimeOut",1194,G__G__Netx_148_3_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TXSocket::CatchTimeOut),0);
   G__memfunc_setup("Create",596,G__G__Netx_148_4_0,121,-1,-1,0,3,1,1,0,
"u 'TString' - 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("RecvRaw",698,G__G__Netx_148_5_0,105,-1,G__defined_typename("Int_t"),0,3,1,1,0,
"Y - - 0 - buffer i - 'Int_t' 0 - length "
"i 'ESendRecvOptions' - 0 kDefault opt",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SendRaw",692,G__G__Netx_148_6_0,105,-1,G__defined_typename("Int_t"),0,3,1,1,0,
"Y - - 10 - buffer i - 'Int_t' 0 - length "
"i 'ESendRecvOptions' - 0 kDefault opt",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("TryConnect",1033,G__G__Netx_148_7_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__Netx_148_8_0,85,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TXSocket::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Netx_148_9_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXSocket::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Netx_148_0_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TXSocket::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Netx_148_1_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TXSocket::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Netx_148_2_1,85,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Netx_148_3_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Netx_148_4_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Netx_148_5_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Netx_148_6_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXSocket::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Netx_148_7_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TXSocket::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Netx_148_8_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXSocket::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Netx_148_9_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TXSocket::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TXSocket",789,G__G__Netx_148_0_2,(int)('i'),G__get_linked_tagnum(&G__G__NetxLN_TXSocket),-1,0,1,1,1,0,"u 'TXSocket' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TXSocket",915,G__G__Netx_148_1_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTXMessage(void) {
   /* TXMessage */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__NetxLN_TXMessage));
   G__memfunc_setup("CharStreamid2Int",1556,(G__InterfaceMethod)NULL,115,-1,G__defined_typename("Short_t"),0,1,1,4,0,"B - 'kXR_char' 0 - charstreamid",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Int2CharStreamid",1556,(G__InterfaceMethod)NULL,121,-1,-1,0,2,1,4,0,
"B - 'kXR_char' 0 - charstreamid s - 'Short_t' 0 - intstreamid",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TXMessage",881,G__G__Netx_204_3_0,105,G__get_linked_tagnum(&G__G__NetxLN_TXMessage),-1,0,1,1,1,0,"u 'ServerResponseHeader' - 0 - header",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TXMessage",881,G__G__Netx_204_4_0,105,G__get_linked_tagnum(&G__G__NetxLN_TXMessage),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("CreateData",974,G__G__Netx_204_5_0,103,-1,G__defined_typename("Bool_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DataLen",665,G__G__Netx_204_6_0,105,-1,G__defined_typename("kXR_int32"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DonateData",981,G__G__Netx_204_7_0,89,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetData",666,G__G__Netx_204_8_0,89,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetStatusCode",1311,G__G__Netx_204_9_0,115,-1,G__defined_typename("kXR_int16"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("HeaderStatus",1229,G__G__Netx_204_0_1,115,-1,G__defined_typename("kXR_int16"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("HeaderSID",809,G__G__Netx_204_1_1,115,-1,G__defined_typename("Short_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsAttn",595,G__G__Netx_204_2_1,103,-1,G__defined_typename("Bool_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsError",710,G__G__Netx_204_3_1,103,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsMarshalled",1209,G__G__Netx_204_4_1,103,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Marshall",820,G__G__Netx_204_5_1,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("MatchStreamid",1318,G__G__Netx_204_6_1,103,-1,G__defined_typename("Bool_t"),0,1,1,1,0,"s - 'Short_t' 0 - sid",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ReadRaw",678,G__G__Netx_204_7_1,105,-1,G__defined_typename("Int_t"),0,2,1,1,0,
"U 'TXPhyConnection' - 0 - phy i 'ESendRecvOptions' - 0 - opt",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetHeaderStatus",1529,G__G__Netx_204_8_1,121,-1,-1,0,1,1,1,0,"s - 'kXR_int16' 0 - sts",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetMarshalled",1321,G__G__Netx_204_9_1,121,-1,-1,0,1,1,1,0,"g - 'Bool_t' 0 - m",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetStatusCode",1323,G__G__Netx_204_0_2,121,-1,-1,0,1,1,1,0,"s - 'kXR_int16' 0 - status",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Unmarshall",1047,G__G__Netx_204_1_2,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__Netx_204_2_2,85,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TXMessage::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Netx_204_3_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXMessage::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Netx_204_4_2,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TXMessage::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Netx_204_5_2,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TXMessage::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Netx_204_6_2,85,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Netx_204_7_2,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Netx_204_8_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Netx_204_9_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Netx_204_0_3,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXMessage::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Netx_204_1_3,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TXMessage::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Netx_204_2_3,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXMessage::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Netx_204_3_3,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TXMessage::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TXMessage",881,G__G__Netx_204_4_3,(int)('i'),G__get_linked_tagnum(&G__G__NetxLN_TXMessage),-1,0,1,1,1,0,"u 'TXMessage' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TXMessage",1007,G__G__Netx_204_5_3,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Netx_204_6_3,(int)('u'),G__get_linked_tagnum(&G__G__NetxLN_TXMessage),-1,1,1,1,1,0,"u 'TXMessage' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTXAbsNetCommon(void) {
   /* TXAbsNetCommon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__NetxLN_TXAbsNetCommon));
   G__memfunc_setup("OpenFileWhenRedirected",2207,G__G__Netx_206_1_0,103,-1,G__defined_typename("Bool_t"),0,2,1,1,0,
"C - - 0 - newfhandle g - 'Bool_t' 1 - wasopen",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("SetParm",700,G__G__Netx_206_2_0,121,-1,-1,0,2,1,1,0,
"C - - 10 - parm i - - 0 - val",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetParm",700,G__G__Netx_206_3_0,121,-1,-1,0,2,1,1,0,
"C - - 10 - parm d - - 0 - val",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TXAbsNetCommon",1488,G__G__Netx_206_4_0,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Netx_206_5_0,(int)('u'),G__get_linked_tagnum(&G__G__NetxLN_TXAbsNetCommon),-1,1,1,1,1,0,"u 'TXAbsNetCommon' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTXNetConn(void) {
   /* TXNetConn */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetConn));
   G__memfunc_setup("TXNetConn",865,G__G__Netx_207_1_0,105,G__get_linked_tagnum(&G__G__NetxLN_TXNetConn),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("CheckHostDomain",1492,G__G__Netx_207_2_0,103,-1,G__defined_typename("Bool_t"),0,3,1,1,0,
"u 'TString' - 0 - hostToCheck u 'TString' - 0 - allow "
"u 'TString' - 0 - deny",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Connect",714,G__G__Netx_207_3_0,115,-1,G__defined_typename("Short_t"),0,3,1,1,0,
"u 'TString' - 0 - newHost i - 'Int_t' 0 - newPort "
"i - 'Int_t' 0 - netopt",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Disconnect",1034,G__G__Netx_207_4_0,121,-1,-1,0,1,1,1,0,"g - 'Bool_t' 0 - ForcePhysicalDisc",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetAccessToSrv",1392,G__G__Netx_207_5_0,103,-1,G__defined_typename("Bool_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetClientHostDomain",1909,G__G__Netx_207_6_0,117,G__get_linked_tagnum(&G__G__NetxLN_TString),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetLogConnID",1117,G__G__Netx_207_7_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetLBSUrl",820,G__G__Netx_207_8_0,85,G__get_linked_tagnum(&G__G__NetxLN_TUrl),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetOpenError",1212,G__G__Netx_207_9_0,105,G__get_linked_tagnum(&G__G__NetxLN_XErrorCode),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetRootdSocket",1425,G__G__Netx_207_0_1,85,G__get_linked_tagnum(&G__G__NetxLN_TSocket),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GoToAnotherServer",1729,G__G__Netx_207_1_1,105,G__get_linked_tagnum(&G__G__NetxLN_XReqErrorType),-1,0,3,1,1,0,
"u 'TString' - 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsConnected",1103,G__G__Netx_207_2_1,103,-1,G__defined_typename("Bool_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("LastBytesRecv",1323,G__G__Netx_207_3_1,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("LastBytesSent",1333,G__G__Netx_207_4_1,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("LastDataBytesRecv",1701,G__G__Netx_207_5_1,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("LastDataBytesSent",1711,G__G__Netx_207_6_1,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SendGenCommand",1379,G__G__Netx_207_7_1,103,-1,G__defined_typename("Bool_t"),0,7,1,1,0,
"U 'ClientRequest' 'ClientRequest' 0 - req Y - - 10 - reqMoreData "
"Y - - 2 - answMoreDataAllocated Y - - 0 - answMoreData "
"g - 'Bool_t' 0 - HasToAlloc C - - 0 - CmdName "
"U 'ServerResponseHeader' - 0 0 srh",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetServerType",1337,G__G__Netx_207_8_1,105,G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLServerType),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetClientHostDomain",1921,G__G__Netx_207_9_1,121,-1,-1,0,1,1,1,0,"C - - 10 - src",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetConnected",1215,G__G__Netx_207_0_2,121,-1,-1,0,1,1,1,0,"g - 'Bool_t' 0 - conn",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetLogConnID",1129,G__G__Netx_207_1_2,121,-1,-1,0,1,1,1,0,"s - 'Short_t' 0 - logconnid",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetOpenError",1224,G__G__Netx_207_2_2,121,-1,-1,0,1,1,1,0,"i 'XErrorCode' - 0 - err",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetRedirHandler",1504,G__G__Netx_207_3_2,121,-1,-1,0,1,1,1,0,"U 'TXAbsNetCommon' - 0 - rh",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetServerType",1349,G__G__Netx_207_4_2,121,-1,-1,0,1,1,1,0,"i 'TXNetConn::ServerType' - 0 - type",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetSID",524,G__G__Netx_207_5_2,121,-1,-1,0,1,1,1,0,"B - 'kXR_char' 0 - sid",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetUrl",607,G__G__Netx_207_6_2,121,-1,-1,0,1,1,1,0,"u 'TUrl' - 0 - thisUrl",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetTXConnectionMgr",1806,G__G__Netx_207_7_2,121,-1,-1,0,1,3,1,0,"U 'TXConnectionMgr' - 0 - connmgr",(char*)NULL,(void*)(void (*)(TXConnectionMgr*))(&TXNetConn::SetTXConnectionMgr),0);
   G__memfunc_setup("CheckErrorStatus",1644,(G__InterfaceMethod)NULL,103,-1,G__defined_typename("Bool_t"),0,3,1,4,0,
"U 'TXMessage' - 0 - - s - 'Short_t' 1 - - "
"C - - 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("CheckPort",899,(G__InterfaceMethod)NULL,121,-1,-1,0,1,1,4,0,"i - 'Int_t' 1 - port",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("CheckResp",888,(G__InterfaceMethod)NULL,103,-1,G__defined_typename("Bool_t"),0,2,1,4,0,
"U 'ServerResponseHeader' - 0 - resp C - - 10 - method",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ClientServerCmd",1514,(G__InterfaceMethod)NULL,85,G__get_linked_tagnum(&G__G__NetxLN_TXMessage),-1,0,5,1,4,0,
"U 'ClientRequest' 'ClientRequest' 0 - req Y - - 10 - reqMoreData "
"Y - - 2 - answMoreDataAllocated Y - - 0 - answMoreData "
"g - 'Bool_t' 0 - HasToAlloc",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DoAuthentication",1651,(G__InterfaceMethod)NULL,103,-1,G__defined_typename("Bool_t"),0,2,1,4,0,
"C - - 0 - list i - - 0 - lsiz",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DoHandShake",1050,(G__InterfaceMethod)NULL,105,G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLServerType),-1,0,1,1,4,0,"s - 'Short_t' 0 - log",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DoLogin",684,(G__InterfaceMethod)NULL,103,-1,G__defined_typename("Bool_t"),0,0,1,4,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetDomainToMatch",1576,(G__InterfaceMethod)NULL,117,G__get_linked_tagnum(&G__G__NetxLN_TString),-1,0,1,1,4,0,"u 'TString' - 0 - hostname",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("HandleServerError",1741,(G__InterfaceMethod)NULL,105,G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLESrvErrorHandlerRetval),-1,0,3,1,4,0,
"i 'XReqErrorType' - 1 - - U 'TXMessage' - 0 - - "
"U 'ClientRequest' 'ClientRequest' 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("MatchStreamid",1318,(G__InterfaceMethod)NULL,103,-1,G__defined_typename("Bool_t"),0,1,1,4,0,"U 'ServerResponseHeader' - 0 - ServerResponse",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ParseDomainFromHostname",2342,(G__InterfaceMethod)NULL,117,G__get_linked_tagnum(&G__G__NetxLN_TString),-1,0,1,1,4,0,"u 'TString' - 0 - hostname",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ReadPartialAnswer",1721,(G__InterfaceMethod)NULL,85,G__get_linked_tagnum(&G__G__NetxLN_TXMessage),-1,0,6,1,4,0,
"i 'XReqErrorType' - 1 - - h - 'size_t' 1 - - "
"U 'ClientRequest' 'ClientRequest' 0 - - g - 'Bool_t' 0 - - "
"Y - - 2 - - i 'TXNetConn::EThreeStateReadHandler' - 1 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("WriteToServer",1349,(G__InterfaceMethod)NULL,105,G__get_linked_tagnum(&G__G__NetxLN_XReqErrorType),-1,0,4,1,4,0,
"U 'ClientRequest' 'ClientRequest' 0 - - U 'ClientRequest' 'ClientRequest' 0 - - "
"Y - - 10 - - s - 'Short_t' 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__Netx_207_1_4,85,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TXNetConn::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Netx_207_2_4,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXNetConn::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Netx_207_3_4,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TXNetConn::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Netx_207_4_4,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TXNetConn::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Netx_207_5_4,85,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Netx_207_6_4,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Netx_207_7_4,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Netx_207_8_4,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Netx_207_9_4,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXNetConn::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Netx_207_0_5,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TXNetConn::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Netx_207_1_5,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXNetConn::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Netx_207_2_5,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TXNetConn::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TXNetConn",865,G__G__Netx_207_3_5,(int)('i'),G__get_linked_tagnum(&G__G__NetxLN_TXNetConn),-1,0,1,1,1,0,"u 'TXNetConn' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TXNetConn",991,G__G__Netx_207_4_5,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Netx_207_5_5,(int)('u'),G__get_linked_tagnum(&G__G__NetxLN_TXNetConn),-1,1,1,1,1,0,"u 'TXNetConn' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTXNetFile(void) {
   /* TXNetFile */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile));
   G__memfunc_setup("CreateTXNf",948,(G__InterfaceMethod)NULL,121,-1,-1,0,5,1,4,0,
"C - - 10 - url C - 'Option_t' 10 - option "
"C - - 10 - ftitle i - 'Int_t' 0 - compress "
"i - 'Int_t' 0 - netopt",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("LowOpen",708,(G__InterfaceMethod)NULL,103,-1,G__defined_typename("Bool_t"),0,7,1,4,0,
"C - - 10 - file C - 'Option_t' 10 - option "
"C - - 10 - ftitle i - 'Int_t' 0 - compress "
"i - 'Int_t' 0 - netopt g - 'Bool_t' 0 - DoInit "
"g - 'Bool_t' 0 kFALSE refresh_open",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SysStat",731,(G__InterfaceMethod)NULL,105,-1,G__defined_typename("Int_t"),0,5,1,4,0,
"i - 'Int_t' 0 - fd L - 'Long_t' 0 - id "
"N - 'Long64_t' 0 - size L - 'Long_t' 0 - flags "
"L - 'Long_t' 0 - modtime",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SysOpen",721,(G__InterfaceMethod)NULL,105,-1,G__defined_typename("Int_t"),0,3,1,4,0,
"C - - 10 - pathname i - 'Int_t' 0 - flags "
"h - 'UInt_t' 0 - mode",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SysClose",821,(G__InterfaceMethod)NULL,105,-1,G__defined_typename("Int_t"),0,1,1,4,0,"i - 'Int_t' 0 - fd",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("TXNetFile",851,G__G__Netx_209_6_0,105,G__get_linked_tagnum(&G__G__NetxLN_TXNetFile),-1,0,5,1,1,0,
"C - - 10 - url C - 'Option_t' 10 \"\" option "
"C - - 10 \"\" fTitle i - 'Int_t' 0 1 compress "
"i - 'Int_t' 0 -1 netopt",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("OpenFileWhenRedirected",2207,G__G__Netx_209_7_0,103,-1,G__defined_typename("Bool_t"),0,2,1,1,0,
"C - - 0 - newfhandle g - 'Bool_t' 1 - wasopen",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ProcessUnsolicitedMsg",2185,G__G__Netx_209_8_0,103,-1,G__defined_typename("Bool_t"),0,2,1,1,0,
"U 'TXUnsolicitedMsgSender' - 0 - sender U 'TXMessage' - 0 - unsolmsg",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Close",502,G__G__Netx_209_9_0,121,-1,-1,0,1,1,1,0,"C - 'Option_t' 10 \"\" opt",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Flush",514,G__G__Netx_209_0_1,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetRemoteFile",1292,G__G__Netx_209_1_1,108,-1,G__defined_typename("Long_t"),0,1,1,1,0,"Y - - 2 - -",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("IsOpen",590,G__G__Netx_209_2_1,103,-1,G__defined_typename("Bool_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("LastBytesRecv",1323,G__G__Netx_209_3_1,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("LastBytesSent",1333,G__G__Netx_209_4_1,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("LastDataBytesRecv",1701,G__G__Netx_209_5_1,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("LastDataBytesSent",1711,G__G__Netx_209_6_1,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Open",402,G__G__Netx_209_7_1,103,-1,G__defined_typename("Bool_t"),0,5,1,1,0,
"C - 'Option_t' 10 - option C - - 10 - fTitle "
"i - 'Int_t' 0 - compress i - 'Int_t' 0 - netopt "
"g - 'Bool_t' 0 - DoInit",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ReadBuffer",982,G__G__Netx_209_8_1,103,-1,G__defined_typename("Bool_t"),0,2,1,1,0,
"C - - 0 - buf i - 'Int_t' 0 - len",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ReOpen",585,G__G__Netx_209_9_1,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"C - 'Option_t' 10 - mode",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Size",411,G__G__Netx_209_0_2,110,-1,G__defined_typename("Long64_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("WriteBuffer",1125,G__G__Netx_209_1_2,103,-1,G__defined_typename("Bool_t"),0,2,1,1,0,
"C - - 10 - buffer i - 'Int_t' 0 - BufferLength",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Class",502,G__G__Netx_209_2_2,85,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TXNetFile::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Netx_209_3_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXNetFile::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Netx_209_4_2,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TXNetFile::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Netx_209_5_2,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TXNetFile::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Netx_209_6_2,85,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Netx_209_7_2,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Netx_209_8_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Netx_209_9_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Netx_209_0_3,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXNetFile::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Netx_209_1_3,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TXNetFile::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Netx_209_2_3,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXNetFile::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Netx_209_3_3,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TXNetFile::DeclFileLine),0);
   // automatic destructor
   G__memfunc_setup("~TXNetFile",977,G__G__Netx_209_4_3,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTXPhyConnection(void) {
   /* TXPhyConnection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__NetxLN_TXPhyConnection));
   G__memfunc_setup("HandleUnsolicited",1743,(G__InterfaceMethod)NULL,121,-1,-1,0,1,1,4,0,"U 'TXMessage' - 0 - m",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TXPhyConnection",1517,G__G__Netx_228_2_0,105,G__get_linked_tagnum(&G__G__NetxLN_TXPhyConnection),-1,0,1,1,1,0,"U 'TXAbsUnsolicitedMsgHandler' - 0 - h",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("BuildXMessage",1293,G__G__Netx_228_3_0,85,G__get_linked_tagnum(&G__G__NetxLN_TXMessage),-1,0,3,1,1,0,
"i 'ESendRecvOptions' - 0 - opt g - 'Bool_t' 0 - IgnoreTimeouts "
"g - 'Bool_t' 0 - Enqueue",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("CheckAutoTerm",1295,G__G__Netx_228_4_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Connect",714,G__G__Netx_228_5_0,103,-1,G__defined_typename("Bool_t"),0,3,1,1,0,
"u 'TString' - 0 - TcpAddress i - 'Int_t' 0 - TcpPort "
"i - 'Int_t' 0 - TcpWindowSize",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Disconnect",1034,G__G__Netx_228_6_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ExpiredTTL",965,G__G__Netx_228_7_0,103,-1,G__defined_typename("Bool_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetBytesRecv",1207,G__G__Netx_228_8_0,104,-1,G__defined_typename("UInt_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetBytesSent",1217,G__G__Netx_228_9_0,104,-1,G__defined_typename("UInt_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetSocketBytesRecv",1824,G__G__Netx_228_0_1,104,-1,G__defined_typename("UInt_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetSocketBytesSent",1834,G__G__Netx_228_1_1,104,-1,G__defined_typename("UInt_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetTTL",532,G__G__Netx_228_2_1,108,-1,G__defined_typename("Long_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsAddress",898,G__G__Netx_228_3_1,103,-1,G__defined_typename("Bool_t"),0,1,1,1,0,"u 'TString' - 1 - addr",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ReaderThreadKilled",1792,G__G__Netx_228_4_1,103,-1,G__defined_typename("Bool_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsLogged",782,G__G__Netx_228_5_1,105,G__get_linked_tagnum(&G__G__NetxLN_ELoginState),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsPort",609,G__G__Netx_228_6_1,103,-1,G__defined_typename("Bool_t"),0,1,1,1,8,"i - 'Int_t' 0 - port",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsValid",684,G__G__Netx_228_7_1,103,-1,G__defined_typename("Bool_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("LockChannel",1090,G__G__Netx_228_8_1,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ReaderStarted",1322,G__G__Netx_228_9_1,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ReadRaw",678,G__G__Netx_228_0_2,105,-1,G__defined_typename("Int_t"),0,3,1,1,0,
"Y - - 0 - buffer i - 'Int_t' 0 - BufferLength "
"i 'ESendRecvOptions' - 0 kDefault opt",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ReadXMessage",1177,G__G__Netx_228_1_2,85,G__get_linked_tagnum(&G__G__NetxLN_TXMessage),-1,0,1,1,1,0,"i - 'Int_t' 0 - streamid",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ReConnect",897,G__G__Netx_228_2_2,103,-1,G__defined_typename("Bool_t"),0,3,1,1,0,
"u 'TString' - 0 - TcpAddress i - 'Int_t' 0 - TcpPort "
"i - 'Int_t' 0 - TcpWindowSize",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SaveSocket",1016,G__G__Netx_228_3_2,85,G__get_linked_tagnum(&G__G__NetxLN_TSocket),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetLogged",894,G__G__Netx_228_4_2,121,-1,-1,0,1,1,1,0,"i 'ELoginState' - 0 - status",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetTTL",544,G__G__Netx_228_5_2,121,-1,-1,0,1,1,1,0,"l - 'Long_t' 0 - ttl",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("StartReader",1121,G__G__Netx_228_6_2,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Touch",515,G__G__Netx_228_7_2,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("UnlockChannel",1317,G__G__Netx_228_8_2,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("WriteRaw",821,G__G__Netx_228_9_2,105,-1,G__defined_typename("Int_t"),0,3,1,1,0,
"Y - - 10 - buffer i - 'Int_t' 0 - BufferLength "
"i 'ESendRecvOptions' - 0 kDefault opt",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__Netx_228_0_3,85,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TXPhyConnection::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Netx_228_1_3,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXPhyConnection::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Netx_228_2_3,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TXPhyConnection::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Netx_228_3_3,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TXPhyConnection::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Netx_228_4_3,85,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Netx_228_5_3,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Netx_228_6_3,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Netx_228_7_3,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Netx_228_8_3,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXPhyConnection::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Netx_228_9_3,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TXPhyConnection::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Netx_228_0_4,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXPhyConnection::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Netx_228_1_4,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TXPhyConnection::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TXPhyConnection",1517,G__G__Netx_228_2_4,(int)('i'),G__get_linked_tagnum(&G__G__NetxLN_TXPhyConnection),-1,0,1,1,1,0,"u 'TXPhyConnection' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TXPhyConnection",1643,G__G__Netx_228_3_4,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Netx_228_4_4,(int)('u'),G__get_linked_tagnum(&G__G__NetxLN_TXPhyConnection),-1,1,1,1,1,0,"u 'TXPhyConnection' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTXInputBuffer(void) {
   /* TXInputBuffer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__NetxLN_TXInputBuffer));
   G__memfunc_setup("GetSyncObjOrMakeOne",1849,(G__InterfaceMethod)NULL,85,G__get_linked_tagnum(&G__G__NetxLN_TCondition),-1,0,1,1,4,0,"s - 'Short_t' 0 - streamid",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("MsgForStreamidCnt",1708,(G__InterfaceMethod)NULL,105,-1,G__defined_typename("Int_t"),0,1,1,4,0,"s - 'Short_t' 0 - streamid",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TXInputBuffer",1302,G__G__Netx_293_3_0,105,G__get_linked_tagnum(&G__G__NetxLN_TXInputBuffer),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsMexEmpty",1013,G__G__Netx_293_4_0,103,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsSemEmpty",1008,G__G__Netx_293_5_0,103,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("MexSize",709,G__G__Netx_293_6_0,108,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("PutMsg",608,G__G__Netx_293_7_0,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"U 'TXMessage' - 0 - msg",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SemSize",704,G__G__Netx_293_8_0,108,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetMsg",583,G__G__Netx_293_9_0,85,G__get_linked_tagnum(&G__G__NetxLN_TXMessage),-1,0,2,1,1,0,
"s - 'Short_t' 0 - streamid i - 'Int_t' 0 - secstimeout",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("RetrieveMsg",1133,G__G__Netx_293_0_1,85,G__get_linked_tagnum(&G__G__NetxLN_TXMessage),-1,0,1,1,1,0,"s - 'Short_t' 0 - streamid",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("TXInputBuffer",1302,G__G__Netx_293_1_1,(int)('i'),G__get_linked_tagnum(&G__G__NetxLN_TXInputBuffer),-1,0,1,1,1,0,"u 'TXInputBuffer' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TXInputBuffer",1428,G__G__Netx_293_2_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Netx_293_3_1,(int)('u'),G__get_linked_tagnum(&G__G__NetxLN_TXInputBuffer),-1,1,1,1,1,0,"u 'TXInputBuffer' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTXLogConnection(void) {
   /* TXLogConnection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__NetxLN_TXLogConnection));
   G__memfunc_setup("TXLogConnection",1502,G__G__Netx_313_1_0,105,G__get_linked_tagnum(&G__G__NetxLN_TXLogConnection),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetBytesSent",1217,G__G__Netx_313_2_0,104,-1,G__defined_typename("UInt_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetBytesRecv",1207,G__G__Netx_313_3_0,104,-1,G__defined_typename("UInt_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetPhyBytesSent",1522,G__G__Netx_313_4_0,104,-1,G__defined_typename("UInt_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetPhyBytesRecv",1512,G__G__Netx_313_5_0,104,-1,G__defined_typename("UInt_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetPhyConnection",1633,G__G__Netx_313_6_0,85,G__get_linked_tagnum(&G__G__NetxLN_TXPhyConnection),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("LastBytesRecv",1323,G__G__Netx_313_7_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("LastBytesSent",1333,G__G__Netx_313_8_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ProcessUnsolicitedMsg",2185,G__G__Netx_313_9_0,103,-1,G__defined_typename("Bool_t"),0,2,1,1,0,
"U 'TXUnsolicitedMsgSender' - 0 - sender U 'TXMessage' - 0 - unsolmsg",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ReadRaw",678,G__G__Netx_313_0_1,105,-1,G__defined_typename("Int_t"),0,3,1,1,0,
"Y - - 0 - buffer i - 'Int_t' 0 - BufferLength "
"i 'ESendRecvOptions' - 0 kDefault opt",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetPhyConnection",1645,G__G__Netx_313_1_1,121,-1,-1,0,1,1,1,0,"U 'TXPhyConnection' - 0 - PhyConn",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("WriteRaw",821,G__G__Netx_313_2_1,105,-1,G__defined_typename("Int_t"),0,3,1,1,0,
"Y - - 10 - buffer i - 'Int_t' 0 - BufferLength "
"i 'ESendRecvOptions' - 0 kDefault opt",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__Netx_313_3_1,85,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TXLogConnection::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Netx_313_4_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXLogConnection::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Netx_313_5_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TXLogConnection::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Netx_313_6_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TXLogConnection::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Netx_313_7_1,85,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Netx_313_8_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Netx_313_9_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Netx_313_0_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Netx_313_1_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXLogConnection::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Netx_313_2_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TXLogConnection::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Netx_313_3_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXLogConnection::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Netx_313_4_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TXLogConnection::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TXLogConnection",1502,G__G__Netx_313_5_2,(int)('i'),G__get_linked_tagnum(&G__G__NetxLN_TXLogConnection),-1,0,1,1,1,0,"u 'TXLogConnection' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TXLogConnection",1628,G__G__Netx_313_6_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Netx_313_7_2,(int)('u'),G__get_linked_tagnum(&G__G__NetxLN_TXLogConnection),-1,1,1,1,1,0,"u 'TXLogConnection' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTXConnectionMgr(void) {
   /* TXConnectionMgr */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__NetxLN_TXConnectionMgr));
   G__memfunc_setup("ProcessUnsolicitedMsg",2185,(G__InterfaceMethod)NULL,103,-1,G__defined_typename("Bool_t"),0,2,1,4,0,
"U 'TXUnsolicitedMsgSender' - 0 - sender U 'TXMessage' - 0 - unsolmsg",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("RemoveLogConn",1310,(G__InterfaceMethod)NULL,121,-1,-1,0,1,1,4,0,"U 'TXLogConnection' - 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("RemovePhyConn",1325,(G__InterfaceMethod)NULL,121,-1,-1,0,1,1,4,0,"U 'TXPhyConnection' - 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GarbageCollect",1391,(G__InterfaceMethod)NULL,121,-1,-1,0,0,1,2,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TXConnectionMgr",1506,G__G__Netx_314_5_0,105,G__get_linked_tagnum(&G__G__NetxLN_TXConnectionMgr),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Connect",714,G__G__Netx_314_6_0,115,-1,G__defined_typename("Short_t"),0,3,1,1,0,
"u 'TString' - 0 - RemoteAddress i - 'Int_t' 0 - TcpPort "
"i - 'Int_t' 0 - TcpWindowSize",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Disconnect",1034,G__G__Netx_314_7_0,121,-1,-1,0,2,1,1,0,
"s - 'Short_t' 0 - LogConnectionID g - 'Bool_t' 0 - ForcePhysicalDisc",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetConnection",1328,G__G__Netx_314_8_0,85,G__get_linked_tagnum(&G__G__NetxLN_TXLogConnection),-1,0,1,1,1,0,"s - 'Short_t' 0 - LogConnectionID",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetPhyConnectionRefCount",2439,G__G__Netx_314_9_0,115,-1,-1,0,1,1,1,0,"U 'TXPhyConnection' - 0 - PhyConn",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Init",404,G__G__Netx_314_0_1,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ReadMsg",675,G__G__Netx_314_1_1,85,G__get_linked_tagnum(&G__G__NetxLN_TXMessage),-1,0,2,1,1,0,
"s - 'Short_t' 0 - LogConnectionID i 'ESendRecvOptions' - 0 kDefault opt",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ReadRaw",678,G__G__Netx_314_2_1,105,-1,G__defined_typename("Int_t"),0,4,1,1,0,
"s - 'Short_t' 0 - LogConnectionID Y - - 0 - buffer "
"i - 'Int_t' 0 - BufferLength i 'ESendRecvOptions' - 0 kDefault opt",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ThreadKilled",1197,G__G__Netx_314_3_1,103,-1,G__defined_typename("Bool_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("WriteRaw",821,G__G__Netx_314_4_1,105,-1,G__defined_typename("Int_t"),0,4,1,1,0,
"s - 'Short_t' 0 - LogConnectionID Y - - 10 - buffer "
"i - 'Int_t' 0 - BufferLength i 'ESendRecvOptions' - 0 kDefault opt",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__Netx_314_5_1,85,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TXConnectionMgr::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Netx_314_6_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXConnectionMgr::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Netx_314_7_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TXConnectionMgr::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Netx_314_8_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TXConnectionMgr::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Netx_314_9_1,85,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Netx_314_0_2,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Netx_314_1_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Netx_314_2_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Netx_314_3_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXConnectionMgr::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Netx_314_4_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TXConnectionMgr::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Netx_314_5_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXConnectionMgr::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Netx_314_6_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TXConnectionMgr::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TXConnectionMgr",1506,G__G__Netx_314_7_2,(int)('i'),G__get_linked_tagnum(&G__G__NetxLN_TXConnectionMgr),-1,0,1,1,1,0,"u 'TXConnectionMgr' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TXConnectionMgr",1632,G__G__Netx_314_8_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Netx_314_9_2,(int)('u'),G__get_linked_tagnum(&G__G__NetxLN_TXConnectionMgr),-1,1,1,1,1,0,"u 'TXConnectionMgr' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTXUrl(void) {
   /* TXUrl */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__NetxLN_TXUrl));
   G__memfunc_setup("CheckPort",899,(G__InterfaceMethod)NULL,121,-1,-1,0,1,1,4,0,"u 'TString' - 1 - list",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ConvertDNSAliases",1672,(G__InterfaceMethod)NULL,121,-1,-1,0,3,1,4,0,
"u 'vector<TUrl*,allocator<TUrl*> >' 'UrlArray' 1 - - u 'TString' - 0 - - "
"u 'TString' - 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ConvertSingleDNSAlias",2066,(G__InterfaceMethod)NULL,103,-1,G__defined_typename("Bool_t"),0,3,1,4,0,
"u 'vector<TUrl*,allocator<TUrl*> >' 'UrlArray' 1 - - u 'TString' - 0 - - "
"u 'TString' - 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TXUrl",479,G__G__Netx_336_4_0,105,G__get_linked_tagnum(&G__G__NetxLN_TXUrl),-1,0,1,1,1,0,"u 'TString' - 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetServers",1034,G__G__Netx_336_5_0,117,G__get_linked_tagnum(&G__G__NetxLN_TString),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetNextUrl",1010,G__G__Netx_336_6_0,85,G__get_linked_tagnum(&G__G__NetxLN_TUrl),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetARandomUrl",1269,G__G__Netx_336_7_0,85,G__get_linked_tagnum(&G__G__NetxLN_TUrl),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Rewind",617,G__G__Netx_336_8_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ShowUrls",839,G__G__Netx_336_9_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Size",411,G__G__Netx_336_0_1,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetFile",672,G__G__Netx_336_1_1,67,-1,-1,0,0,1,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsValid",684,G__G__Netx_336_2_1,103,-1,G__defined_typename("Bool_t"),0,0,1,1,0,"","Return kFALSE if the CTOR's argument is malformed",(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__Netx_336_3_1,85,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TXUrl::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Netx_336_4_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXUrl::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Netx_336_5_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TXUrl::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Netx_336_6_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TXUrl::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Netx_336_7_1,85,G__get_linked_tagnum(&G__G__NetxLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Netx_336_8_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Netx_336_9_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Netx_336_0_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Netx_336_1_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXUrl::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Netx_336_2_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TXUrl::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Netx_336_3_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TXUrl::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Netx_336_4_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TXUrl::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TXUrl",479,G__G__Netx_336_5_2,(int)('i'),G__get_linked_tagnum(&G__G__NetxLN_TXUrl),-1,0,1,1,1,0,"u 'TXUrl' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TXUrl",605,G__G__Netx_336_6_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Netx_336_7_2,(int)('u'),G__get_linked_tagnum(&G__G__NetxLN_TXUrl),-1,1,1,1,1,0,"u 'TXUrl' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__Netx() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__Netx() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__Netx() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__NetxLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR = { "vector<TStreamerInfo*,allocator<TStreamerInfo*> >" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TStreamerInfo*,allocator<TStreamerInfo*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TDirectory = { "TDirectory" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TUrl = { "TUrl" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TSocket = { "TSocket" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TXSocket = { "TXSocket" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<unsigned int,allocator<unsigned int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TNetFile = { "TNetFile" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TXUnsolicitedMsgSender = { "TXUnsolicitedMsgSender" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TXMessage = { "TXMessage" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TXAbsUnsolicitedMsgHandler = { "TXAbsUnsolicitedMsgHandler" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TXAbsNetCommon = { "TXAbsNetCommon" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TXNetConn = { "TXNetConn" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_Params_Open = { "Params_Open" , 115 , -1 };
G__linked_taginfo G__G__NetxLN_TXNetFile = { "TXNetFile" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_ESendRecvOptions = { "ESendRecvOptions" , 101 , -1 };
G__linked_taginfo G__G__NetxLN_TXSocketConnectParms = { "TXSocketConnectParms" , 115 , -1 };
G__linked_taginfo G__G__NetxLN_TXPhyConnection = { "TXPhyConnection" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_XReqErrorType = { "XReqErrorType" , 101 , -1 };
G__linked_taginfo G__G__NetxLN_XErrorCode = { "XErrorCode" , 101 , -1 };
G__linked_taginfo G__G__NetxLN_ClientRequest = { "ClientRequest" , 117 , -1 };
G__linked_taginfo G__G__NetxLN_ServerResponseHeader = { "ServerResponseHeader" , 115 , -1 };
G__linked_taginfo G__G__NetxLN_TXMessagecLcLEXMSCStatus = { "TXMessage::EXMSCStatus" , 101 , -1 };
G__linked_taginfo G__G__NetxLN_TMutex = { "TMutex" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TCondition = { "TCondition" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TThread = { "TThread" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TXInputBuffer = { "TXInputBuffer" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_listlETXMessagemUcOallocatorlETXMessagemUgRsPgR = { "list<TXMessage*,allocator<TXMessage*> >" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_maplEshortcOTConditionmUcOlesslEshortgRcOallocatorlEpairlEconstsPshortcOTConditionmUgRsPgRsPgR = { "map<short,TCondition*,less<short>,allocator<pair<const short,TCondition*> > >" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_ELoginState = { "ELoginState" , 101 , -1 };
G__linked_taginfo G__G__NetxLN_ERemoteServer = { "ERemoteServer" , 101 , -1 };
G__linked_taginfo G__G__NetxLN_TXLogConnection = { "TXLogConnection" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TXConnectionMgr = { "TXConnectionMgr" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_vectorlETXLogConnectionmUcOallocatorlETXLogConnectionmUgRsPgR = { "vector<TXLogConnection*,allocator<TXLogConnection*> >" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_reverse_iteratorlEvectorlETXLogConnectionmUcOallocatorlETXLogConnectionmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TXLogConnection*,allocator<TXLogConnection*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_vectorlETXPhyConnectionmUcOallocatorlETXPhyConnectionmUgRsPgR = { "vector<TXPhyConnection*,allocator<TXPhyConnection*> >" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_reverse_iteratorlEvectorlETXPhyConnectionmUcOallocatorlETXPhyConnectionmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TXPhyConnection*,allocator<TXPhyConnection*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TRandom = { "TRandom" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_vectorlETUrlmUcOallocatorlETUrlmUgRsPgR = { "vector<TUrl*,allocator<TUrl*> >" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_reverse_iteratorlEvectorlETUrlmUcOallocatorlETUrlmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TUrl*,allocator<TUrl*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TXUrl = { "TXUrl" , 99 , -1 };
G__linked_taginfo G__G__NetxLN_TXNetConncLcLServerType = { "TXNetConn::ServerType" , 101 , -1 };
G__linked_taginfo G__G__NetxLN_TXNetConncLcLESrvErrorHandlerRetval = { "TXNetConn::ESrvErrorHandlerRetval" , 101 , -1 };
G__linked_taginfo G__G__NetxLN_TXNetConncLcLEThreeStateReadHandler = { "TXNetConn::EThreeStateReadHandler" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__Netx() {
  G__G__NetxLN_TClass.tagnum = -1 ;
  G__G__NetxLN_TBuffer.tagnum = -1 ;
  G__G__NetxLN_TMemberInspector.tagnum = -1 ;
  G__G__NetxLN_TObject.tagnum = -1 ;
  G__G__NetxLN_TNamed.tagnum = -1 ;
  G__G__NetxLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR.tagnum = -1 ;
  G__G__NetxLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__NetxLN_TString.tagnum = -1 ;
  G__G__NetxLN_TFile.tagnum = -1 ;
  G__G__NetxLN_TDirectory.tagnum = -1 ;
  G__G__NetxLN_TUrl.tagnum = -1 ;
  G__G__NetxLN_TSocket.tagnum = -1 ;
  G__G__NetxLN_TXSocket.tagnum = -1 ;
  G__G__NetxLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__G__NetxLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__NetxLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__G__NetxLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__NetxLN_TNetFile.tagnum = -1 ;
  G__G__NetxLN_TXUnsolicitedMsgSender.tagnum = -1 ;
  G__G__NetxLN_TXMessage.tagnum = -1 ;
  G__G__NetxLN_TXAbsUnsolicitedMsgHandler.tagnum = -1 ;
  G__G__NetxLN_TXAbsNetCommon.tagnum = -1 ;
  G__G__NetxLN_TXNetConn.tagnum = -1 ;
  G__G__NetxLN_Params_Open.tagnum = -1 ;
  G__G__NetxLN_TXNetFile.tagnum = -1 ;
  G__G__NetxLN_ESendRecvOptions.tagnum = -1 ;
  G__G__NetxLN_TXSocketConnectParms.tagnum = -1 ;
  G__G__NetxLN_TXPhyConnection.tagnum = -1 ;
  G__G__NetxLN_XReqErrorType.tagnum = -1 ;
  G__G__NetxLN_XErrorCode.tagnum = -1 ;
  G__G__NetxLN_ClientRequest.tagnum = -1 ;
  G__G__NetxLN_ServerResponseHeader.tagnum = -1 ;
  G__G__NetxLN_TXMessagecLcLEXMSCStatus.tagnum = -1 ;
  G__G__NetxLN_TMutex.tagnum = -1 ;
  G__G__NetxLN_TCondition.tagnum = -1 ;
  G__G__NetxLN_TThread.tagnum = -1 ;
  G__G__NetxLN_TXInputBuffer.tagnum = -1 ;
  G__G__NetxLN_listlETXMessagemUcOallocatorlETXMessagemUgRsPgR.tagnum = -1 ;
  G__G__NetxLN_maplEshortcOTConditionmUcOlesslEshortgRcOallocatorlEpairlEconstsPshortcOTConditionmUgRsPgRsPgR.tagnum = -1 ;
  G__G__NetxLN_ELoginState.tagnum = -1 ;
  G__G__NetxLN_ERemoteServer.tagnum = -1 ;
  G__G__NetxLN_TXLogConnection.tagnum = -1 ;
  G__G__NetxLN_TXConnectionMgr.tagnum = -1 ;
  G__G__NetxLN_vectorlETXLogConnectionmUcOallocatorlETXLogConnectionmUgRsPgR.tagnum = -1 ;
  G__G__NetxLN_reverse_iteratorlEvectorlETXLogConnectionmUcOallocatorlETXLogConnectionmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__NetxLN_vectorlETXPhyConnectionmUcOallocatorlETXPhyConnectionmUgRsPgR.tagnum = -1 ;
  G__G__NetxLN_reverse_iteratorlEvectorlETXPhyConnectionmUcOallocatorlETXPhyConnectionmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__NetxLN_TRandom.tagnum = -1 ;
  G__G__NetxLN_vectorlETUrlmUcOallocatorlETUrlmUgRsPgR.tagnum = -1 ;
  G__G__NetxLN_reverse_iteratorlEvectorlETUrlmUcOallocatorlETUrlmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__NetxLN_TXUrl.tagnum = -1 ;
  G__G__NetxLN_TXNetConncLcLServerType.tagnum = -1 ;
  G__G__NetxLN_TXNetConncLcLESrvErrorHandlerRetval.tagnum = -1 ;
  G__G__NetxLN_TXNetConncLcLEThreeStateReadHandler.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__Netx() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum(&G__G__NetxLN_TClass);
   G__get_linked_tagnum(&G__G__NetxLN_TBuffer);
   G__get_linked_tagnum(&G__G__NetxLN_TMemberInspector);
   G__get_linked_tagnum(&G__G__NetxLN_TObject);
   G__get_linked_tagnum(&G__G__NetxLN_TNamed);
   G__get_linked_tagnum(&G__G__NetxLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR);
   G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__G__NetxLN_TString);
   G__get_linked_tagnum(&G__G__NetxLN_TFile);
   G__get_linked_tagnum(&G__G__NetxLN_TDirectory);
   G__get_linked_tagnum(&G__G__NetxLN_TUrl);
   G__get_linked_tagnum(&G__G__NetxLN_TSocket);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__NetxLN_TXSocket),sizeof(TXSocket),-1,62464,"An extension of TSocket with read/write/connect",G__setup_memvarTXSocket,G__setup_memfuncTXSocket);
   G__get_linked_tagnum(&G__G__NetxLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__G__NetxLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__G__NetxLN_TNetFile);
   G__get_linked_tagnum(&G__G__NetxLN_TXUnsolicitedMsgSender);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__NetxLN_TXMessage),sizeof(TXMessage),-1,34048,(char*)NULL,G__setup_memvarTXMessage,G__setup_memfuncTXMessage);
   G__get_linked_tagnum(&G__G__NetxLN_TXAbsUnsolicitedMsgHandler);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__NetxLN_TXAbsNetCommon),sizeof(TXAbsNetCommon),-1,2,(char*)NULL,G__setup_memvarTXAbsNetCommon,G__setup_memfuncTXAbsNetCommon);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetConn),sizeof(TXNetConn),-1,66816,"A high level connection class for TXNetAdmin.",G__setup_memvarTXNetConn,G__setup_memfuncTXNetConn);
   G__get_linked_tagnum(&G__G__NetxLN_Params_Open);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__NetxLN_TXNetFile),sizeof(TXNetFile),-1,128000,"A TNetFile extension able to deal with new xrootd server.",G__setup_memvarTXNetFile,G__setup_memfuncTXNetFile);
   G__get_linked_tagnum(&G__G__NetxLN_ESendRecvOptions);
   G__get_linked_tagnum(&G__G__NetxLN_TXSocketConnectParms);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__NetxLN_TXPhyConnection),sizeof(TXPhyConnection),-1,33792,(char*)NULL,G__setup_memvarTXPhyConnection,G__setup_memfuncTXPhyConnection);
   G__get_linked_tagnum(&G__G__NetxLN_XReqErrorType);
   G__get_linked_tagnum(&G__G__NetxLN_XErrorCode);
   G__get_linked_tagnum(&G__G__NetxLN_ClientRequest);
   G__get_linked_tagnum(&G__G__NetxLN_ServerResponseHeader);
   G__get_linked_tagnum(&G__G__NetxLN_TXMessagecLcLEXMSCStatus);
   G__get_linked_tagnum(&G__G__NetxLN_TMutex);
   G__get_linked_tagnum(&G__G__NetxLN_TCondition);
   G__get_linked_tagnum(&G__G__NetxLN_TThread);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__NetxLN_TXInputBuffer),sizeof(TXInputBuffer),-1,1280,(char*)NULL,G__setup_memvarTXInputBuffer,G__setup_memfuncTXInputBuffer);
   G__get_linked_tagnum(&G__G__NetxLN_listlETXMessagemUcOallocatorlETXMessagemUgRsPgR);
   G__get_linked_tagnum(&G__G__NetxLN_maplEshortcOTConditionmUcOlesslEshortgRcOallocatorlEpairlEconstsPshortcOTConditionmUgRsPgRsPgR);
   G__get_linked_tagnum(&G__G__NetxLN_ELoginState);
   G__get_linked_tagnum(&G__G__NetxLN_ERemoteServer);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__NetxLN_TXLogConnection),sizeof(TXLogConnection),-1,1280,"The logical connection of the client",G__setup_memvarTXLogConnection,G__setup_memfuncTXLogConnection);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__NetxLN_TXConnectionMgr),sizeof(TXConnectionMgr),-1,1280,"The Connection Manager",G__setup_memvarTXConnectionMgr,G__setup_memfuncTXConnectionMgr);
   G__get_linked_tagnum(&G__G__NetxLN_vectorlETXLogConnectionmUcOallocatorlETXLogConnectionmUgRsPgR);
   G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlETXLogConnectionmUcOallocatorlETXLogConnectionmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__G__NetxLN_vectorlETXPhyConnectionmUcOallocatorlETXPhyConnectionmUgRsPgR);
   G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlETXPhyConnectionmUcOallocatorlETXPhyConnectionmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__G__NetxLN_TRandom);
   G__get_linked_tagnum(&G__G__NetxLN_vectorlETUrlmUcOallocatorlETUrlmUgRsPgR);
   G__get_linked_tagnum(&G__G__NetxLN_reverse_iteratorlEvectorlETUrlmUcOallocatorlETUrlmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__NetxLN_TXUrl),sizeof(TXUrl),-1,33792,"A container for multiple urls.",G__setup_memvarTXUrl,G__setup_memfuncTXUrl);
   G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLServerType);
   G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLESrvErrorHandlerRetval);
   G__get_linked_tagnum(&G__G__NetxLN_TXNetConncLcLEThreeStateReadHandler);
}
extern "C" void G__cpp_setupG__Netx(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__Netx()");
  G__set_cpp_environmentG__Netx();
  G__cpp_setup_tagtableG__Netx();

  G__cpp_setup_inheritanceG__Netx();

  G__cpp_setup_typetableG__Netx();

  G__cpp_setup_memvarG__Netx();

  G__cpp_setup_memfuncG__Netx();
  G__cpp_setup_globalG__Netx();
  G__cpp_setup_funcG__Netx();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__Netx();
  return;
}
class G__cpp_setup_initG__Netx {
  public:
    G__cpp_setup_initG__Netx() { G__add_setup_func("G__Netx",(G__incsetup)(&G__cpp_setupG__Netx)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__Netx() { G__remove_setup_func("G__Netx"); }
};
G__cpp_setup_initG__Netx G__cpp_setup_initializerG__Netx;

