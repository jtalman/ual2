//
// File generated by utils/src/rootcint_tmp at Tue Jun 30 21:35:19 2020.
// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

#include "G__LDAP.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TStreamerInfo.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"

#include "TCollectionProxy.h"

namespace ROOT {
   namespace Shadow {
   } // Of namespace ROOT::Shadow
} // Of namespace ROOT

namespace ROOT {
   void TLDAPEntry_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TLDAPEntry_IsA(const void*);
   static void delete_TLDAPEntry(void *p);
   static void deleteArray_TLDAPEntry(void *p);
   static void destruct_TLDAPEntry(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TLDAPEntry*)
   {
      ::TLDAPEntry *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TLDAPEntry", ::TLDAPEntry::Class_Version(), "ldap/inc/TLDAPEntry.h", 30,
                  typeid(::TLDAPEntry), DefineBehavior(ptr, ptr),
                  &::TLDAPEntry::Dictionary, &TLDAPEntry_IsA, 0,
                  sizeof(::TLDAPEntry) );
      instance.SetDelete(&delete_TLDAPEntry);
      instance.SetDeleteArray(&deleteArray_TLDAPEntry);
      instance.SetDestructor(&destruct_TLDAPEntry);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TLDAPEntry*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TLDAPAttribute_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TLDAPAttribute_IsA(const void*);
   static void delete_TLDAPAttribute(void *p);
   static void deleteArray_TLDAPAttribute(void *p);
   static void destruct_TLDAPAttribute(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TLDAPAttribute*)
   {
      ::TLDAPAttribute *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TLDAPAttribute", ::TLDAPAttribute::Class_Version(), "ldap/inc/TLDAPAttribute.h", 25,
                  typeid(::TLDAPAttribute), DefineBehavior(ptr, ptr),
                  &::TLDAPAttribute::Dictionary, &TLDAPAttribute_IsA, 0,
                  sizeof(::TLDAPAttribute) );
      instance.SetDelete(&delete_TLDAPAttribute);
      instance.SetDeleteArray(&deleteArray_TLDAPAttribute);
      instance.SetDestructor(&destruct_TLDAPAttribute);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TLDAPAttribute*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TLDAPResult_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TLDAPResult_IsA(const void*);
   static void delete_TLDAPResult(void *p);
   static void deleteArray_TLDAPResult(void *p);
   static void destruct_TLDAPResult(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TLDAPResult*)
   {
      ::TLDAPResult *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TLDAPResult", ::TLDAPResult::Class_Version(), "ldap/inc/TLDAPResult.h", 24,
                  typeid(::TLDAPResult), DefineBehavior(ptr, ptr),
                  &::TLDAPResult::Dictionary, &TLDAPResult_IsA, 0,
                  sizeof(::TLDAPResult) );
      instance.SetDelete(&delete_TLDAPResult);
      instance.SetDeleteArray(&deleteArray_TLDAPResult);
      instance.SetDestructor(&destruct_TLDAPResult);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TLDAPResult*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TLDAPServer_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TLDAPServer_IsA(const void*);
   static void delete_TLDAPServer(void *p);
   static void deleteArray_TLDAPServer(void *p);
   static void destruct_TLDAPServer(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TLDAPServer*)
   {
      ::TLDAPServer *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TLDAPServer", ::TLDAPServer::Class_Version(), "ldap/inc/TLDAPServer.h", 27,
                  typeid(::TLDAPServer), DefineBehavior(ptr, ptr),
                  &::TLDAPServer::Dictionary, &TLDAPServer_IsA, 0,
                  sizeof(::TLDAPServer) );
      instance.SetDelete(&delete_TLDAPServer);
      instance.SetDeleteArray(&deleteArray_TLDAPServer);
      instance.SetDestructor(&destruct_TLDAPServer);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TLDAPServer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

//______________________________________________________________________________
TClass *TLDAPEntry::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TLDAPEntry::Class_Name()
{
   return "TLDAPEntry";
}

//______________________________________________________________________________
const char *TLDAPEntry::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TLDAPEntry*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TLDAPEntry::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TLDAPEntry*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TLDAPEntry::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TLDAPEntry*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TLDAPEntry::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TLDAPEntry*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TLDAPAttribute::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TLDAPAttribute::Class_Name()
{
   return "TLDAPAttribute";
}

//______________________________________________________________________________
const char *TLDAPAttribute::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TLDAPAttribute*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TLDAPAttribute::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TLDAPAttribute*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TLDAPAttribute::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TLDAPAttribute*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TLDAPAttribute::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TLDAPAttribute*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TLDAPResult::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TLDAPResult::Class_Name()
{
   return "TLDAPResult";
}

//______________________________________________________________________________
const char *TLDAPResult::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TLDAPResult*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TLDAPResult::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TLDAPResult*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TLDAPResult::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TLDAPResult*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TLDAPResult::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TLDAPResult*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TLDAPServer::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TLDAPServer::Class_Name()
{
   return "TLDAPServer";
}

//______________________________________________________________________________
const char *TLDAPServer::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TLDAPServer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TLDAPServer::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TLDAPServer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TLDAPServer::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TLDAPServer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TLDAPServer::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TLDAPServer*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TLDAPServer::Streamer(TBuffer &R__b)
{
   // Stream an object of class TLDAPServer.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TLDAPServer::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TLDAPServer.

      TClass *R__cl = ::TLDAPServer::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fLd", &fLd);
      R__insp.Inspect(R__cl, R__parent, "fBinddn", &fBinddn);
      fBinddn.ShowMembers(R__insp, strcat(R__parent,"fBinddn.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fPassword", &fPassword);
      fPassword.ShowMembers(R__insp, strcat(R__parent,"fPassword.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fIsConnected", &fIsConnected);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TLDAPServer_IsA(const void *obj) {
      return ((::TLDAPServer*)obj)->IsA();
   }
   // Wrapper around operator delete
   static void delete_TLDAPServer(void *p) {
      delete ((::TLDAPServer*)p);
   }
   static void deleteArray_TLDAPServer(void *p) {
      delete [] ((::TLDAPServer*)p);
   }
   static void destruct_TLDAPServer(void *p) {
      typedef ::TLDAPServer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TLDAPServer

//______________________________________________________________________________
void TLDAPResult::Streamer(TBuffer &R__b)
{
   // Stream an object of class TLDAPResult.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TLDAPResult::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TLDAPResult.

      TClass *R__cl = ::TLDAPResult::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fLd", &fLd);
      R__insp.Inspect(R__cl, R__parent, "*fSearchResult", &fSearchResult);
      R__insp.Inspect(R__cl, R__parent, "*fCurrentEntry", &fCurrentEntry);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TLDAPResult_IsA(const void *obj) {
      return ((::TLDAPResult*)obj)->IsA();
   }
   // Wrapper around operator delete
   static void delete_TLDAPResult(void *p) {
      delete ((::TLDAPResult*)p);
   }
   static void deleteArray_TLDAPResult(void *p) {
      delete [] ((::TLDAPResult*)p);
   }
   static void destruct_TLDAPResult(void *p) {
      typedef ::TLDAPResult current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TLDAPResult

//______________________________________________________________________________
void TLDAPEntry::Streamer(TBuffer &R__b)
{
   // Stream an object of class TLDAPEntry.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TLDAPEntry::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TLDAPEntry.

      TClass *R__cl = ::TLDAPEntry::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fDn", &fDn);
      fDn.ShowMembers(R__insp, strcat(R__parent,"fDn.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fAttr", &fAttr);
      R__insp.Inspect(R__cl, R__parent, "fNCount", &fNCount);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TLDAPEntry_IsA(const void *obj) {
      return ((::TLDAPEntry*)obj)->IsA();
   }
   // Wrapper around operator delete
   static void delete_TLDAPEntry(void *p) {
      delete ((::TLDAPEntry*)p);
   }
   static void deleteArray_TLDAPEntry(void *p) {
      delete [] ((::TLDAPEntry*)p);
   }
   static void destruct_TLDAPEntry(void *p) {
      typedef ::TLDAPEntry current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TLDAPEntry

//______________________________________________________________________________
void TLDAPAttribute::Streamer(TBuffer &R__b)
{
   // Stream an object of class TLDAPAttribute.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void TLDAPAttribute::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TLDAPAttribute.

      TClass *R__cl = ::TLDAPAttribute::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fValues", &fValues);
      R__insp.Inspect(R__cl, R__parent, "fNCount", &fNCount);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TLDAPAttribute_IsA(const void *obj) {
      return ((::TLDAPAttribute*)obj)->IsA();
   }
   // Wrapper around operator delete
   static void delete_TLDAPAttribute(void *p) {
      delete ((::TLDAPAttribute*)p);
   }
   static void deleteArray_TLDAPAttribute(void *p) {
      delete [] ((::TLDAPAttribute*)p);
   }
   static void destruct_TLDAPAttribute(void *p) {
      typedef ::TLDAPAttribute current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TLDAPAttribute

/********************************************************
* ldap/src/G__LDAP.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableG__LDAP();

extern "C" void G__set_cpp_environmentG__LDAP() {
  G__add_compiledheader("base/inc/TROOT.h");
  G__add_compiledheader("base/inc/TMemberInspector.h");
  G__add_compiledheader("ldap/inc/TLDAPAttribute.h");
  G__add_compiledheader("ldap/inc/TLDAPServer.h");
  G__add_compiledheader("ldap/inc/CintLDAP.h");
  G__add_compiledheader("ldap/inc/TLDAPResult.h");
  G__add_compiledheader("ldap/inc/TLDAPEntry.h");
  G__cpp_reset_tagtableG__LDAP();
}
class G__ldapdIsrcdIG__LDAPdOcxx_tag {};

void* operator new(size_t size,G__ldapdIsrcdIG__LDAPdOcxx_tag* p) {
  if(p && G__PVOID!=G__getgvp()) return((void*)p);
#ifndef G__ROOT
  return(malloc(size));
#else
  return(::operator new(size));
#endif
}

/* dummy, for exception */
#ifdef G__EH_DUMMY_DELETE
void operator delete(void *p,G__ldapdIsrcdIG__LDAPdOcxx_tag* x) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}
#endif

static void G__operator_delete(void *p) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}

void G__DELDMY_ldapdIsrcdIG__LDAPdOcxx() { G__operator_delete(0); }

extern "C" int G__cpp_dllrevG__LDAP() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TLDAPEntry */
static int G__G__LDAP_130_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TLDAPEntry *p=NULL;
      p = new TLDAPEntry((const char*)G__int(libp->para[0]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__LDAPLN_TLDAPEntry);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TLDAPEntry *p=NULL;
      p = new TLDAPEntry(*(TLDAPEntry*)libp->para[0].ref);
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__LDAPLN_TLDAPEntry);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)((const TLDAPEntry*)(G__getstructoffset()))->GetDn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TLDAPEntry*)(G__getstructoffset()))->SetDn((const char*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TLDAPEntry*)(G__getstructoffset()))->AddAttribute(*(TLDAPAttribute*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TLDAPEntry*)(G__getstructoffset()))->GetAttribute());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TLDAPEntry*)(G__getstructoffset()))->GetAttribute((const char*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TLDAPEntry*)(G__getstructoffset()))->DeleteAttribute((const char*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TLDAPEntry*)(G__getstructoffset()))->GetCount());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const TLDAPEntry*)(G__getstructoffset()))->IsReferral());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TLDAPEntry*)(G__getstructoffset()))->GetReferrals());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((const TLDAPEntry*)(G__getstructoffset()))->Print((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((const TLDAPEntry*)(G__getstructoffset()))->Print();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TLDAPEntry::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TLDAPEntry::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TLDAPEntry::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TLDAPEntry::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TLDAPEntry*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TLDAPEntry*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TLDAPEntry*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TLDAPEntry*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TLDAPEntry::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TLDAPEntry::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TLDAPEntry::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_130_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TLDAPEntry::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TLDAPEntry G__TTLDAPEntry;
static int G__G__LDAP_130_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TLDAPEntry *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TLDAPEntry *)((G__getstructoffset())+sizeof(TLDAPEntry)*i);
   else  delete (TLDAPEntry *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__LDAP_130_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TLDAPEntry *dest = (TLDAPEntry*)(G__getstructoffset());
   *dest = (*(TLDAPEntry*)libp->para[0].ref);
   const TLDAPEntry& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TLDAPAttribute */
static int G__G__LDAP_131_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TLDAPAttribute *p=NULL;
      p = new TLDAPAttribute((const char*)G__int(libp->para[0]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__LDAPLN_TLDAPAttribute);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TLDAPAttribute *p=NULL;
      p = new TLDAPAttribute((const char*)G__int(libp->para[0]),(const char*)G__int(libp->para[1]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__LDAPLN_TLDAPAttribute);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TLDAPAttribute *p=NULL;
      p = new TLDAPAttribute(*(TLDAPAttribute*)libp->para[0].ref);
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__LDAPLN_TLDAPAttribute);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TLDAPAttribute*)(G__getstructoffset()))->AddValue((const char*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TLDAPAttribute*)(G__getstructoffset()))->DeleteValue((const char*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)((const TLDAPAttribute*)(G__getstructoffset()))->GetValue());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TLDAPAttribute*)(G__getstructoffset()))->GetCount());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((const TLDAPAttribute*)(G__getstructoffset()))->Print((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((const TLDAPAttribute*)(G__getstructoffset()))->Print();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TLDAPAttribute::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TLDAPAttribute::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TLDAPAttribute::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TLDAPAttribute::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TLDAPAttribute*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TLDAPAttribute*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TLDAPAttribute*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TLDAPAttribute*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TLDAPAttribute::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TLDAPAttribute::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TLDAPAttribute::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_131_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TLDAPAttribute::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TLDAPAttribute G__TTLDAPAttribute;
static int G__G__LDAP_131_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TLDAPAttribute *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TLDAPAttribute *)((G__getstructoffset())+sizeof(TLDAPAttribute)*i);
   else  delete (TLDAPAttribute *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__LDAP_131_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TLDAPAttribute *dest = (TLDAPAttribute*)(G__getstructoffset());
   *dest = (*(TLDAPAttribute*)libp->para[0].ref);
   const TLDAPAttribute& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TLDAPResult */
static int G__G__LDAP_132_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TLDAPResult*)(G__getstructoffset()))->GetCount());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_132_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TLDAPResult*)(G__getstructoffset()))->GetNext());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_132_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((const TLDAPResult*)(G__getstructoffset()))->Print((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((const TLDAPResult*)(G__getstructoffset()))->Print();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_132_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TLDAPResult::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_132_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TLDAPResult::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_132_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TLDAPResult::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_132_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TLDAPResult::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_132_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TLDAPResult*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_132_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TLDAPResult*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_132_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TLDAPResult*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_132_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TLDAPResult*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_132_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TLDAPResult::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_132_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TLDAPResult::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_132_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TLDAPResult::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_132_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TLDAPResult::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__LDAP_132_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TLDAPResult *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TLDAPResult(*(TLDAPResult*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__LDAPLN_TLDAPResult);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TLDAPResult G__TTLDAPResult;
static int G__G__LDAP_132_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TLDAPResult *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TLDAPResult *)((G__getstructoffset())+sizeof(TLDAPResult)*i);
   else  delete (TLDAPResult *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__LDAP_132_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TLDAPResult *dest = (TLDAPResult*)(G__getstructoffset());
   *dest = (*(TLDAPResult*)libp->para[0].ref);
   const TLDAPResult& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TLDAPServer */
static int G__G__LDAP_133_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TLDAPServer *p=NULL;
   switch(libp->paran) {
   case 4:
      p = new TLDAPServer(
(const char*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(const char*)G__int(libp->para[2]),(const char*)G__int(libp->para[3]));
      break;
   case 3:
      p = new TLDAPServer(
(const char*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(const char*)G__int(libp->para[2]));
      break;
   case 2:
      p = new TLDAPServer((const char*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1]));
      break;
   case 1:
      p = new TLDAPServer((const char*)G__int(libp->para[0]));
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__LDAPLN_TLDAPServer);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const TLDAPServer*)(G__getstructoffset()))->IsConnected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 5:
   G__letint(result7,85,(long)((TLDAPServer*)(G__getstructoffset()))->Search((const char*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(const char*)G__int(libp->para[2]),(TList*)G__int(libp->para[3])
,(Bool_t)G__int(libp->para[4])));
      break;
   case 4:
   G__letint(result7,85,(long)((TLDAPServer*)(G__getstructoffset()))->Search((const char*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(const char*)G__int(libp->para[2]),(TList*)G__int(libp->para[3])));
      break;
   case 3:
   G__letint(result7,85,(long)((TLDAPServer*)(G__getstructoffset()))->Search((const char*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(const char*)G__int(libp->para[2])));
      break;
   case 2:
   G__letint(result7,85,(long)((TLDAPServer*)(G__getstructoffset()))->Search((const char*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
      break;
   case 1:
   G__letint(result7,85,(long)((TLDAPServer*)(G__getstructoffset()))->Search((const char*)G__int(libp->para[0])));
      break;
   case 0:
   G__letint(result7,85,(long)((TLDAPServer*)(G__getstructoffset()))->Search());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)((TLDAPServer*)(G__getstructoffset()))->GetNamingContexts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)((TLDAPServer*)(G__getstructoffset()))->GetSubschemaSubentry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TLDAPServer*)(G__getstructoffset()))->GetObjectClasses());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TLDAPServer*)(G__getstructoffset()))->GetAttributeTypes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TLDAPServer*)(G__getstructoffset()))->AddEntry(*(TLDAPEntry*)libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__letint(result7,105,(long)((TLDAPServer*)(G__getstructoffset()))->ModifyEntry(*(TLDAPEntry*)libp->para[0].ref,(Int_t)G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7,105,(long)((TLDAPServer*)(G__getstructoffset()))->ModifyEntry(*(TLDAPEntry*)libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TLDAPServer*)(G__getstructoffset()))->DeleteEntry((const char*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 3:
      G__letint(result7,105,(long)((TLDAPServer*)(G__getstructoffset()))->RenameEntry((const char*)G__int(libp->para[0]),(const char*)G__int(libp->para[1])
,(Bool_t)G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7,105,(long)((TLDAPServer*)(G__getstructoffset()))->RenameEntry((const char*)G__int(libp->para[0]),(const char*)G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TLDAPServer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TLDAPServer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TLDAPServer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TLDAPServer::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TLDAPServer*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TLDAPServer*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TLDAPServer*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TLDAPServer*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TLDAPServer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TLDAPServer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TLDAPServer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__LDAP_133_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TLDAPServer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__LDAP_133_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TLDAPServer *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TLDAPServer(*(TLDAPServer*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__LDAPLN_TLDAPServer);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TLDAPServer G__TTLDAPServer;
static int G__G__LDAP_133_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TLDAPServer *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TLDAPServer *)((G__getstructoffset())+sizeof(TLDAPServer)*i);
   else  delete (TLDAPServer *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__LDAP_133_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TLDAPServer *dest = (TLDAPServer*)(G__getstructoffset());
   *dest = (*(TLDAPServer*)libp->para[0].ref);
   const TLDAPServer& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TLDAPEntry */

/* TLDAPAttribute */

/* TLDAPResult */

/* TLDAPServer */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__LDAP {
 public:
  G__Sizep2memfuncG__LDAP() {p=&G__Sizep2memfuncG__LDAP::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__LDAP::*p)();
};

size_t G__get_sizep2memfuncG__LDAP()
{
  G__Sizep2memfuncG__LDAP a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__LDAP() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPEntry))) {
     TLDAPEntry *G__Lderived;
     G__Lderived=(TLDAPEntry*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPEntry),G__get_linked_tagnum(&G__G__LDAPLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPAttribute))) {
     TLDAPAttribute *G__Lderived;
     G__Lderived=(TLDAPAttribute*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPAttribute),G__get_linked_tagnum(&G__G__LDAPLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPAttribute),G__get_linked_tagnum(&G__G__LDAPLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPResult))) {
     TLDAPResult *G__Lderived;
     G__Lderived=(TLDAPResult*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPResult),G__get_linked_tagnum(&G__G__LDAPLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPServer))) {
     TLDAPServer *G__Lderived;
     G__Lderived=(TLDAPServer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPServer),G__get_linked_tagnum(&G__G__LDAPLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__LDAP() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,
-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Bool_t",103,-1,0,
-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,
-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,
-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<TStreamerInfo*>",117,G__get_linked_tagnum(&G__G__LDAPLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__LDAPLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__LDAPLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__LDAPLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__LDAPLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TLDAPEntry */
static void G__setup_memvarTLDAPEntry(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPEntry));
   { TLDAPEntry *p; p=(TLDAPEntry*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__LDAPLN_TString),-1,-1,4,"fDn=",0,"Distinguished name of entry");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__LDAPLN_TList),-1,-1,4,"fAttr=",0,"List of attributes");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNCount=",0,"Index of attribute to be returned from GetAttribute()");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__LDAPLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TLDAPAttribute */
static void G__setup_memvarTLDAPAttribute(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPAttribute));
   { TLDAPAttribute *p; p=(TLDAPAttribute*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__LDAPLN_TList),-1,-1,4,"fValues=",0,"list of values");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNCount=",0,"next value to be returned by GetValue()");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__LDAPLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TLDAPResult */
static void G__setup_memvarTLDAPResult(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPResult));
   { TLDAPResult *p; p=(TLDAPResult*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__LDAPLN_LDAP),-1,-1,4,"fLd=",0,"LDAP handle of current connection");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__LDAPLN_LDAPMessage),-1,-1,4,"fSearchResult=",0,"Pointer to the LDAP structure that contain search results");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__LDAPLN_LDAPMessage),-1,-1,4,"fCurrentEntry=",0,"Pointer to the current entry to be returned from the next GetNext() call");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__LDAPLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TLDAPServer */
static void G__setup_memvarTLDAPServer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPServer));
   { TLDAPServer *p; p=(TLDAPServer*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__LDAPLN_LDAP),-1,-1,4,"fLd=",0,"LDAP handle of current connection");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__LDAPLN_TString),-1,-1,4,"fBinddn=",0,"Bind name");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__LDAPLN_TString),-1,-1,4,"fPassword=",0,"Password");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsConnected=",0,"Current connection state");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__LDAPLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__LDAP() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTLDAPEntry(void) {
   /* TLDAPEntry */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPEntry));
   G__memfunc_setup("GetMods",691,(G__InterfaceMethod)NULL,85,G__get_linked_tagnum(&G__G__LDAPLN_LDAPMod),-1,2,1,1,4,0,"i - 'Int_t' 0 - op","Get array of LDAPMod structures of the entry",(void*)NULL,0);
   G__memfunc_setup("TLDAPEntry",903,G__G__LDAP_130_2_0,105,G__get_linked_tagnum(&G__G__LDAPLN_TLDAPEntry),-1,0,1,1,1,0,"C - - 10 - dn",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TLDAPEntry",903,G__G__LDAP_130_3_0,105,G__get_linked_tagnum(&G__G__LDAPLN_TLDAPEntry),-1,0,1,1,1,0,"u 'TLDAPEntry' - 11 - e",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetDn",466,G__G__LDAP_130_4_0,67,-1,-1,0,0,1,1,9,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetDn",478,G__G__LDAP_130_5_0,121,-1,-1,0,1,1,1,0,"C - - 10 - dn",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("AddAttribute",1213,G__G__LDAP_130_6_0,121,-1,-1,0,1,1,1,0,"u 'TLDAPAttribute' - 11 - attr",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetAttribute",1236,G__G__LDAP_130_7_0,85,G__get_linked_tagnum(&G__G__LDAPLN_TLDAPAttribute),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetAttribute",1236,G__G__LDAP_130_8_0,85,G__get_linked_tagnum(&G__G__LDAPLN_TLDAPAttribute),-1,0,1,1,1,8,"C - - 10 - name",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeleteAttribute",1543,G__G__LDAP_130_9_0,121,-1,-1,0,1,1,1,0,"C - - 10 - name",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetCount",809,G__G__LDAP_130_0_1,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsReferral",1007,G__G__LDAP_130_1_1,103,-1,G__defined_typename("Bool_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetReferrals",1222,G__G__LDAP_130_2_1,85,G__get_linked_tagnum(&G__G__LDAPLN_TList),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Print",525,G__G__LDAP_130_3_1,121,-1,-1,0,1,1,1,8,"C - 'Option_t' 10 \"\" -",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Class",502,G__G__LDAP_130_4_1,85,G__get_linked_tagnum(&G__G__LDAPLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TLDAPEntry::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__LDAP_130_5_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TLDAPEntry::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__LDAP_130_6_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TLDAPEntry::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__LDAP_130_7_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TLDAPEntry::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__LDAP_130_8_1,85,G__get_linked_tagnum(&G__G__LDAPLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__LDAP_130_9_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__LDAP_130_0_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__LDAP_130_1_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__LDAP_130_2_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TLDAPEntry::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__LDAP_130_3_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TLDAPEntry::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__LDAP_130_4_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TLDAPEntry::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__LDAP_130_5_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TLDAPEntry::DeclFileLine),0);
   // automatic destructor
   G__memfunc_setup("~TLDAPEntry",1029,G__G__LDAP_130_6_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__LDAP_130_7_2,(int)('u'),G__get_linked_tagnum(&G__G__LDAPLN_TLDAPEntry),-1,1,1,1,1,0,"u 'TLDAPEntry' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTLDAPAttribute(void) {
   /* TLDAPAttribute */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPAttribute));
   G__memfunc_setup("GetMod",576,(G__InterfaceMethod)NULL,85,G__get_linked_tagnum(&G__G__LDAPLN_LDAPMod),-1,0,1,1,4,0,"i - 'Int_t' 0 - op","for getting mod for attribute",(void*)NULL,0);
   G__memfunc_setup("TLDAPAttribute",1321,G__G__LDAP_131_2_0,105,G__get_linked_tagnum(&G__G__LDAPLN_TLDAPAttribute),-1,0,1,1,1,0,"C - - 10 - name",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TLDAPAttribute",1321,G__G__LDAP_131_3_0,105,G__get_linked_tagnum(&G__G__LDAPLN_TLDAPAttribute),-1,0,2,1,1,0,
"C - - 10 - name C - - 10 - value",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TLDAPAttribute",1321,G__G__LDAP_131_4_0,105,G__get_linked_tagnum(&G__G__LDAPLN_TLDAPAttribute),-1,0,1,1,1,0,"u 'TLDAPAttribute' - 11 - attr",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("AddValue",774,G__G__LDAP_131_5_0,121,-1,-1,0,1,1,1,0,"C - - 10 - value",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeleteValue",1104,G__G__LDAP_131_6_0,121,-1,-1,0,1,1,1,0,"C - - 10 - value",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetValue",797,G__G__LDAP_131_7_0,67,-1,-1,0,0,1,1,9,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetCount",809,G__G__LDAP_131_8_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Print",525,G__G__LDAP_131_9_0,121,-1,-1,0,1,1,1,8,"C - 'Option_t' 10 \"\" -",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Class",502,G__G__LDAP_131_0_1,85,G__get_linked_tagnum(&G__G__LDAPLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TLDAPAttribute::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__LDAP_131_1_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TLDAPAttribute::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__LDAP_131_2_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TLDAPAttribute::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__LDAP_131_3_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TLDAPAttribute::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__LDAP_131_4_1,85,G__get_linked_tagnum(&G__G__LDAPLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__LDAP_131_5_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__LDAP_131_6_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__LDAP_131_7_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__LDAP_131_8_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TLDAPAttribute::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__LDAP_131_9_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TLDAPAttribute::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__LDAP_131_0_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TLDAPAttribute::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__LDAP_131_1_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TLDAPAttribute::DeclFileLine),0);
   // automatic destructor
   G__memfunc_setup("~TLDAPAttribute",1447,G__G__LDAP_131_2_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__LDAP_131_3_2,(int)('u'),G__get_linked_tagnum(&G__G__LDAPLN_TLDAPAttribute),-1,1,1,1,1,0,"u 'TLDAPAttribute' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTLDAPResult(void) {
   /* TLDAPResult */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPResult));
   G__memfunc_setup("CreateEntry",1126,(G__InterfaceMethod)NULL,85,G__get_linked_tagnum(&G__G__LDAPLN_TLDAPEntry),-1,0,1,1,4,0,"U 'LDAPMessage' - 0 - entry",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TLDAPResult",1012,(G__InterfaceMethod)NULL,105,G__get_linked_tagnum(&G__G__LDAPLN_TLDAPResult),-1,0,0,1,4,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TLDAPResult",1012,(G__InterfaceMethod)NULL,105,G__get_linked_tagnum(&G__G__LDAPLN_TLDAPResult),-1,0,2,1,4,0,
"U 'LDAP' - 0 - ld U 'LDAPMessage' - 0 - searchresult",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetCount",809,G__G__LDAP_132_4_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetNext",703,G__G__LDAP_132_5_0,85,G__get_linked_tagnum(&G__G__LDAPLN_TLDAPEntry),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Print",525,G__G__LDAP_132_6_0,121,-1,-1,0,1,1,1,8,"C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Class",502,G__G__LDAP_132_7_0,85,G__get_linked_tagnum(&G__G__LDAPLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TLDAPResult::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__LDAP_132_8_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TLDAPResult::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__LDAP_132_9_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TLDAPResult::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__LDAP_132_0_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TLDAPResult::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__LDAP_132_1_1,85,G__get_linked_tagnum(&G__G__LDAPLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__LDAP_132_2_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__LDAP_132_3_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__LDAP_132_4_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__LDAP_132_5_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TLDAPResult::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__LDAP_132_6_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TLDAPResult::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__LDAP_132_7_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TLDAPResult::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__LDAP_132_8_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TLDAPResult::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TLDAPResult",1012,G__G__LDAP_132_9_1,(int)('i'),G__get_linked_tagnum(&G__G__LDAPLN_TLDAPResult),-1,0,1,1,1,0,"u 'TLDAPResult' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TLDAPResult",1138,G__G__LDAP_132_0_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__LDAP_132_1_2,(int)('u'),G__get_linked_tagnum(&G__G__LDAPLN_TLDAPResult),-1,1,1,1,1,0,"u 'TLDAPResult' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTLDAPServer(void) {
   /* TLDAPServer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPServer));
   G__memfunc_setup("Bind",381,(G__InterfaceMethod)NULL,105,-1,G__defined_typename("Int_t"),0,0,1,4,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Unbind",608,(G__InterfaceMethod)NULL,121,-1,-1,0,0,1,4,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeleteMods",998,(G__InterfaceMethod)NULL,121,-1,-1,0,1,3,4,0,"U 'LDAPMod' - 2 - mods",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TLDAPServer",1004,G__G__LDAP_133_4_0,105,G__get_linked_tagnum(&G__G__LDAPLN_TLDAPServer),-1,0,4,1,1,0,
"C - - 10 - host i - 'Int_t' 0 LDAP_PORT port "
"C - - 10 0 binddn C - - 10 0 password",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsConnected",1103,G__G__LDAP_133_5_0,103,-1,G__defined_typename("Bool_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Search",598,G__G__LDAP_133_6_0,85,G__get_linked_tagnum(&G__G__LDAPLN_TLDAPResult),-1,0,5,1,1,0,
"C - - 10 \"\" base i - 'Int_t' 0 LDAP_SCOPE_BASE scope "
"C - - 10 0 filter U 'TList' - 0 0 attrs "
"g - 'Bool_t' 0 0 attrsonly",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetNamingContexts",1746,G__G__LDAP_133_7_0,67,-1,-1,0,0,1,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetSubschemaSubentry",2071,G__G__LDAP_133_8_0,67,-1,-1,0,0,1,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetObjectClasses",1605,G__G__LDAP_133_9_0,85,G__get_linked_tagnum(&G__G__LDAPLN_TLDAPResult),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetAttributeTypes",1769,G__G__LDAP_133_0_1,85,G__get_linked_tagnum(&G__G__LDAPLN_TLDAPResult),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("AddEntry",795,G__G__LDAP_133_1_1,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"u 'TLDAPEntry' - 1 - entry",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ModifyEntry",1146,G__G__LDAP_133_2_1,105,-1,G__defined_typename("Int_t"),0,2,1,1,0,
"u 'TLDAPEntry' - 1 - entry i - 'Int_t' 0 LDAP_MOD_REPLACE mode",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeleteEntry",1125,G__G__LDAP_133_3_1,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"C - - 10 - dn",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("RenameEntry",1130,G__G__LDAP_133_4_1,105,-1,G__defined_typename("Int_t"),0,3,1,1,0,
"C - - 10 - dn C - - 10 - newrdn "
"g - 'Bool_t' 0 kFALSE removeattr",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__LDAP_133_5_1,85,G__get_linked_tagnum(&G__G__LDAPLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TLDAPServer::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__LDAP_133_6_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TLDAPServer::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__LDAP_133_7_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TLDAPServer::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__LDAP_133_8_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TLDAPServer::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__LDAP_133_9_1,85,G__get_linked_tagnum(&G__G__LDAPLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__LDAP_133_0_2,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__LDAP_133_1_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__LDAP_133_2_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__LDAP_133_3_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TLDAPServer::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__LDAP_133_4_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TLDAPServer::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__LDAP_133_5_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TLDAPServer::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__LDAP_133_6_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TLDAPServer::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TLDAPServer",1004,G__G__LDAP_133_7_2,(int)('i'),G__get_linked_tagnum(&G__G__LDAPLN_TLDAPServer),-1,0,1,1,1,0,"u 'TLDAPServer' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TLDAPServer",1130,G__G__LDAP_133_8_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__LDAP_133_9_2,(int)('u'),G__get_linked_tagnum(&G__G__LDAPLN_TLDAPServer),-1,1,1,1,1,0,"u 'TLDAPServer' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__LDAP() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
   G__memvar_setup((void*)(&LDAP_PORT),105,0,1,-1,-1,-1,1,"LDAP_PORT=",0,(char*)NULL);
   G__memvar_setup((void*)(&LDAP_SCOPE_DEFAULT),105,0,1,-1,-1,-1,1,"LDAP_SCOPE_DEFAULT=",0,(char*)NULL);
   G__memvar_setup((void*)(&LDAP_SCOPE_BASE),105,0,1,-1,-1,-1,1,"LDAP_SCOPE_BASE=",0,(char*)NULL);
   G__memvar_setup((void*)(&LDAP_SCOPE_ONELEVEL),105,0,1,-1,-1,-1,1,"LDAP_SCOPE_ONELEVEL=",0,(char*)NULL);
   G__memvar_setup((void*)(&LDAP_SCOPE_SUBTREE),105,0,1,-1,-1,-1,1,"LDAP_SCOPE_SUBTREE=",0,(char*)NULL);
   G__memvar_setup((void*)(&LDAP_MOD_ADD),105,0,1,-1,-1,-1,1,"LDAP_MOD_ADD=",0,(char*)NULL);
   G__memvar_setup((void*)(&LDAP_MOD_DELETE),105,0,1,-1,-1,-1,1,"LDAP_MOD_DELETE=",0,(char*)NULL);
   G__memvar_setup((void*)(&LDAP_MOD_REPLACE),105,0,1,-1,-1,-1,1,"LDAP_MOD_REPLACE=",0,(char*)NULL);
   G__memvar_setup((void*)(&LDAP_MOD_BVALUES),105,0,1,-1,-1,-1,1,"LDAP_MOD_BVALUES=",0,(char*)NULL);
   G__memvar_setup((void*)(&LDAP_SERVER_DOWN),105,0,1,-1,-1,-1,1,"LDAP_SERVER_DOWN=",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__LDAP() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__LDAP() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__LDAPLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__LDAPLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__LDAPLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__LDAPLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__LDAPLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__LDAPLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__G__LDAPLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR = { "vector<TStreamerInfo*,allocator<TStreamerInfo*> >" , 99 , -1 };
G__linked_taginfo G__G__LDAPLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TStreamerInfo*,allocator<TStreamerInfo*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__LDAPLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__LDAPLN_LDAP = { "LDAP" , 115 , -1 };
G__linked_taginfo G__G__LDAPLN_LDAPMessage = { "LDAPMessage" , 115 , -1 };
G__linked_taginfo G__G__LDAPLN_LDAPMod = { "LDAPMod" , 115 , -1 };
G__linked_taginfo G__G__LDAPLN_TLDAPEntry = { "TLDAPEntry" , 99 , -1 };
G__linked_taginfo G__G__LDAPLN_TLDAPAttribute = { "TLDAPAttribute" , 99 , -1 };
G__linked_taginfo G__G__LDAPLN_TLDAPResult = { "TLDAPResult" , 99 , -1 };
G__linked_taginfo G__G__LDAPLN_TLDAPServer = { "TLDAPServer" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__LDAP() {
  G__G__LDAPLN_TClass.tagnum = -1 ;
  G__G__LDAPLN_TBuffer.tagnum = -1 ;
  G__G__LDAPLN_TMemberInspector.tagnum = -1 ;
  G__G__LDAPLN_TObject.tagnum = -1 ;
  G__G__LDAPLN_TNamed.tagnum = -1 ;
  G__G__LDAPLN_TList.tagnum = -1 ;
  G__G__LDAPLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR.tagnum = -1 ;
  G__G__LDAPLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__LDAPLN_TString.tagnum = -1 ;
  G__G__LDAPLN_LDAP.tagnum = -1 ;
  G__G__LDAPLN_LDAPMessage.tagnum = -1 ;
  G__G__LDAPLN_LDAPMod.tagnum = -1 ;
  G__G__LDAPLN_TLDAPEntry.tagnum = -1 ;
  G__G__LDAPLN_TLDAPAttribute.tagnum = -1 ;
  G__G__LDAPLN_TLDAPResult.tagnum = -1 ;
  G__G__LDAPLN_TLDAPServer.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__LDAP() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum(&G__G__LDAPLN_TClass);
   G__get_linked_tagnum(&G__G__LDAPLN_TBuffer);
   G__get_linked_tagnum(&G__G__LDAPLN_TMemberInspector);
   G__get_linked_tagnum(&G__G__LDAPLN_TObject);
   G__get_linked_tagnum(&G__G__LDAPLN_TNamed);
   G__get_linked_tagnum(&G__G__LDAPLN_TList);
   G__get_linked_tagnum(&G__G__LDAPLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR);
   G__get_linked_tagnum(&G__G__LDAPLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__G__LDAPLN_TString);
   G__get_linked_tagnum(&G__G__LDAPLN_LDAP);
   G__get_linked_tagnum(&G__G__LDAPLN_LDAPMessage);
   G__get_linked_tagnum(&G__G__LDAPLN_LDAPMod);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPEntry),sizeof(TLDAPEntry),-1,62976,(char*)NULL,G__setup_memvarTLDAPEntry,G__setup_memfuncTLDAPEntry);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPAttribute),sizeof(TLDAPAttribute),-1,62976,(char*)NULL,G__setup_memvarTLDAPAttribute,G__setup_memfuncTLDAPAttribute);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPResult),sizeof(TLDAPResult),-1,62720,"LDAP search result set",G__setup_memvarTLDAPResult,G__setup_memfuncTLDAPResult);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__LDAPLN_TLDAPServer),sizeof(TLDAPServer),-1,62464,"Connection to LDAP server",G__setup_memvarTLDAPServer,G__setup_memfuncTLDAPServer);
}
extern "C" void G__cpp_setupG__LDAP(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__LDAP()");
  G__set_cpp_environmentG__LDAP();
  G__cpp_setup_tagtableG__LDAP();

  G__cpp_setup_inheritanceG__LDAP();

  G__cpp_setup_typetableG__LDAP();

  G__cpp_setup_memvarG__LDAP();

  G__cpp_setup_memfuncG__LDAP();
  G__cpp_setup_globalG__LDAP();
  G__cpp_setup_funcG__LDAP();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__LDAP();
  return;
}
class G__cpp_setup_initG__LDAP {
  public:
    G__cpp_setup_initG__LDAP() { G__add_setup_func("G__LDAP",(G__incsetup)(&G__cpp_setupG__LDAP)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__LDAP() { G__remove_setup_func("G__LDAP"); }
};
G__cpp_setup_initG__LDAP G__cpp_setup_initializerG__LDAP;

