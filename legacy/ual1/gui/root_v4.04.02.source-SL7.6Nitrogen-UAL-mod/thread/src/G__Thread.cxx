//
// File generated by utils/src/rootcint_tmp at Wed Jul  1 06:31:38 2020.
// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

#include "G__Thread.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TStreamerInfo.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"

#include "TCollectionProxy.h"

namespace ROOT {
   namespace Shadow {
   } // Of namespace ROOT::Shadow
} // Of namespace ROOT

namespace ROOT {
   void TConditionImp_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TConditionImp_IsA(const void*);
   static void delete_TConditionImp(void *p);
   static void deleteArray_TConditionImp(void *p);
   static void destruct_TConditionImp(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TConditionImp*)
   {
      ::TConditionImp *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TConditionImp", ::TConditionImp::Class_Version(), "thread/inc/TConditionImp.h", 33,
                  typeid(::TConditionImp), DefineBehavior(ptr, ptr),
                  &::TConditionImp::Dictionary, &TConditionImp_IsA, 0,
                  sizeof(::TConditionImp) );
      instance.SetDelete(&delete_TConditionImp);
      instance.SetDeleteArray(&deleteArray_TConditionImp);
      instance.SetDestructor(&destruct_TConditionImp);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TConditionImp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TMutex_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TMutex_IsA(const void*);
   static void *new_TMutex(void *p = 0);
   static void *newArray_TMutex(Long_t size);
   static void delete_TMutex(void *p);
   static void deleteArray_TMutex(void *p);
   static void destruct_TMutex(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TMutex*)
   {
      ::TMutex *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TMutex", ::TMutex::Class_Version(), "thread/inc/TMutex.h", 37,
                  typeid(::TMutex), DefineBehavior(ptr, ptr),
                  &::TMutex::Dictionary, &TMutex_IsA, 0,
                  sizeof(::TMutex) );
      instance.SetNew(&new_TMutex);
      instance.SetNewArray(&newArray_TMutex);
      instance.SetDelete(&delete_TMutex);
      instance.SetDeleteArray(&deleteArray_TMutex);
      instance.SetDestructor(&destruct_TMutex);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TMutex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TCondition_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TCondition_IsA(const void*);
   static void *new_TCondition(void *p = 0);
   static void *newArray_TCondition(Long_t size);
   static void delete_TCondition(void *p);
   static void deleteArray_TCondition(void *p);
   static void destruct_TCondition(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TCondition*)
   {
      ::TCondition *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TCondition", ::TCondition::Class_Version(), "thread/inc/TCondition.h", 36,
                  typeid(::TCondition), DefineBehavior(ptr, ptr),
                  &::TCondition::Dictionary, &TCondition_IsA, 0,
                  sizeof(::TCondition) );
      instance.SetNew(&new_TCondition);
      instance.SetNewArray(&newArray_TCondition);
      instance.SetDelete(&delete_TCondition);
      instance.SetDeleteArray(&deleteArray_TCondition);
      instance.SetDestructor(&destruct_TCondition);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TCondition*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TThread_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TThread_IsA(const void*);
   static void *new_TThread(void *p = 0);
   static void *newArray_TThread(Long_t size);
   static void delete_TThread(void *p);
   static void deleteArray_TThread(void *p);
   static void destruct_TThread(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TThread*)
   {
      ::TThread *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TThread", ::TThread::Class_Version(), "thread/inc/TThread.h", 49,
                  typeid(::TThread), DefineBehavior(ptr, ptr),
                  &::TThread::Dictionary, &TThread_IsA, 0,
                  sizeof(::TThread) );
      instance.SetNew(&new_TThread);
      instance.SetNewArray(&newArray_TThread);
      instance.SetDelete(&delete_TThread);
      instance.SetDeleteArray(&deleteArray_TThread);
      instance.SetDestructor(&destruct_TThread);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TThread*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TThreadImp_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TThreadImp_IsA(const void*);
   static void delete_TThreadImp(void *p);
   static void deleteArray_TThreadImp(void *p);
   static void destruct_TThreadImp(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TThreadImp*)
   {
      ::TThreadImp *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TThreadImp", ::TThreadImp::Class_Version(), "thread/inc/TThreadImp.h", 34,
                  typeid(::TThreadImp), DefineBehavior(ptr, ptr),
                  &::TThreadImp::Dictionary, &TThreadImp_IsA, 0,
                  sizeof(::TThreadImp) );
      instance.SetDelete(&delete_TThreadImp);
      instance.SetDeleteArray(&deleteArray_TThreadImp);
      instance.SetDestructor(&destruct_TThreadImp);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TThreadImp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TPosixThread_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TPosixThread_IsA(const void*);
   static void *new_TPosixThread(void *p = 0);
   static void *newArray_TPosixThread(Long_t size);
   static void delete_TPosixThread(void *p);
   static void deleteArray_TPosixThread(void *p);
   static void destruct_TPosixThread(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TPosixThread*)
   {
      ::TPosixThread *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TPosixThread", ::TPosixThread::Class_Version(), "thread/inc/TPosixThread.h", 37,
                  typeid(::TPosixThread), DefineBehavior(ptr, ptr),
                  &::TPosixThread::Dictionary, &TPosixThread_IsA, 0,
                  sizeof(::TPosixThread) );
      instance.SetNew(&new_TPosixThread);
      instance.SetNewArray(&newArray_TPosixThread);
      instance.SetDelete(&delete_TPosixThread);
      instance.SetDeleteArray(&deleteArray_TPosixThread);
      instance.SetDestructor(&destruct_TPosixThread);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TPosixThread*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TMutexImp_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TMutexImp_IsA(const void*);
   static void delete_TMutexImp(void *p);
   static void deleteArray_TMutexImp(void *p);
   static void destruct_TMutexImp(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TMutexImp*)
   {
      ::TMutexImp *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TMutexImp", ::TMutexImp::Class_Version(), "thread/inc/TMutexImp.h", 33,
                  typeid(::TMutexImp), DefineBehavior(ptr, ptr),
                  &::TMutexImp::Dictionary, &TMutexImp_IsA, 0,
                  sizeof(::TMutexImp) );
      instance.SetDelete(&delete_TMutexImp);
      instance.SetDeleteArray(&deleteArray_TMutexImp);
      instance.SetDestructor(&destruct_TMutexImp);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TMutexImp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TRWLock_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TRWLock_IsA(const void*);
   static void *new_TRWLock(void *p = 0);
   static void *newArray_TRWLock(Long_t size);
   static void delete_TRWLock(void *p);
   static void deleteArray_TRWLock(void *p);
   static void destruct_TRWLock(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TRWLock*)
   {
      ::TRWLock *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TRWLock", ::TRWLock::Class_Version(), "thread/inc/TRWLock.h", 37,
                  typeid(::TRWLock), DefineBehavior(ptr, ptr),
                  &::TRWLock::Dictionary, &TRWLock_IsA, 0,
                  sizeof(::TRWLock) );
      instance.SetNew(&new_TRWLock);
      instance.SetNewArray(&newArray_TRWLock);
      instance.SetDelete(&delete_TRWLock);
      instance.SetDeleteArray(&deleteArray_TRWLock);
      instance.SetDestructor(&destruct_TRWLock);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TRWLock*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TSemaphore_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TSemaphore_IsA(const void*);
   static void *new_TSemaphore(void *p = 0);
   static void *newArray_TSemaphore(Long_t size);
   static void delete_TSemaphore(void *p);
   static void deleteArray_TSemaphore(void *p);
   static void destruct_TSemaphore(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TSemaphore*)
   {
      ::TSemaphore *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TSemaphore", ::TSemaphore::Class_Version(), "thread/inc/TSemaphore.h", 36,
                  typeid(::TSemaphore), DefineBehavior(ptr, ptr),
                  &::TSemaphore::Dictionary, &TSemaphore_IsA, 0,
                  sizeof(::TSemaphore) );
      instance.SetNew(&new_TSemaphore);
      instance.SetNewArray(&newArray_TSemaphore);
      instance.SetDelete(&delete_TSemaphore);
      instance.SetDeleteArray(&deleteArray_TSemaphore);
      instance.SetDestructor(&destruct_TSemaphore);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TSemaphore*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TThreadFactory_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TThreadFactory_IsA(const void*);
   static void delete_TThreadFactory(void *p);
   static void deleteArray_TThreadFactory(void *p);
   static void destruct_TThreadFactory(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TThreadFactory*)
   {
      ::TThreadFactory *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TThreadFactory", ::TThreadFactory::Class_Version(), "thread/inc/TThreadFactory.h", 34,
                  typeid(::TThreadFactory), DefineBehavior(ptr, ptr),
                  &::TThreadFactory::Dictionary, &TThreadFactory_IsA, 0,
                  sizeof(::TThreadFactory) );
      instance.SetDelete(&delete_TThreadFactory);
      instance.SetDeleteArray(&deleteArray_TThreadFactory);
      instance.SetDestructor(&destruct_TThreadFactory);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TThreadFactory*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TPosixMutex_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TPosixMutex_IsA(const void*);
   static void *new_TPosixMutex(void *p = 0);
   static void *newArray_TPosixMutex(Long_t size);
   static void delete_TPosixMutex(void *p);
   static void deleteArray_TPosixMutex(void *p);
   static void destruct_TPosixMutex(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TPosixMutex*)
   {
      ::TPosixMutex *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TPosixMutex", ::TPosixMutex::Class_Version(), "thread/inc/TPosixMutex.h", 34,
                  typeid(::TPosixMutex), DefineBehavior(ptr, ptr),
                  &::TPosixMutex::Dictionary, &TPosixMutex_IsA, 0,
                  sizeof(::TPosixMutex) );
      instance.SetNew(&new_TPosixMutex);
      instance.SetNewArray(&newArray_TPosixMutex);
      instance.SetDelete(&delete_TPosixMutex);
      instance.SetDeleteArray(&deleteArray_TPosixMutex);
      instance.SetDestructor(&destruct_TPosixMutex);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TPosixMutex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TPosixCondition_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TPosixCondition_IsA(const void*);
   static void delete_TPosixCondition(void *p);
   static void deleteArray_TPosixCondition(void *p);
   static void destruct_TPosixCondition(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TPosixCondition*)
   {
      ::TPosixCondition *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TPosixCondition", ::TPosixCondition::Class_Version(), "thread/inc/TPosixCondition.h", 39,
                  typeid(::TPosixCondition), DefineBehavior(ptr, ptr),
                  &::TPosixCondition::Dictionary, &TPosixCondition_IsA, 0,
                  sizeof(::TPosixCondition) );
      instance.SetDelete(&delete_TPosixCondition);
      instance.SetDeleteArray(&deleteArray_TPosixCondition);
      instance.SetDestructor(&destruct_TPosixCondition);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TPosixCondition*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TPosixThreadFactory_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TPosixThreadFactory_IsA(const void*);
   static void *new_TPosixThreadFactory(void *p = 0);
   static void *newArray_TPosixThreadFactory(Long_t size);
   static void delete_TPosixThreadFactory(void *p);
   static void deleteArray_TPosixThreadFactory(void *p);
   static void destruct_TPosixThreadFactory(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TPosixThreadFactory*)
   {
      ::TPosixThreadFactory *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TPosixThreadFactory", ::TPosixThreadFactory::Class_Version(), "thread/inc/TPosixThreadFactory.h", 33,
                  typeid(::TPosixThreadFactory), DefineBehavior(ptr, ptr),
                  &::TPosixThreadFactory::Dictionary, &TPosixThreadFactory_IsA, 0,
                  sizeof(::TPosixThreadFactory) );
      instance.SetNew(&new_TPosixThreadFactory);
      instance.SetNewArray(&newArray_TPosixThreadFactory);
      instance.SetDelete(&delete_TPosixThreadFactory);
      instance.SetDeleteArray(&deleteArray_TPosixThreadFactory);
      instance.SetDestructor(&destruct_TPosixThreadFactory);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TPosixThreadFactory*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

//______________________________________________________________________________
TClass *TConditionImp::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TConditionImp::Class_Name()
{
   return "TConditionImp";
}

//______________________________________________________________________________
const char *TConditionImp::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TConditionImp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TConditionImp::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TConditionImp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TConditionImp::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TConditionImp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TConditionImp::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TConditionImp*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TMutex::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TMutex::Class_Name()
{
   return "TMutex";
}

//______________________________________________________________________________
const char *TMutex::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TMutex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TMutex::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TMutex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TMutex::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TMutex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TMutex::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TMutex*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TCondition::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TCondition::Class_Name()
{
   return "TCondition";
}

//______________________________________________________________________________
const char *TCondition::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TCondition*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TCondition::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TCondition*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TCondition::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TCondition*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TCondition::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TCondition*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TThread::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TThread::Class_Name()
{
   return "TThread";
}

//______________________________________________________________________________
const char *TThread::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TThread*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TThread::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TThread*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TThread::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TThread*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TThread::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TThread*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TThreadImp::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TThreadImp::Class_Name()
{
   return "TThreadImp";
}

//______________________________________________________________________________
const char *TThreadImp::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TThreadImp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TThreadImp::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TThreadImp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TThreadImp::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TThreadImp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TThreadImp::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TThreadImp*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TPosixThread::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPosixThread::Class_Name()
{
   return "TPosixThread";
}

//______________________________________________________________________________
const char *TPosixThread::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TPosixThread*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPosixThread::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TPosixThread*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPosixThread::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TPosixThread*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPosixThread::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TPosixThread*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TMutexImp::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TMutexImp::Class_Name()
{
   return "TMutexImp";
}

//______________________________________________________________________________
const char *TMutexImp::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TMutexImp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TMutexImp::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TMutexImp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TMutexImp::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TMutexImp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TMutexImp::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TMutexImp*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TRWLock::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TRWLock::Class_Name()
{
   return "TRWLock";
}

//______________________________________________________________________________
const char *TRWLock::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TRWLock*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TRWLock::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TRWLock*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TRWLock::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TRWLock*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TRWLock::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TRWLock*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSemaphore::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSemaphore::Class_Name()
{
   return "TSemaphore";
}

//______________________________________________________________________________
const char *TSemaphore::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TSemaphore*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSemaphore::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TSemaphore*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSemaphore::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TSemaphore*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSemaphore::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TSemaphore*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TThreadFactory::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TThreadFactory::Class_Name()
{
   return "TThreadFactory";
}

//______________________________________________________________________________
const char *TThreadFactory::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TThreadFactory*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TThreadFactory::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TThreadFactory*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TThreadFactory::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TThreadFactory*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TThreadFactory::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TThreadFactory*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TPosixMutex::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPosixMutex::Class_Name()
{
   return "TPosixMutex";
}

//______________________________________________________________________________
const char *TPosixMutex::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TPosixMutex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPosixMutex::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TPosixMutex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPosixMutex::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TPosixMutex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPosixMutex::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TPosixMutex*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TPosixCondition::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPosixCondition::Class_Name()
{
   return "TPosixCondition";
}

//______________________________________________________________________________
const char *TPosixCondition::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TPosixCondition*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPosixCondition::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TPosixCondition*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPosixCondition::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TPosixCondition*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPosixCondition::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TPosixCondition*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TPosixThreadFactory::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPosixThreadFactory::Class_Name()
{
   return "TPosixThreadFactory";
}

//______________________________________________________________________________
const char *TPosixThreadFactory::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TPosixThreadFactory*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPosixThreadFactory::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TPosixThreadFactory*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPosixThreadFactory::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TPosixThreadFactory*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPosixThreadFactory::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TPosixThreadFactory*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TThread::Streamer(TBuffer &R__b)
{
   // Stream an object of class TThread.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void TThread::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TThread.

      TClass *R__cl = ::TThread::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fNext", &fNext);
      R__insp.Inspect(R__cl, R__parent, "*fPrev", &fPrev);
      R__insp.Inspect(R__cl, R__parent, "*fHolder", &fHolder);
      R__insp.Inspect(R__cl, R__parent, "fPriority", &fPriority);
      R__insp.Inspect(R__cl, R__parent, "fState", &fState);
      R__insp.Inspect(R__cl, R__parent, "fStateComing", &fStateComing);
      R__insp.Inspect(R__cl, R__parent, "fId", &fId);
      R__insp.Inspect(R__cl, R__parent, "fHandle", &fHandle);
      R__insp.Inspect(R__cl, R__parent, "fDetached", &fDetached);
      R__insp.Inspect(R__cl, R__parent, "fNamed", &fNamed);
      R__insp.Inspect(R__cl, R__parent, "*fFcnRetn", &fFcnRetn);
      R__insp.Inspect(R__cl, R__parent, "*fFcnVoid", &fFcnVoid);
      R__insp.Inspect(R__cl, R__parent, "*fThreadArg", &fThreadArg);
      R__insp.Inspect(R__cl, R__parent, "*fClean", &fClean);
      R__insp.Inspect(R__cl, R__parent, "*fTsd[20]", &fTsd);
      R__insp.Inspect(R__cl, R__parent, "fComment[100]", fComment);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TThread_IsA(const void *obj) {
      return ((::TThread*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TThread(void *p) {
      return  p ? new(p) ::TThread : new ::TThread;
   }
   static void *newArray_TThread(Long_t size) {
      return new ::TThread[size];
   }
   // Wrapper around operator delete
   static void delete_TThread(void *p) {
      delete ((::TThread*)p);
   }
   static void deleteArray_TThread(void *p) {
      delete [] ((::TThread*)p);
   }
   static void destruct_TThread(void *p) {
      typedef ::TThread current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TThread

//______________________________________________________________________________
void TConditionImp::Streamer(TBuffer &R__b)
{
   // Stream an object of class TConditionImp.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TConditionImp::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TConditionImp.

      TClass *R__cl = ::TConditionImp::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TConditionImp_IsA(const void *obj) {
      return ((::TConditionImp*)obj)->IsA();
   }
   // Wrapper around operator delete
   static void delete_TConditionImp(void *p) {
      delete ((::TConditionImp*)p);
   }
   static void deleteArray_TConditionImp(void *p) {
      delete [] ((::TConditionImp*)p);
   }
   static void destruct_TConditionImp(void *p) {
      typedef ::TConditionImp current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TConditionImp

//______________________________________________________________________________
void TCondition::Streamer(TBuffer &R__b)
{
   // Stream an object of class TCondition.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TCondition::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TCondition.

      TClass *R__cl = ::TCondition::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fConditionImp", &fConditionImp);
      R__insp.Inspect(R__cl, R__parent, "*fMutex", &fMutex);
      R__insp.Inspect(R__cl, R__parent, "fPrivateMutex", &fPrivateMutex);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TCondition_IsA(const void *obj) {
      return ((::TCondition*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TCondition(void *p) {
      return  p ? new(p) ::TCondition : new ::TCondition;
   }
   static void *newArray_TCondition(Long_t size) {
      return new ::TCondition[size];
   }
   // Wrapper around operator delete
   static void delete_TCondition(void *p) {
      delete ((::TCondition*)p);
   }
   static void deleteArray_TCondition(void *p) {
      delete [] ((::TCondition*)p);
   }
   static void destruct_TCondition(void *p) {
      typedef ::TCondition current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TCondition

//______________________________________________________________________________
void TMutex::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMutex.

   TVirtualMutex::Streamer(R__b);
}

//______________________________________________________________________________
void TMutex::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMutex.

      TClass *R__cl = ::TMutex::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fMutexImp", &fMutexImp);
      R__insp.Inspect(R__cl, R__parent, "fId", &fId);
      R__insp.Inspect(R__cl, R__parent, "fRef", &fRef);
      TVirtualMutex::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TMutex_IsA(const void *obj) {
      return ((::TMutex*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TMutex(void *p) {
      return  p ? new(p) ::TMutex : new ::TMutex;
   }
   static void *newArray_TMutex(Long_t size) {
      return new ::TMutex[size];
   }
   // Wrapper around operator delete
   static void delete_TMutex(void *p) {
      delete ((::TMutex*)p);
   }
   static void deleteArray_TMutex(void *p) {
      delete [] ((::TMutex*)p);
   }
   static void destruct_TMutex(void *p) {
      typedef ::TMutex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMutex

//______________________________________________________________________________
void TMutexImp::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMutexImp.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TMutexImp::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMutexImp.

      TClass *R__cl = ::TMutexImp::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TMutexImp_IsA(const void *obj) {
      return ((::TMutexImp*)obj)->IsA();
   }
   // Wrapper around operator delete
   static void delete_TMutexImp(void *p) {
      delete ((::TMutexImp*)p);
   }
   static void deleteArray_TMutexImp(void *p) {
      delete [] ((::TMutexImp*)p);
   }
   static void destruct_TMutexImp(void *p) {
      typedef ::TMutexImp current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMutexImp

//______________________________________________________________________________
void TPosixCondition::Streamer(TBuffer &R__b)
{
   // Stream an object of class TPosixCondition.

   TConditionImp::Streamer(R__b);
}

//______________________________________________________________________________
void TPosixCondition::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TPosixCondition.

      TClass *R__cl = ::TPosixCondition::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fCond", (void*)&fCond);
      ::ROOT::GenericShowMembers("pthread_cond_t", (void*)&fCond, R__insp, strcat(R__parent,"fCond."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fMutex", &fMutex);
      TConditionImp::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TPosixCondition_IsA(const void *obj) {
      return ((::TPosixCondition*)obj)->IsA();
   }
   // Wrapper around operator delete
   static void delete_TPosixCondition(void *p) {
      delete ((::TPosixCondition*)p);
   }
   static void deleteArray_TPosixCondition(void *p) {
      delete [] ((::TPosixCondition*)p);
   }
   static void destruct_TPosixCondition(void *p) {
      typedef ::TPosixCondition current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TPosixCondition

//______________________________________________________________________________
void TPosixMutex::Streamer(TBuffer &R__b)
{
   // Stream an object of class TPosixMutex.

   TMutexImp::Streamer(R__b);
}

//______________________________________________________________________________
void TPosixMutex::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TPosixMutex.

      TClass *R__cl = ::TPosixMutex::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fMutex", (void*)&fMutex);
      ::ROOT::GenericShowMembers("pthread_mutex_t", (void*)&fMutex, R__insp, strcat(R__parent,"fMutex."),false);
      R__parent[R__ncp] = 0;
      TMutexImp::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TPosixMutex_IsA(const void *obj) {
      return ((::TPosixMutex*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TPosixMutex(void *p) {
      return  p ? new(p) ::TPosixMutex : new ::TPosixMutex;
   }
   static void *newArray_TPosixMutex(Long_t size) {
      return new ::TPosixMutex[size];
   }
   // Wrapper around operator delete
   static void delete_TPosixMutex(void *p) {
      delete ((::TPosixMutex*)p);
   }
   static void deleteArray_TPosixMutex(void *p) {
      delete [] ((::TPosixMutex*)p);
   }
   static void destruct_TPosixMutex(void *p) {
      typedef ::TPosixMutex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TPosixMutex

//______________________________________________________________________________
void TPosixThread::Streamer(TBuffer &R__b)
{
   // Stream an object of class TPosixThread.

   TThreadImp::Streamer(R__b);
}

//______________________________________________________________________________
void TPosixThread::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TPosixThread.

      TClass *R__cl = ::TPosixThread::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fCleanUp", &fCleanUp);
      TThreadImp::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TPosixThread_IsA(const void *obj) {
      return ((::TPosixThread*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TPosixThread(void *p) {
      return  p ? new(p) ::TPosixThread : new ::TPosixThread;
   }
   static void *newArray_TPosixThread(Long_t size) {
      return new ::TPosixThread[size];
   }
   // Wrapper around operator delete
   static void delete_TPosixThread(void *p) {
      delete ((::TPosixThread*)p);
   }
   static void deleteArray_TPosixThread(void *p) {
      delete [] ((::TPosixThread*)p);
   }
   static void destruct_TPosixThread(void *p) {
      typedef ::TPosixThread current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TPosixThread

//______________________________________________________________________________
void TPosixThreadFactory::Streamer(TBuffer &R__b)
{
   // Stream an object of class TPosixThreadFactory.

   TThreadFactory::Streamer(R__b);
}

//______________________________________________________________________________
void TPosixThreadFactory::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TPosixThreadFactory.

      TClass *R__cl = ::TPosixThreadFactory::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TThreadFactory::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TPosixThreadFactory_IsA(const void *obj) {
      return ((::TPosixThreadFactory*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TPosixThreadFactory(void *p) {
      return  p ? new(p) ::TPosixThreadFactory : new ::TPosixThreadFactory;
   }
   static void *newArray_TPosixThreadFactory(Long_t size) {
      return new ::TPosixThreadFactory[size];
   }
   // Wrapper around operator delete
   static void delete_TPosixThreadFactory(void *p) {
      delete ((::TPosixThreadFactory*)p);
   }
   static void deleteArray_TPosixThreadFactory(void *p) {
      delete [] ((::TPosixThreadFactory*)p);
   }
   static void destruct_TPosixThreadFactory(void *p) {
      typedef ::TPosixThreadFactory current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TPosixThreadFactory

//______________________________________________________________________________
void TSemaphore::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSemaphore.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TSemaphore::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TSemaphore.

      TClass *R__cl = ::TSemaphore::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fMutex", &fMutex);
      fMutex.ShowMembers(R__insp, strcat(R__parent,"fMutex.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fCond", &fCond);
      fCond.ShowMembers(R__insp, strcat(R__parent,"fCond.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fValue", &fValue);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TSemaphore_IsA(const void *obj) {
      return ((::TSemaphore*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TSemaphore(void *p) {
      return  p ? new(p) ::TSemaphore : new ::TSemaphore;
   }
   static void *newArray_TSemaphore(Long_t size) {
      return new ::TSemaphore[size];
   }
   // Wrapper around operator delete
   static void delete_TSemaphore(void *p) {
      delete ((::TSemaphore*)p);
   }
   static void deleteArray_TSemaphore(void *p) {
      delete [] ((::TSemaphore*)p);
   }
   static void destruct_TSemaphore(void *p) {
      typedef ::TSemaphore current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSemaphore

//______________________________________________________________________________
void TThreadFactory::Streamer(TBuffer &R__b)
{
   // Stream an object of class TThreadFactory.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void TThreadFactory::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TThreadFactory.

      TClass *R__cl = ::TThreadFactory::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TThreadFactory_IsA(const void *obj) {
      return ((::TThreadFactory*)obj)->IsA();
   }
   // Wrapper around operator delete
   static void delete_TThreadFactory(void *p) {
      delete ((::TThreadFactory*)p);
   }
   static void deleteArray_TThreadFactory(void *p) {
      delete [] ((::TThreadFactory*)p);
   }
   static void destruct_TThreadFactory(void *p) {
      typedef ::TThreadFactory current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TThreadFactory

//______________________________________________________________________________
void TThreadImp::Streamer(TBuffer &R__b)
{
   // Stream an object of class TThreadImp.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TThreadImp::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TThreadImp.

      TClass *R__cl = ::TThreadImp::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TThreadImp_IsA(const void *obj) {
      return ((::TThreadImp*)obj)->IsA();
   }
   // Wrapper around operator delete
   static void delete_TThreadImp(void *p) {
      delete ((::TThreadImp*)p);
   }
   static void deleteArray_TThreadImp(void *p) {
      delete [] ((::TThreadImp*)p);
   }
   static void destruct_TThreadImp(void *p) {
      typedef ::TThreadImp current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TThreadImp

//______________________________________________________________________________
void TRWLock::Streamer(TBuffer &R__b)
{
   // Stream an object of class TRWLock.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void TRWLock::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TRWLock.

      TClass *R__cl = ::TRWLock::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fReaders", &fReaders);
      R__insp.Inspect(R__cl, R__parent, "fWriters", &fWriters);
      R__insp.Inspect(R__cl, R__parent, "fMutex", &fMutex);
      fMutex.ShowMembers(R__insp, strcat(R__parent,"fMutex.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fLockFree", &fLockFree);
      fLockFree.ShowMembers(R__insp, strcat(R__parent,"fLockFree.")); R__parent[R__ncp] = 0;
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TRWLock_IsA(const void *obj) {
      return ((::TRWLock*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TRWLock(void *p) {
      return  p ? new(p) ::TRWLock : new ::TRWLock;
   }
   static void *newArray_TRWLock(Long_t size) {
      return new ::TRWLock[size];
   }
   // Wrapper around operator delete
   static void delete_TRWLock(void *p) {
      delete ((::TRWLock*)p);
   }
   static void deleteArray_TRWLock(void *p) {
      delete [] ((::TRWLock*)p);
   }
   static void destruct_TRWLock(void *p) {
      typedef ::TRWLock current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TRWLock

/********************************************************
* thread/src/G__Thread.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableG__Thread();

extern "C" void G__set_cpp_environmentG__Thread() {
  G__add_compiledheader("base/inc/TROOT.h");
  G__add_compiledheader("base/inc/TMemberInspector.h");
  G__add_compiledheader("thread/inc/TCondition.h");
  G__add_compiledheader("thread/inc/TConditionImp.h");
  G__add_compiledheader("thread/inc/TMutex.h");
  G__add_compiledheader("thread/inc/TMutexImp.h");
  G__add_compiledheader("thread/inc/TRWLock.h");
  G__add_compiledheader("thread/inc/TSemaphore.h");
  G__add_compiledheader("thread/inc/TThread.h");
  G__add_compiledheader("thread/inc/TThreadFactory.h");
  G__add_compiledheader("thread/inc/TThreadImp.h");
  G__add_compiledheader("thread/inc/TPosixCondition.h");
  G__add_compiledheader("thread/inc/TPosixMutex.h");
  G__add_compiledheader("thread/inc/TPosixThread.h");
  G__add_compiledheader("thread/inc/TPosixThreadFactory.h");
  G__add_compiledheader("thread/inc/PosixThreadInc.h");
  G__cpp_reset_tagtableG__Thread();
}
class G__threaddIsrcdIG__ThreaddOcxx_tag {};

void* operator new(size_t size,G__threaddIsrcdIG__ThreaddOcxx_tag* p) {
  if(p && G__PVOID!=G__getgvp()) return((void*)p);
#ifndef G__ROOT
  return(malloc(size));
#else
  return(::operator new(size));
#endif
}

/* dummy, for exception */
#ifdef G__EH_DUMMY_DELETE
void operator delete(void *p,G__threaddIsrcdIG__ThreaddOcxx_tag* x) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}
#endif

static void G__operator_delete(void *p) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}

void G__DELDMY_threaddIsrcdIG__ThreaddOcxx() { G__operator_delete(0); }

extern "C" int G__cpp_dllrevG__Thread() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TConditionImp */
static int G__G__Thread_127_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TConditionImp*)(G__getstructoffset()))->Wait());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_127_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__letint(result7,105,(long)((TConditionImp*)(G__getstructoffset()))->TimedWait((ULong_t)G__int(libp->para[0]),(ULong_t)G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7,105,(long)((TConditionImp*)(G__getstructoffset()))->TimedWait((ULong_t)G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_127_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TConditionImp*)(G__getstructoffset()))->Signal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_127_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TConditionImp*)(G__getstructoffset()))->Broadcast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_127_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TConditionImp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_127_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TConditionImp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_127_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TConditionImp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_127_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TConditionImp::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_127_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TConditionImp*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_127_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TConditionImp*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_127_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TConditionImp*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_127_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TConditionImp*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_127_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TConditionImp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_127_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TConditionImp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_127_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TConditionImp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_127_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TConditionImp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TConditionImp G__TTConditionImp;
static int G__G__Thread_127_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TConditionImp *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TConditionImp *)((G__getstructoffset())+sizeof(TConditionImp)*i);
   else  delete (TConditionImp *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_127_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TConditionImp *dest = (TConditionImp*)(G__getstructoffset());
   *dest = (*(TConditionImp*)libp->para[0].ref);
   const TConditionImp& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMutex */
static int G__G__Thread_128_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TMutex *p=NULL;
   switch(libp->paran) {
   case 1:
      p = new TMutex((Bool_t)G__int(libp->para[0]));
      break;
   case 0:
   if(G__getaryconstruct()) p=new TMutex[G__getaryconstruct()];
   else                    p=new TMutex;
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TMutex);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_128_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TMutex*)(G__getstructoffset()))->Lock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_128_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TMutex*)(G__getstructoffset()))->TryLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_128_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TMutex*)(G__getstructoffset()))->UnLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_128_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TMutex*)(G__getstructoffset()))->CleanUp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_128_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TMutex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_128_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TMutex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_128_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TMutex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_128_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TMutex::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_128_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TMutex*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_128_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMutex*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_128_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMutex*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_128_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMutex*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_128_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TMutex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_128_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TMutex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_128_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TMutex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_128_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TMutex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Thread_128_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TMutex *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TMutex(*(TMutex*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TMutex);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMutex G__TTMutex;
static int G__G__Thread_128_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TMutex *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TMutex *)((G__getstructoffset())+sizeof(TMutex)*i);
   else  delete (TMutex *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_128_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TMutex *dest = (TMutex*)(G__getstructoffset());
   *dest = (*(TMutex*)libp->para[0].ref);
   const TMutex& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TCondition */
static int G__G__Thread_129_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TCondition *p=NULL;
   switch(libp->paran) {
   case 1:
      p = new TCondition((TMutex*)G__int(libp->para[0]));
      break;
   case 0:
   if(G__getaryconstruct()) p=new TCondition[G__getaryconstruct()];
   else                    p=new TCondition;
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TCondition);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_129_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TCondition*)(G__getstructoffset()))->GetMutex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_129_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TCondition*)(G__getstructoffset()))->Wait());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_129_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TCondition*)(G__getstructoffset()))->TimedWait((ULong_t)G__int(libp->para[0]),(ULong_t)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_129_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TCondition*)(G__getstructoffset()))->TimedWaitRelative((ULong_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_129_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TCondition*)(G__getstructoffset()))->Signal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_129_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TCondition*)(G__getstructoffset()))->Broadcast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_129_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TCondition::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_129_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TCondition::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_129_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TCondition::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_129_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TCondition::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_129_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TCondition*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_129_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TCondition*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_129_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TCondition*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_129_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TCondition*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_129_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TCondition::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_129_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TCondition::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_129_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TCondition::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_129_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TCondition::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Thread_129_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TCondition *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TCondition(*(TCondition*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TCondition);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TCondition G__TTCondition;
static int G__G__Thread_129_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TCondition *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TCondition *)((G__getstructoffset())+sizeof(TCondition)*i);
   else  delete (TCondition *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_129_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TCondition *dest = (TCondition*)(G__getstructoffset());
   *dest = (*(TCondition*)libp->para[0].ref);
   const TCondition& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TThread */
static int G__G__Thread_130_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TThread *p=NULL;
   switch(libp->paran) {
   case 3:
      p = new TThread(
(TThread::VoidRtnFunc_t)G__int(libp->para[0]),(void*)G__int(libp->para[1])
,(TThread::EPriority)G__int(libp->para[2]));
      break;
   case 2:
      p = new TThread((TThread::VoidRtnFunc_t)G__int(libp->para[0]),(void*)G__int(libp->para[1]));
      break;
   case 1:
      p = new TThread((TThread::VoidRtnFunc_t)G__int(libp->para[0]));
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TThread);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TThread *p=NULL;
   switch(libp->paran) {
   case 4:
      p = new TThread(
(const char*)G__int(libp->para[0]),(TThread::VoidRtnFunc_t)G__int(libp->para[1])
,(void*)G__int(libp->para[2]),(TThread::EPriority)G__int(libp->para[3]));
      break;
   case 3:
      p = new TThread(
(const char*)G__int(libp->para[0]),(TThread::VoidRtnFunc_t)G__int(libp->para[1])
,(void*)G__int(libp->para[2]));
      break;
   case 2:
      p = new TThread((const char*)G__int(libp->para[0]),(TThread::VoidRtnFunc_t)G__int(libp->para[1]));
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TThread);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TThread *p=NULL;
   switch(libp->paran) {
   case 1:
      p = new TThread((Int_t)G__int(libp->para[0]));
      break;
   case 0:
   if(G__getaryconstruct()) p=new TThread[G__getaryconstruct()];
   else                    p=new TThread;
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TThread);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TThread*)(G__getstructoffset()))->Kill());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__letint(result7,105,(long)((TThread*)(G__getstructoffset()))->Run((void*)G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7,105,(long)((TThread*)(G__getstructoffset()))->Run());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TThread*)(G__getstructoffset()))->SetPriority((TThread::EPriority)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TThread*)(G__getstructoffset()))->Delete((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TThread*)(G__getstructoffset()))->Delete();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TThread*)(G__getstructoffset()))->GetPriority());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TThread*)(G__getstructoffset()))->GetState());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,108,(long)((const TThread*)(G__getstructoffset()))->GetId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TThread::Ps();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TThread::ps();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__letint(result7,108,(long)((TThread*)(G__getstructoffset()))->Join((void**)G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7,108,(long)((TThread*)(G__getstructoffset()))->Join());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__letint(result7,108,(long)TThread::Join((Long_t)G__int(libp->para[0]),(void**)G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7,108,(long)TThread::Join((Long_t)G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__letint(result7,105,(long)TThread::Exit((void*)G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7,105,(long)TThread::Exit());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThread::Exists());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TThread::GetThread((Long_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TThread::GetThread((const char*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThread::Lock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThread::TryLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThread::UnLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_0_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TThread::Self());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_1_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,108,(long)TThread::SelfId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_2_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__letint(result7,105,(long)TThread::Sleep((ULong_t)G__int(libp->para[0]),(ULong_t)G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7,105,(long)TThread::Sleep((ULong_t)G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_3_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThread::GetTime((ULong_t*)G__int(libp->para[0]),(ULong_t*)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_4_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThread::Delete((TThread*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_5_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,89,(long)TThread::Tsd((void*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
   result7->obj.reftype.reftype=2;
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_6_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThread::SetCancelOn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_7_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThread::SetCancelOff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_8_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThread::SetCancelAsynchronous());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_9_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThread::SetCancelDeferred());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_0_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThread::CancelPoint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_1_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThread::Kill((Long_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_2_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThread::Kill((const char*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_3_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__letint(result7,105,(long)TThread::CleanUpPush((void*)G__int(libp->para[0]),(void*)G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7,105,(long)TThread::CleanUpPush((void*)G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_4_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__letint(result7,105,(long)TThread::CleanUpPop((Int_t)G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7,105,(long)TThread::CleanUpPop());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_5_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThread::CleanUp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_6_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
  G__va_arg_buf G__va_arg_bufobj;
  G__va_arg_put(&G__va_arg_bufobj,libp,1);
      G__setnull(result7);
      TThread::Printf((const char*)G__int(libp->para[0]),G__va_arg_bufobj);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_7_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TThread::XAction();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_8_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TThread::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_9_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TThread::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_0_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TThread::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_1_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TThread::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_2_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TThread*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_3_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TThread*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_4_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TThread*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_5_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TThread*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_6_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TThread::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_7_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThread::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_8_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TThread::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_130_9_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThread::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Thread_130_0_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TThread *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TThread(*(TThread*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TThread);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TThread G__TTThread;
static int G__G__Thread_130_1_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TThread *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TThread *)((G__getstructoffset())+sizeof(TThread)*i);
   else  delete (TThread *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_130_2_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TThread *dest = (TThread*)(G__getstructoffset());
   *dest = (*(TThread*)libp->para[0].ref);
   const TThread& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TThreadImp */
static int G__G__Thread_203_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TThreadImp*)(G__getstructoffset()))->Join((TThread*)G__int(libp->para[0]),(void**)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,108,(long)((TThreadImp*)(G__getstructoffset()))->SelfId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TThreadImp*)(G__getstructoffset()))->Run((TThread*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TThreadImp*)(G__getstructoffset()))->Kill((TThread*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TThreadImp*)(G__getstructoffset()))->SetCancelOff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TThreadImp*)(G__getstructoffset()))->SetCancelOn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TThreadImp*)(G__getstructoffset()))->SetCancelAsynchronous());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TThreadImp*)(G__getstructoffset()))->SetCancelDeferred());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TThreadImp*)(G__getstructoffset()))->CancelPoint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TThreadImp*)(G__getstructoffset()))->CleanUpPush((void**)G__int(libp->para[0]),(void*)G__int(libp->para[1])
,(void*)G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TThreadImp*)(G__getstructoffset()))->CleanUpPop((void**)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TThreadImp*)(G__getstructoffset()))->CleanUp((void**)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TThreadImp*)(G__getstructoffset()))->Exit((void*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TThreadImp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TThreadImp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TThreadImp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TThreadImp::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TThreadImp*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TThreadImp*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TThreadImp*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TThreadImp*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TThreadImp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThreadImp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TThreadImp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_203_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThreadImp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TThreadImp G__TTThreadImp;
static int G__G__Thread_203_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TThreadImp *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TThreadImp *)((G__getstructoffset())+sizeof(TThreadImp)*i);
   else  delete (TThreadImp *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_203_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TThreadImp *dest = (TThreadImp*)(G__getstructoffset());
   *dest = (*(TThreadImp*)libp->para[0].ref);
   const TThreadImp& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TPosixThread */
static int G__G__Thread_204_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TPosixThread *p=NULL;
   if(G__getaryconstruct()) p=new TPosixThread[G__getaryconstruct()];
   else                    p=new TPosixThread;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TPosixThread*)(G__getstructoffset()))->Join((TThread*)G__int(libp->para[0]),(void**)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,108,(long)((TPosixThread*)(G__getstructoffset()))->SelfId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TPosixThread*)(G__getstructoffset()))->Run((TThread*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TPosixThread*)(G__getstructoffset()))->Kill((TThread*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TPosixThread*)(G__getstructoffset()))->SetCancelOff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TPosixThread*)(G__getstructoffset()))->SetCancelOn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TPosixThread*)(G__getstructoffset()))->SetCancelAsynchronous());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TPosixThread*)(G__getstructoffset()))->SetCancelDeferred());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TPosixThread*)(G__getstructoffset()))->CancelPoint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TPosixThread*)(G__getstructoffset()))->CleanUpPush((void**)G__int(libp->para[0]),(void*)G__int(libp->para[1])
,(void*)G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TPosixThread*)(G__getstructoffset()))->CleanUpPop((void**)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TPosixThread*)(G__getstructoffset()))->CleanUp((void**)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TPosixThread*)(G__getstructoffset()))->Exit((void*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TPosixThread::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TPosixThread::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TPosixThread::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TPosixThread::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TPosixThread*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TPosixThread*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TPosixThread*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TPosixThread*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TPosixThread::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TPosixThread::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TPosixThread::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_204_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TPosixThread::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Thread_204_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TPosixThread *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TPosixThread(*(TPosixThread*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TPosixThread G__TTPosixThread;
static int G__G__Thread_204_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TPosixThread *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TPosixThread *)((G__getstructoffset())+sizeof(TPosixThread)*i);
   else  delete (TPosixThread *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_204_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TPosixThread *dest = (TPosixThread*)(G__getstructoffset());
   *dest = (*(TPosixThread*)libp->para[0].ref);
   const TPosixThread& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMutexImp */
static int G__G__Thread_210_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TMutexImp*)(G__getstructoffset()))->Lock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_210_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TMutexImp*)(G__getstructoffset()))->TryLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_210_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TMutexImp*)(G__getstructoffset()))->UnLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_210_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TMutexImp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_210_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TMutexImp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_210_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TMutexImp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_210_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TMutexImp::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_210_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TMutexImp*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_210_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMutexImp*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_210_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMutexImp*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_210_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMutexImp*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_210_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TMutexImp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_210_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TMutexImp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_210_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TMutexImp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_210_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TMutexImp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMutexImp G__TTMutexImp;
static int G__G__Thread_210_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TMutexImp *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TMutexImp *)((G__getstructoffset())+sizeof(TMutexImp)*i);
   else  delete (TMutexImp *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_210_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TMutexImp *dest = (TMutexImp*)(G__getstructoffset());
   *dest = (*(TMutexImp*)libp->para[0].ref);
   const TMutexImp& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TRWLock */
static int G__G__Thread_211_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TRWLock *p=NULL;
   if(G__getaryconstruct()) p=new TRWLock[G__getaryconstruct()];
   else                    p=new TRWLock;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TRWLock);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_211_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TRWLock*)(G__getstructoffset()))->ReadLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_211_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TRWLock*)(G__getstructoffset()))->ReadUnLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_211_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TRWLock*)(G__getstructoffset()))->WriteLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_211_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TRWLock*)(G__getstructoffset()))->WriteUnLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_211_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TRWLock::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_211_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TRWLock::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_211_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TRWLock::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_211_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TRWLock::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_211_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TRWLock*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_211_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TRWLock*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_211_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TRWLock*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_211_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TRWLock*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_211_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TRWLock::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_211_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TRWLock::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_211_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TRWLock::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_211_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TRWLock::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Thread_211_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TRWLock *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TRWLock(*(TRWLock*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TRWLock);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TRWLock G__TTRWLock;
static int G__G__Thread_211_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TRWLock *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TRWLock *)((G__getstructoffset())+sizeof(TRWLock)*i);
   else  delete (TRWLock *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_211_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TRWLock *dest = (TRWLock*)(G__getstructoffset());
   *dest = (*(TRWLock*)libp->para[0].ref);
   const TRWLock& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSemaphore */
static int G__G__Thread_212_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TSemaphore *p=NULL;
   switch(libp->paran) {
   case 1:
      p = new TSemaphore((UInt_t)G__int(libp->para[0]));
      break;
   case 0:
   if(G__getaryconstruct()) p=new TSemaphore[G__getaryconstruct()];
   else                    p=new TSemaphore;
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_212_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TSemaphore*)(G__getstructoffset()))->Wait());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_212_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TSemaphore*)(G__getstructoffset()))->TryWait());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_212_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TSemaphore*)(G__getstructoffset()))->Post());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_212_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TSemaphore::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_212_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TSemaphore::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_212_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TSemaphore::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_212_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TSemaphore::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_212_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TSemaphore*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_212_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSemaphore*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_212_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSemaphore*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_212_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSemaphore*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_212_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TSemaphore::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_212_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TSemaphore::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_212_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TSemaphore::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_212_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TSemaphore::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Thread_212_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TSemaphore *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TSemaphore(*(TSemaphore*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSemaphore G__TTSemaphore;
static int G__G__Thread_212_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TSemaphore *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TSemaphore *)((G__getstructoffset())+sizeof(TSemaphore)*i);
   else  delete (TSemaphore *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_212_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TSemaphore *dest = (TSemaphore*)(G__getstructoffset());
   *dest = (*(TSemaphore*)libp->para[0].ref);
   const TSemaphore& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TThreadFactory */
static int G__G__Thread_213_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TThreadFactory*)(G__getstructoffset()))->CreateMutexImp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_213_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TThreadFactory*)(G__getstructoffset()))->CreateConditionImp((TMutexImp*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_213_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TThreadFactory*)(G__getstructoffset()))->CreateThreadImp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_213_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TThreadFactory::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_213_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TThreadFactory::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_213_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TThreadFactory::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_213_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TThreadFactory::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_213_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TThreadFactory*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_213_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TThreadFactory*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_213_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TThreadFactory*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_213_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TThreadFactory*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_213_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TThreadFactory::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_213_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThreadFactory::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_213_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TThreadFactory::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_213_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TThreadFactory::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TThreadFactory G__TTThreadFactory;
static int G__G__Thread_213_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TThreadFactory *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TThreadFactory *)((G__getstructoffset())+sizeof(TThreadFactory)*i);
   else  delete (TThreadFactory *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_213_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TThreadFactory *dest = (TThreadFactory*)(G__getstructoffset());
   *dest = (*(TThreadFactory*)libp->para[0].ref);
   const TThreadFactory& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TPosixMutex */
static int G__G__Thread_215_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TPosixMutex *p=NULL;
   if(G__getaryconstruct()) p=new TPosixMutex[G__getaryconstruct()];
   else                    p=new TPosixMutex;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_215_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TPosixMutex*)(G__getstructoffset()))->Lock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_215_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TPosixMutex*)(G__getstructoffset()))->UnLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_215_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TPosixMutex*)(G__getstructoffset()))->TryLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_215_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TPosixMutex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_215_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TPosixMutex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_215_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TPosixMutex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_215_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TPosixMutex::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_215_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TPosixMutex*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_215_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TPosixMutex*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_215_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TPosixMutex*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_215_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TPosixMutex*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_215_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TPosixMutex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_215_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TPosixMutex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_215_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TPosixMutex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_215_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TPosixMutex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Thread_215_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TPosixMutex *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TPosixMutex(*(TPosixMutex*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TPosixMutex G__TTPosixMutex;
static int G__G__Thread_215_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TPosixMutex *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TPosixMutex *)((G__getstructoffset())+sizeof(TPosixMutex)*i);
   else  delete (TPosixMutex *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_215_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TPosixMutex *dest = (TPosixMutex*)(G__getstructoffset());
   *dest = (*(TPosixMutex*)libp->para[0].ref);
   const TPosixMutex& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TPosixCondition */
static int G__G__Thread_216_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TPosixCondition *p=NULL;
      p = new TPosixCondition((TMutexImp*)G__int(libp->para[0]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_216_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TPosixCondition*)(G__getstructoffset()))->Wait());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_216_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__letint(result7,105,(long)((TPosixCondition*)(G__getstructoffset()))->TimedWait((ULong_t)G__int(libp->para[0]),(ULong_t)G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7,105,(long)((TPosixCondition*)(G__getstructoffset()))->TimedWait((ULong_t)G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_216_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TPosixCondition*)(G__getstructoffset()))->Signal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_216_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TPosixCondition*)(G__getstructoffset()))->Broadcast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_216_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TPosixCondition::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_216_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TPosixCondition::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_216_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TPosixCondition::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_216_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TPosixCondition::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_216_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TPosixCondition*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_216_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TPosixCondition*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_216_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TPosixCondition*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_216_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TPosixCondition*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_216_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TPosixCondition::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_216_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TPosixCondition::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_216_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TPosixCondition::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_216_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TPosixCondition::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Thread_216_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TPosixCondition *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TPosixCondition(*(TPosixCondition*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TPosixCondition G__TTPosixCondition;
static int G__G__Thread_216_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TPosixCondition *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TPosixCondition *)((G__getstructoffset())+sizeof(TPosixCondition)*i);
   else  delete (TPosixCondition *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_216_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TPosixCondition *dest = (TPosixCondition*)(G__getstructoffset());
   *dest = (*(TPosixCondition*)libp->para[0].ref);
   const TPosixCondition& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TPosixThreadFactory */
static int G__G__Thread_219_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TPosixThreadFactory *p=NULL;
   switch(libp->paran) {
   case 2:
      p = new TPosixThreadFactory((const char*)G__int(libp->para[0]),(const char*)G__int(libp->para[1]));
      break;
   case 1:
      p = new TPosixThreadFactory((const char*)G__int(libp->para[0]));
      break;
   case 0:
   if(G__getaryconstruct()) p=new TPosixThreadFactory[G__getaryconstruct()];
   else                    p=new TPosixThreadFactory;
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_219_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TPosixThreadFactory*)(G__getstructoffset()))->CreateMutexImp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_219_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TPosixThreadFactory*)(G__getstructoffset()))->CreateConditionImp((TMutexImp*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_219_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TPosixThreadFactory*)(G__getstructoffset()))->CreateThreadImp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_219_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TPosixThreadFactory::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_219_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TPosixThreadFactory::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_219_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TPosixThreadFactory::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_219_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TPosixThreadFactory::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_219_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TPosixThreadFactory*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_219_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TPosixThreadFactory*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_219_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TPosixThreadFactory*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_219_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TPosixThreadFactory*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_219_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TPosixThreadFactory::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_219_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TPosixThreadFactory::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_219_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TPosixThreadFactory::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Thread_219_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TPosixThreadFactory::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__Thread_219_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TPosixThreadFactory *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TPosixThreadFactory(*(TPosixThreadFactory*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TPosixThreadFactory G__TTPosixThreadFactory;
static int G__G__Thread_219_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TPosixThreadFactory *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TPosixThreadFactory *)((G__getstructoffset())+sizeof(TPosixThreadFactory)*i);
   else  delete (TPosixThreadFactory *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Thread_219_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TPosixThreadFactory *dest = (TPosixThreadFactory*)(G__getstructoffset());
   *dest = (*(TPosixThreadFactory*)libp->para[0].ref);
   const TPosixThreadFactory& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TConditionImp */

/* TMutex */

/* TCondition */

/* TThread */

/* TThreadImp */

/* TPosixThread */

/* TMutexImp */

/* TRWLock */

/* TSemaphore */

/* TThreadFactory */

/* TPosixMutex */

/* TPosixCondition */

/* TPosixThreadFactory */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__Thread {
 public:
  G__Sizep2memfuncG__Thread() {p=&G__Sizep2memfuncG__Thread::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__Thread::*p)();
};

size_t G__get_sizep2memfuncG__Thread()
{
  G__Sizep2memfuncG__Thread a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__Thread() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp))) {
     TConditionImp *G__Lderived;
     G__Lderived=(TConditionImp*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TMutex))) {
     TMutex *G__Lderived;
     G__Lderived=(TMutex*)0x1000;
     {
       TVirtualMutex *G__Lpbase=(TVirtualMutex*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TMutex),G__get_linked_tagnum(&G__G__ThreadLN_TVirtualMutex),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TMutex),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TCondition))) {
     TCondition *G__Lderived;
     G__Lderived=(TCondition*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TCondition),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TThread))) {
     TThread *G__Lderived;
     G__Lderived=(TThread*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThread),G__get_linked_tagnum(&G__G__ThreadLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThread),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TVirtualMutex))) {
     TVirtualMutex *G__Lderived;
     G__Lderived=(TVirtualMutex*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TVirtualMutex),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp))) {
     TThreadImp *G__Lderived;
     G__Lderived=(TThreadImp*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread))) {
     TPosixThread *G__Lderived;
     G__Lderived=(TPosixThread*)0x1000;
     {
       TThreadImp *G__Lpbase=(TThreadImp*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread),G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp))) {
     TMutexImp *G__Lderived;
     G__Lderived=(TMutexImp*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TRWLock))) {
     TRWLock *G__Lderived;
     G__Lderived=(TRWLock*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TRWLock),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore))) {
     TSemaphore *G__Lderived;
     G__Lderived=(TSemaphore*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TThreadFactory))) {
     TThreadFactory *G__Lderived;
     G__Lderived=(TThreadFactory*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThreadFactory),G__get_linked_tagnum(&G__G__ThreadLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThreadFactory),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex))) {
     TPosixMutex *G__Lderived;
     G__Lderived=(TPosixMutex*)0x1000;
     {
       TMutexImp *G__Lpbase=(TMutexImp*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex),G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition))) {
     TPosixCondition *G__Lderived;
     G__Lderived=(TPosixCondition*)0x1000;
     {
       TConditionImp *G__Lpbase=(TConditionImp*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition),G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory))) {
     TPosixThreadFactory *G__Lderived;
     G__Lderived=(TPosixThreadFactory*)0x1000;
     {
       TThreadFactory *G__Lpbase=(TThreadFactory*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory),G__get_linked_tagnum(&G__G__ThreadLN_TThreadFactory),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory),G__get_linked_tagnum(&G__G__ThreadLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory),G__get_linked_tagnum(&G__G__ThreadLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__Thread() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,
-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,
-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Long_t",108,-1,0,
-1);
   G__setnewtype(-1,"Signed long integer 8 bytes (long)",0);
   G__search_typename2("ULong_t",107,-1,0,
-1);
   G__setnewtype(-1,"Unsigned long integer 8 bytes (unsigned long)",0);
   G__search_typename2("Bool_t",103,-1,0,
-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,
-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,
-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<TStreamerInfo*>",117,G__get_linked_tagnum(&G__G__ThreadLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ThreadLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ThreadLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ThreadLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ThreadLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__G__ThreadLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ThreadLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ThreadLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ThreadLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ThreadLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("vector<unsigned int>",117,G__get_linked_tagnum(&G__G__ThreadLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__G__ThreadLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__ThreadLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ThreadLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__ThreadLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__ThreadLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("VoidRtnFunc_t",89,-1,0,
G__get_linked_tagnum(&G__G__ThreadLN_TThread));
   G__setnewtype(-1,"void *(*VoidRtnFunc_t)(void *);",0);
   G__search_typename2("VoidFunc_t",89,-1,0,
G__get_linked_tagnum(&G__G__ThreadLN_TThread));
   G__setnewtype(-1,"void  (*VoidFunc_t)(void *);",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TConditionImp */
static void G__setup_memvarTConditionImp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp));
   { TConditionImp *p; p=(TConditionImp*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMutex */
static void G__setup_memvarTMutex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TMutex));
   { TMutex *p; p=(TMutex*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp),-1,-1,4,"fMutexImp=",0,"pointer to mutex implementation");
   G__memvar_setup((void*)NULL,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"fId=",0,"id of thread which locked mutex");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRef=",0,"reference count in case of recursive locking by same thread");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TCondition */
static void G__setup_memvarTCondition(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TCondition));
   { TCondition *p; p=(TCondition*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp),-1,-1,4,"fConditionImp=",0,"pointer to condition variable implementation");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TMutex),-1,-1,4,"fMutex=",0,"mutex used around Wait() and TimedWait()");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPrivateMutex=",0,"is fMutex our private mutex");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TThread */
static void G__setup_memvarTThread(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThread));
   { TThread *p; p=(TThread*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEPriority),-1,-2,1,"kLowPriority=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEPriority),-1,-2,1,"kNormalPriority=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEPriority),-1,-2,1,"kHighPriority=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-2,1,"kInvalidState=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-2,1,"kNewState=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-2,1,"kRunningState=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-2,1,"kTerminatedState=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-2,1,"kFinishedState=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-2,1,"kCancelingState=5",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-2,1,"kCanceledState=6",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-2,1,"kDeletingState=7",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TThread),-1,-1,4,"fNext=",0,"pointer to next thread");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TThread),-1,-1,4,"fPrev=",0,"pointer to prev thread");
   G__memvar_setup((void*)NULL,85,2,0,G__get_linked_tagnum(&G__G__ThreadLN_TThread),-1,-1,4,"fHolder=",0,"pointer to holder of this (delete only)");
   G__memvar_setup((void*)NULL,105,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEPriority),-1,-1,4,"fPriority=",0,"thread priority");
   G__memvar_setup((void*)NULL,105,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-1,4,"fState=",0,"thread state");
   G__memvar_setup((void*)NULL,105,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,-1,4,"fStateComing=",0,"coming thread state");
   G__memvar_setup((void*)NULL,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"fId=",0,"thread id");
   G__memvar_setup((void*)NULL,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"fHandle=",0,"Win32 thread handle");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDetached=",0,"kTRUE if thread is Detached");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNamed=",0,"kTRUE if thread is Named");
   G__memvar_setup((void*)NULL,89,0,0,-1,G__defined_typename("VoidRtnFunc_t"),-1,4,"fFcnRetn=",0,"void* start function of thread");
   G__memvar_setup((void*)NULL,89,0,0,-1,G__defined_typename("VoidFunc_t"),-1,4,"fFcnVoid=",0,"void  start function of thread");
   G__memvar_setup((void*)NULL,89,0,0,-1,-1,-1,4,"fThreadArg=",0,"thread start function arguments");
   G__memvar_setup((void*)NULL,89,0,0,-1,-1,-1,4,"fClean=",0,"support of cleanup structure");
   G__memvar_setup((void*)NULL,89,0,0,-1,-1,-1,4,"fTsd[20]=",0,"thread specific data container");
   G__memvar_setup((void*)NULL,99,0,0,-1,-1,-1,4,"fComment[100]=",0,"thread specific state comment");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp),-1,-2,4,"fgThreadImp=",0,"static pointer to thread implementation");
   G__memvar_setup((void*)NULL,67,0,0,-1,-1,-2,4,"fgXAct=",0,"Action name to do by main thread");
   G__memvar_setup((void*)NULL,89,2,0,-1,-1,-2,4,"volatilefgXArr=",0,"pointer to control array of void pointers for action");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fgXAnb=",0,"size of array above");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fgXArt=",0,"return XA flag");
   G__memvar_setup((void*)NULL,108,0,0,-1,G__defined_typename("Long_t"),-2,4,"fgMainId=",0,"thread id of main thread");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TThread),-1,-2,4,"fgMain=",0,"pointer to chain of TThread's");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TMutex),-1,-2,4,"fgMainMutex=",0,"mutex to protect chain of threads");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TMutex),-1,-2,4,"fgXActMutex=",0,"mutex to protect XAction");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TCondition),-1,-2,4,"fgXActCondi=",0,"condition for XAction");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TThreadImp */
static void G__setup_memvarTThreadImp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp));
   { TThreadImp *p; p=(TThreadImp*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TPosixThread */
static void G__setup_memvarTPosixThread(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread));
   { TPosixThread *p; p=(TPosixThread*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadCleanUp),-1,-1,4,"fCleanUp=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMutexImp */
static void G__setup_memvarTMutexImp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp));
   { TMutexImp *p; p=(TMutexImp*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TRWLock */
static void G__setup_memvarTRWLock(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TRWLock));
   { TRWLock *p; p=(TRWLock*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fReaders=",0,"number of readers");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fWriters=",0,"number of writers");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TMutex),-1,-1,4,"fMutex=",0,"rwlock mutex");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TCondition),-1,-1,4,"fLockFree=",0,"rwlock condition variable");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSemaphore */
static void G__setup_memvarTSemaphore(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore));
   { TSemaphore *p; p=(TSemaphore*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TMutex),-1,-1,4,"fMutex=",0,"semaphare mutex");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TCondition),-1,-1,4,"fCond=",0,"semaphore condition variable");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fValue=",0,"counter");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TThreadFactory */
static void G__setup_memvarTThreadFactory(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThreadFactory));
   { TThreadFactory *p; p=(TThreadFactory*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TPosixMutex */
static void G__setup_memvarTPosixMutex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex));
   { TPosixMutex *p; p=(TPosixMutex*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__ThreadLN_pthread_mutex_t),-1,-1,4,"fMutex=",0,"the pthread mutex");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TPosixCondition */
static void G__setup_memvarTPosixCondition(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition));
   { TPosixCondition *p; p=(TPosixCondition*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__ThreadLN_pthread_cond_t),-1,-1,4,"fCond=",0,"the pthread condition variable");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex),-1,-1,4,"fMutex=",0,"mutex used around Wait() and TimedWait()");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TPosixThreadFactory */
static void G__setup_memvarTPosixThreadFactory(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory));
   { TPosixThreadFactory *p; p=(TPosixThreadFactory*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__Thread() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTConditionImp(void) {
   /* TConditionImp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp));
   G__memfunc_setup("Wait",405,G__G__Thread_127_2_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("TimedWait",904,G__G__Thread_127_3_0,105,-1,G__defined_typename("Int_t"),0,2,1,1,0,
"k - 'ULong_t' 0 - secs k - 'ULong_t' 0 0 nanoSecs",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("Signal",606,G__G__Thread_127_4_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("Broadcast",915,G__G__Thread_127_5_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("Class",502,G__G__Thread_127_6_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TConditionImp::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_127_7_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TConditionImp::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_127_8_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TConditionImp::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_127_9_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TConditionImp::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Thread_127_0_1,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Thread_127_1_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Thread_127_2_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_127_3_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_127_4_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TConditionImp::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_127_5_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TConditionImp::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_127_6_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TConditionImp::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_127_7_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TConditionImp::DeclFileLine),0);
   // automatic destructor
   G__memfunc_setup("~TConditionImp",1439,G__G__Thread_127_8_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Thread_127_9_1,(int)('u'),G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp),-1,1,1,1,1,0,"u 'TConditionImp' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMutex(void) {
   /* TMutex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TMutex));
   G__memfunc_setup("TMutex",615,G__G__Thread_128_1_0,105,G__get_linked_tagnum(&G__G__ThreadLN_TMutex),-1,0,1,1,1,0,"g - 'Bool_t' 0 kFALSE recursive",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Lock",393,G__G__Thread_128_2_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("TryLock",712,G__G__Thread_128_3_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("UnLock",588,G__G__Thread_128_4_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("CleanUp",680,G__G__Thread_128_5_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Class",502,G__G__Thread_128_6_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TMutex::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_128_7_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TMutex::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_128_8_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TMutex::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_128_9_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TMutex::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Thread_128_0_1,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Thread_128_1_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Thread_128_2_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_128_3_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_128_4_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TMutex::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_128_5_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TMutex::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_128_6_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TMutex::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_128_7_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TMutex::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TMutex",615,G__G__Thread_128_8_1,(int)('i'),G__get_linked_tagnum(&G__G__ThreadLN_TMutex),-1,0,1,1,1,0,"u 'TMutex' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TMutex",741,G__G__Thread_128_9_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Thread_128_0_2,(int)('u'),G__get_linked_tagnum(&G__G__ThreadLN_TMutex),-1,1,1,1,1,0,"u 'TMutex' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTCondition(void) {
   /* TCondition */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TCondition));
   G__memfunc_setup("TCondition",1019,G__G__Thread_129_1_0,105,G__get_linked_tagnum(&G__G__ThreadLN_TCondition),-1,0,1,1,1,0,"U 'TMutex' - 0 0 m",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetMutex",819,G__G__Thread_129_2_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TMutex),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Wait",405,G__G__Thread_129_3_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TimedWait",904,G__G__Thread_129_4_0,105,-1,G__defined_typename("Int_t"),0,2,1,1,0,
"k - 'ULong_t' 0 - secs k - 'ULong_t' 0 - nanoSecs",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TimedWaitRelative",1732,G__G__Thread_129_5_0,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"k - 'ULong_t' 0 - ms",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Signal",606,G__G__Thread_129_6_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Broadcast",915,G__G__Thread_129_7_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__Thread_129_8_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TCondition::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_129_9_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TCondition::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_129_0_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TCondition::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_129_1_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TCondition::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Thread_129_2_1,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Thread_129_3_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Thread_129_4_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_129_5_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_129_6_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TCondition::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_129_7_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TCondition::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_129_8_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TCondition::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_129_9_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TCondition::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TCondition",1019,G__G__Thread_129_0_2,(int)('i'),G__get_linked_tagnum(&G__G__ThreadLN_TCondition),-1,0,1,1,1,0,"u 'TCondition' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TCondition",1145,G__G__Thread_129_1_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Thread_129_2_2,(int)('u'),G__get_linked_tagnum(&G__G__ThreadLN_TCondition),-1,1,1,1,1,0,"u 'TCondition' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTThread(void) {
   /* TThread */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThread));
   G__memfunc_setup("Constructor",1190,(G__InterfaceMethod)NULL,121,-1,-1,0,0,1,4,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetComment",1023,(G__InterfaceMethod)NULL,121,-1,-1,0,1,1,4,0,"C - - 10 0 txt",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DoError",701,(G__InterfaceMethod)NULL,121,-1,-1,0,4,1,4,8,
"i - 'Int_t' 0 - level C - - 10 - location "
"C - - 10 - fmt u 'va_list' - 0 - va",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ErrorHandler",1224,(G__InterfaceMethod)NULL,121,-1,-1,0,4,1,4,8,
"i - - 0 - level C - - 10 - location "
"C - - 10 - fmt u 'va_list' - 0 - ap",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod)NULL,121,-1,-1,0,0,3,4,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Function",838,(G__InterfaceMethod)NULL,89,-1,-1,0,1,3,4,0,"Y - - 0 - ptr",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("XARequest",898,(G__InterfaceMethod)NULL,105,-1,G__defined_typename("Int_t"),0,4,3,4,0,
"C - - 10 - xact i - 'Int_t' 0 - nb "
"Y - - 2 - ar I - 'Int_t' 0 - iret",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("AfterCancel",1080,(G__InterfaceMethod)NULL,121,-1,-1,0,1,3,4,0,"U 'TThread' - 0 - th",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TThread",684,G__G__Thread_130_9_0,105,G__get_linked_tagnum(&G__G__ThreadLN_TThread),-1,0,3,1,1,0,
"Y - 'TThread::VoidRtnFunc_t' 0 - fn Y - - 0 0 arg "
"i 'TThread::EPriority' - 0 kNormalPriority pri",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TThread",684,G__G__Thread_130_0_1,105,G__get_linked_tagnum(&G__G__ThreadLN_TThread),-1,0,4,1,1,0,
"C - - 10 - thname Y - 'TThread::VoidRtnFunc_t' 0 - fn "
"Y - - 0 0 arg i 'TThread::EPriority' - 0 kNormalPriority pri",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TThread",684,G__G__Thread_130_1_1,105,G__get_linked_tagnum(&G__G__ThreadLN_TThread),-1,0,1,1,1,0,"i - 'Int_t' 0 0 id",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Kill",396,G__G__Thread_130_2_1,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Run",309,G__G__Thread_130_3_1,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"Y - - 0 0 arg",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetPriority",1166,G__G__Thread_130_4_1,121,-1,-1,0,1,1,1,0,"i 'TThread::EPriority' - 0 - pri",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Delete",595,G__G__Thread_130_5_1,121,-1,-1,0,1,1,1,0,"C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetPriority",1154,G__G__Thread_130_6_1,105,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEPriority),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetState",801,G__G__Thread_130_7_1,105,G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetId",461,G__G__Thread_130_8_1,108,-1,G__defined_typename("Long_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Ps",195,G__G__Thread_130_9_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TThread::Ps),0);
   G__memfunc_setup("ps",227,G__G__Thread_130_0_2,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TThread::ps),0);
   G__memfunc_setup("Join",400,G__G__Thread_130_1_2,108,-1,G__defined_typename("Long_t"),0,1,1,1,0,"Y - - 2 0 ret",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Join",400,G__G__Thread_130_2_2,108,-1,G__defined_typename("Long_t"),0,2,3,1,0,
"l - 'Long_t' 0 - id Y - - 2 0 ret",(char*)NULL,(void*)(Long_t (*)(Long_t,void**))(&TThread::Join),0);
   G__memfunc_setup("Exit",410,G__G__Thread_130_3_2,105,-1,G__defined_typename("Int_t"),0,1,3,1,0,"Y - - 0 0 ret",(char*)NULL,(void*)(Int_t (*)(void*))(&TThread::Exit),0);
   G__memfunc_setup("Exists",640,G__G__Thread_130_4_2,105,-1,G__defined_typename("Int_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Int_t (*)())(&TThread::Exists),0);
   G__memfunc_setup("GetThread",888,G__G__Thread_130_5_2,85,G__get_linked_tagnum(&G__G__ThreadLN_TThread),-1,0,1,3,1,0,"l - 'Long_t' 0 - id",(char*)NULL,(void*)(TThread* (*)(Long_t))(&TThread::GetThread),0);
   G__memfunc_setup("GetThread",888,G__G__Thread_130_6_2,85,G__get_linked_tagnum(&G__G__ThreadLN_TThread),-1,0,1,3,1,0,"C - - 10 - name",(char*)NULL,(void*)(TThread* (*)(const char*))(&TThread::GetThread),0);
   G__memfunc_setup("Lock",393,G__G__Thread_130_7_2,105,-1,G__defined_typename("Int_t"),0,0,3,1,0,"","User's lock of main mutex",(void*)(Int_t (*)())(&TThread::Lock),0);
   G__memfunc_setup("TryLock",712,G__G__Thread_130_8_2,105,-1,G__defined_typename("Int_t"),0,0,3,1,0,"","User's try lock of main mutex",(void*)(Int_t (*)())(&TThread::TryLock),0);
   G__memfunc_setup("UnLock",588,G__G__Thread_130_9_2,105,-1,G__defined_typename("Int_t"),0,0,3,1,0,"","User's unlock of main mutex",(void*)(Int_t (*)())(&TThread::UnLock),0);
   G__memfunc_setup("Self",394,G__G__Thread_130_0_3,85,G__get_linked_tagnum(&G__G__ThreadLN_TThread),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TThread* (*)())(&TThread::Self),0);
   G__memfunc_setup("SelfId",567,G__G__Thread_130_1_3,108,-1,G__defined_typename("Long_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Long_t (*)())(&TThread::SelfId),0);
   G__memfunc_setup("Sleep",505,G__G__Thread_130_2_3,105,-1,G__defined_typename("Int_t"),0,2,3,1,0,
"k - 'ULong_t' 0 - secs k - 'ULong_t' 0 0 nanos",(char*)NULL,(void*)(Int_t (*)(ULong_t,ULong_t))(&TThread::Sleep),0);
   G__memfunc_setup("GetTime",687,G__G__Thread_130_3_3,105,-1,G__defined_typename("Int_t"),0,2,3,1,0,
"K - 'ULong_t' 0 - absSec K - 'ULong_t' 0 - absNanoSec",(char*)NULL,(void*)(Int_t (*)(ULong_t*,ULong_t*))(&TThread::GetTime),0);
   G__memfunc_setup("Delete",595,G__G__Thread_130_4_3,105,-1,G__defined_typename("Int_t"),0,1,3,1,0,"U 'TThread' - 0 - th",(char*)NULL,(void*)(Int_t (*)(TThread*))(&TThread::Delete),0);
   G__memfunc_setup("Tsd",299,G__G__Thread_130_5_3,89,-1,-1,2,2,3,1,0,
"Y - - 0 - dflt i - 'Int_t' 0 - k",(char*)NULL,(void*)(void** (*)(void*,Int_t))(&TThread::Tsd),0);
   G__memfunc_setup("SetCancelOn",1071,G__G__Thread_130_6_3,105,-1,G__defined_typename("Int_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Int_t (*)())(&TThread::SetCancelOn),0);
   G__memfunc_setup("SetCancelOff",1165,G__G__Thread_130_7_3,105,-1,G__defined_typename("Int_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Int_t (*)())(&TThread::SetCancelOff),0);
   G__memfunc_setup("SetCancelAsynchronous",2174,G__G__Thread_130_8_3,105,-1,G__defined_typename("Int_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Int_t (*)())(&TThread::SetCancelAsynchronous),0);
   G__memfunc_setup("SetCancelDeferred",1683,G__G__Thread_130_9_3,105,-1,G__defined_typename("Int_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Int_t (*)())(&TThread::SetCancelDeferred),0);
   G__memfunc_setup("CancelPoint",1104,G__G__Thread_130_0_4,105,-1,G__defined_typename("Int_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Int_t (*)())(&TThread::CancelPoint),0);
   G__memfunc_setup("Kill",396,G__G__Thread_130_1_4,105,-1,G__defined_typename("Int_t"),0,1,3,1,0,"l - 'Long_t' 0 - id",(char*)NULL,(void*)(Int_t (*)(Long_t))(&TThread::Kill),0);
   G__memfunc_setup("Kill",396,G__G__Thread_130_2_4,105,-1,G__defined_typename("Int_t"),0,1,3,1,0,"C - - 10 - name",(char*)NULL,(void*)(Int_t (*)(const char*))(&TThread::Kill),0);
   G__memfunc_setup("CleanUpPush",1096,G__G__Thread_130_3_4,105,-1,G__defined_typename("Int_t"),0,2,3,1,0,
"Y - - 0 - free Y - - 0 0 arg",(char*)NULL,(void*)(Int_t (*)(void*,void*))(&TThread::CleanUpPush),0);
   G__memfunc_setup("CleanUpPop",983,G__G__Thread_130_4_4,105,-1,G__defined_typename("Int_t"),0,1,3,1,0,"i - 'Int_t' 0 0 exe",(char*)NULL,(void*)(Int_t (*)(Int_t))(&TThread::CleanUpPop),0);
   G__memfunc_setup("CleanUp",680,G__G__Thread_130_5_4,105,-1,G__defined_typename("Int_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Int_t (*)())(&TThread::CleanUp),0);
   G__memfunc_setup("Printf",627,G__G__Thread_130_6_4,121,-1,-1,0,1,10,1,0,"C - - 10 - fmt","format and print",(void*)(void (*)(const char*))(&TThread::Printf),0);
   G__memfunc_setup("XAction",694,G__G__Thread_130_7_4,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TThread::XAction),0);
   G__memfunc_setup("Class",502,G__G__Thread_130_8_4,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TThread::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_130_9_4,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TThread::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_130_0_5,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TThread::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_130_1_5,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TThread::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Thread_130_2_5,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Thread_130_3_5,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Thread_130_4_5,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_130_5_5,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_130_6_5,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TThread::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_130_7_5,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TThread::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_130_8_5,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TThread::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_130_9_5,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TThread::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TThread",684,G__G__Thread_130_0_6,(int)('i'),G__get_linked_tagnum(&G__G__ThreadLN_TThread),-1,0,1,1,1,0,"u 'TThread' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TThread",810,G__G__Thread_130_1_6,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Thread_130_2_6,(int)('u'),G__get_linked_tagnum(&G__G__ThreadLN_TThread),-1,1,1,1,1,0,"u 'TThread' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTThreadImp(void) {
   /* TThreadImp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp));
   G__memfunc_setup("Join",400,G__G__Thread_203_2_0,105,-1,G__defined_typename("Int_t"),0,2,1,1,0,
"U 'TThread' - 0 - th Y - - 2 - ret",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("SelfId",567,G__G__Thread_203_3_0,108,-1,G__defined_typename("Long_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("Run",309,G__G__Thread_203_4_0,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"U 'TThread' - 0 - th",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("Kill",396,G__G__Thread_203_5_0,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"U 'TThread' - 0 - th",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("SetCancelOff",1165,G__G__Thread_203_6_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("SetCancelOn",1071,G__G__Thread_203_7_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("SetCancelAsynchronous",2174,G__G__Thread_203_8_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("SetCancelDeferred",1683,G__G__Thread_203_9_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("CancelPoint",1104,G__G__Thread_203_0_1,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("CleanUpPush",1096,G__G__Thread_203_1_1,105,-1,G__defined_typename("Int_t"),0,3,1,1,0,
"Y - - 2 - main Y - - 0 - free "
"Y - - 0 - arg",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("CleanUpPop",983,G__G__Thread_203_2_1,105,-1,G__defined_typename("Int_t"),0,2,1,1,0,
"Y - - 2 - main i - 'Int_t' 0 - exe",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("CleanUp",680,G__G__Thread_203_3_1,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"Y - - 2 - main",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("Exit",410,G__G__Thread_203_4_1,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"Y - - 0 - ret",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("Class",502,G__G__Thread_203_5_1,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TThreadImp::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_203_6_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TThreadImp::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_203_7_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TThreadImp::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_203_8_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TThreadImp::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Thread_203_9_1,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Thread_203_0_2,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Thread_203_1_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_203_2_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_203_3_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TThreadImp::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_203_4_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TThreadImp::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_203_5_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TThreadImp::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_203_6_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TThreadImp::DeclFileLine),0);
   // automatic destructor
   G__memfunc_setup("~TThreadImp",1104,G__G__Thread_203_7_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Thread_203_8_2,(int)('u'),G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp),-1,1,1,1,1,0,"u 'TThreadImp' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTPosixThread(void) {
   /* TPosixThread */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread));
   G__memfunc_setup("TPosixThread",1215,G__G__Thread_204_1_0,105,G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Join",400,G__G__Thread_204_2_0,105,-1,G__defined_typename("Int_t"),0,2,1,1,0,
"U 'TThread' - 0 - th Y - - 2 - ret",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SelfId",567,G__G__Thread_204_3_0,108,-1,G__defined_typename("Long_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Run",309,G__G__Thread_204_4_0,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"U 'TThread' - 0 - th",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Kill",396,G__G__Thread_204_5_0,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"U 'TThread' - 0 - th",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SetCancelOff",1165,G__G__Thread_204_6_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SetCancelOn",1071,G__G__Thread_204_7_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SetCancelAsynchronous",2174,G__G__Thread_204_8_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SetCancelDeferred",1683,G__G__Thread_204_9_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("CancelPoint",1104,G__G__Thread_204_0_1,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("CleanUpPush",1096,G__G__Thread_204_1_1,105,-1,G__defined_typename("Int_t"),0,3,1,1,0,
"Y - - 2 - main Y - - 0 - free "
"Y - - 0 - arg",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("CleanUpPop",983,G__G__Thread_204_2_1,105,-1,G__defined_typename("Int_t"),0,2,1,1,0,
"Y - - 2 - main i - 'Int_t' 0 - exe",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("CleanUp",680,G__G__Thread_204_3_1,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"Y - - 2 - main",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Exit",410,G__G__Thread_204_4_1,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"Y - - 0 - ret",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Class",502,G__G__Thread_204_5_1,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TPosixThread::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_204_6_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TPosixThread::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_204_7_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TPosixThread::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_204_8_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TPosixThread::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Thread_204_9_1,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Thread_204_0_2,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Thread_204_1_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_204_2_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_204_3_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TPosixThread::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_204_4_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TPosixThread::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_204_5_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TPosixThread::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_204_6_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TPosixThread::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TPosixThread",1215,G__G__Thread_204_7_2,(int)('i'),G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread),-1,0,1,1,1,0,"u 'TPosixThread' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TPosixThread",1341,G__G__Thread_204_8_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Thread_204_9_2,(int)('u'),G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread),-1,1,1,1,1,0,"u 'TPosixThread' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMutexImp(void) {
   /* TMutexImp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp));
   G__memfunc_setup("Lock",393,G__G__Thread_210_2_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("TryLock",712,G__G__Thread_210_3_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("UnLock",588,G__G__Thread_210_4_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("Class",502,G__G__Thread_210_5_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TMutexImp::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_210_6_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TMutexImp::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_210_7_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TMutexImp::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_210_8_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TMutexImp::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Thread_210_9_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Thread_210_0_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Thread_210_1_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_210_2_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_210_3_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TMutexImp::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_210_4_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TMutexImp::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_210_5_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TMutexImp::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_210_6_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TMutexImp::DeclFileLine),0);
   // automatic destructor
   G__memfunc_setup("~TMutexImp",1035,G__G__Thread_210_7_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Thread_210_8_1,(int)('u'),G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp),-1,1,1,1,1,0,"u 'TMutexImp' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTRWLock(void) {
   /* TRWLock */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TRWLock));
   G__memfunc_setup("TRWLock",646,G__G__Thread_211_1_0,105,G__get_linked_tagnum(&G__G__ThreadLN_TRWLock),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ReadLock",773,G__G__Thread_211_2_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ReadUnLock",968,G__G__Thread_211_3_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("WriteLock",916,G__G__Thread_211_4_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("WriteUnLock",1111,G__G__Thread_211_5_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__Thread_211_6_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TRWLock::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_211_7_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TRWLock::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_211_8_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TRWLock::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_211_9_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TRWLock::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Thread_211_0_1,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Thread_211_1_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Thread_211_2_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_211_3_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_211_4_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TRWLock::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_211_5_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TRWLock::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_211_6_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TRWLock::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_211_7_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TRWLock::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TRWLock",646,G__G__Thread_211_8_1,(int)('i'),G__get_linked_tagnum(&G__G__ThreadLN_TRWLock),-1,0,1,1,1,0,"u 'TRWLock' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TRWLock",772,G__G__Thread_211_9_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Thread_211_0_2,(int)('u'),G__get_linked_tagnum(&G__G__ThreadLN_TRWLock),-1,1,1,1,1,0,"u 'TRWLock' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSemaphore(void) {
   /* TSemaphore */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore));
   G__memfunc_setup("TSemaphore",1016,G__G__Thread_212_1_0,105,G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore),-1,0,1,1,1,0,"h - 'UInt_t' 0 1 initial",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Wait",405,G__G__Thread_212_2_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TryWait",724,G__G__Thread_212_3_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Post",422,G__G__Thread_212_4_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__Thread_212_5_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TSemaphore::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_212_6_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TSemaphore::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_212_7_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TSemaphore::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_212_8_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TSemaphore::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Thread_212_9_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Thread_212_0_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Thread_212_1_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_212_2_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_212_3_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TSemaphore::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_212_4_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TSemaphore::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_212_5_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TSemaphore::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_212_6_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TSemaphore::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TSemaphore",1016,G__G__Thread_212_7_1,(int)('i'),G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore),-1,0,1,1,1,0,"u 'TSemaphore' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TSemaphore",1142,G__G__Thread_212_8_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Thread_212_9_1,(int)('u'),G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore),-1,1,1,1,1,0,"u 'TSemaphore' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTThreadFactory(void) {
   /* TThreadFactory */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThreadFactory));
   G__memfunc_setup("CreateMutexImp",1421,G__G__Thread_213_2_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("CreateConditionImp",1825,G__G__Thread_213_3_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp),-1,0,1,1,1,0,"U 'TMutexImp' - 0 - m",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("CreateThreadImp",1490,G__G__Thread_213_4_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("Class",502,G__G__Thread_213_5_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TThreadFactory::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_213_6_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TThreadFactory::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_213_7_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TThreadFactory::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_213_8_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TThreadFactory::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Thread_213_9_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Thread_213_0_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Thread_213_1_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_213_2_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_213_3_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TThreadFactory::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_213_4_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TThreadFactory::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_213_5_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TThreadFactory::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_213_6_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TThreadFactory::DeclFileLine),0);
   // automatic destructor
   G__memfunc_setup("~TThreadFactory",1538,G__G__Thread_213_7_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Thread_213_8_1,(int)('u'),G__get_linked_tagnum(&G__G__ThreadLN_TThreadFactory),-1,1,1,1,1,0,"u 'TThreadFactory' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTPosixMutex(void) {
   /* TPosixMutex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex));
   G__memfunc_setup("TPosixMutex",1146,G__G__Thread_215_1_0,105,G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Lock",393,G__G__Thread_215_2_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("UnLock",588,G__G__Thread_215_3_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("TryLock",712,G__G__Thread_215_4_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Class",502,G__G__Thread_215_5_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TPosixMutex::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_215_6_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TPosixMutex::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_215_7_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TPosixMutex::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_215_8_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TPosixMutex::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Thread_215_9_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Thread_215_0_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Thread_215_1_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_215_2_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_215_3_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TPosixMutex::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_215_4_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TPosixMutex::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_215_5_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TPosixMutex::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_215_6_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TPosixMutex::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TPosixMutex",1146,G__G__Thread_215_7_1,(int)('i'),G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex),-1,0,1,1,1,0,"u 'TPosixMutex' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TPosixMutex",1272,G__G__Thread_215_8_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Thread_215_9_1,(int)('u'),G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex),-1,1,1,1,1,0,"u 'TPosixMutex' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTPosixCondition(void) {
   /* TPosixCondition */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition));
   G__memfunc_setup("TPosixCondition",1550,G__G__Thread_216_1_0,105,G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition),-1,0,1,1,1,0,"U 'TMutexImp' - 0 - m",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Wait",405,G__G__Thread_216_2_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("TimedWait",904,G__G__Thread_216_3_0,105,-1,G__defined_typename("Int_t"),0,2,1,1,0,
"k - 'ULong_t' 0 - secs k - 'ULong_t' 0 0 nanoSecs",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Signal",606,G__G__Thread_216_4_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Broadcast",915,G__G__Thread_216_5_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Class",502,G__G__Thread_216_6_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TPosixCondition::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_216_7_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TPosixCondition::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_216_8_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TPosixCondition::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_216_9_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TPosixCondition::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Thread_216_0_1,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Thread_216_1_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Thread_216_2_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_216_3_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_216_4_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TPosixCondition::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_216_5_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TPosixCondition::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_216_6_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TPosixCondition::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_216_7_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TPosixCondition::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TPosixCondition",1550,G__G__Thread_216_8_1,(int)('i'),G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition),-1,0,1,1,1,0,"u 'TPosixCondition' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TPosixCondition",1676,G__G__Thread_216_9_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Thread_216_0_2,(int)('u'),G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition),-1,1,1,1,1,0,"u 'TPosixCondition' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTPosixThreadFactory(void) {
   /* TPosixThreadFactory */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory));
   G__memfunc_setup("TPosixThreadFactory",1943,G__G__Thread_219_1_0,105,G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory),-1,0,2,1,1,0,
"C - - 10 \"Posix\" name C - - 10 \"Posix Thread Factory\" title",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("CreateMutexImp",1421,G__G__Thread_219_2_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("CreateConditionImp",1825,G__G__Thread_219_3_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp),-1,0,1,1,1,0,"U 'TMutexImp' - 0 - m",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("CreateThreadImp",1490,G__G__Thread_219_4_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Class",502,G__G__Thread_219_5_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TPosixThreadFactory::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Thread_219_6_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TPosixThreadFactory::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Thread_219_7_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TPosixThreadFactory::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Thread_219_8_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TPosixThreadFactory::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Thread_219_9_0,85,G__get_linked_tagnum(&G__G__ThreadLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Thread_219_0_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Thread_219_1_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Thread_219_2_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Thread_219_3_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TPosixThreadFactory::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Thread_219_4_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TPosixThreadFactory::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Thread_219_5_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TPosixThreadFactory::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Thread_219_6_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TPosixThreadFactory::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TPosixThreadFactory",1943,G__G__Thread_219_7_1,(int)('i'),G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory),-1,0,1,1,1,0,"u 'TPosixThreadFactory' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TPosixThreadFactory",2069,G__G__Thread_219_8_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Thread_219_9_1,(int)('u'),G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory),-1,1,1,1,1,0,"u 'TPosixThreadFactory' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__Thread() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__Thread() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__Thread() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__ThreadLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_va_list = { "va_list" , 115 , -1 };
G__linked_taginfo G__G__ThreadLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR = { "vector<TStreamerInfo*,allocator<TStreamerInfo*> >" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TStreamerInfo*,allocator<TStreamerInfo*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TConditionImp = { "TConditionImp" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TMutex = { "TMutex" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TCondition = { "TCondition" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TThread = { "TThread" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TVirtualMutex = { "TVirtualMutex" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<unsigned int,allocator<unsigned int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TThreadImp = { "TThreadImp" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TPosixThread = { "TPosixThread" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TThreadcLcLEPriority = { "TThread::EPriority" , 101 , -1 };
G__linked_taginfo G__G__ThreadLN_TThreadcLcLEState = { "TThread::EState" , 101 , -1 };
G__linked_taginfo G__G__ThreadLN_TMutexImp = { "TMutexImp" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TRWLock = { "TRWLock" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TSemaphore = { "TSemaphore" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TThreadFactory = { "TThreadFactory" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_pthread_cond_t = { "pthread_cond_t" , 115 , -1 };
G__linked_taginfo G__G__ThreadLN_TPosixMutex = { "TPosixMutex" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TPosixCondition = { "TPosixCondition" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_pthread_mutex_t = { "pthread_mutex_t" , 115 , -1 };
G__linked_taginfo G__G__ThreadLN_TPosixThreadCleanUp = { "TPosixThreadCleanUp" , 99 , -1 };
G__linked_taginfo G__G__ThreadLN_TPosixThreadFactory = { "TPosixThreadFactory" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__Thread() {
  G__G__ThreadLN_TClass.tagnum = -1 ;
  G__G__ThreadLN_TBuffer.tagnum = -1 ;
  G__G__ThreadLN_TMemberInspector.tagnum = -1 ;
  G__G__ThreadLN_TObject.tagnum = -1 ;
  G__G__ThreadLN_TNamed.tagnum = -1 ;
  G__G__ThreadLN_va_list.tagnum = -1 ;
  G__G__ThreadLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR.tagnum = -1 ;
  G__G__ThreadLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ThreadLN_TConditionImp.tagnum = -1 ;
  G__G__ThreadLN_TMutex.tagnum = -1 ;
  G__G__ThreadLN_TCondition.tagnum = -1 ;
  G__G__ThreadLN_TThread.tagnum = -1 ;
  G__G__ThreadLN_TVirtualMutex.tagnum = -1 ;
  G__G__ThreadLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__G__ThreadLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ThreadLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__G__ThreadLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__ThreadLN_TThreadImp.tagnum = -1 ;
  G__G__ThreadLN_TPosixThread.tagnum = -1 ;
  G__G__ThreadLN_TThreadcLcLEPriority.tagnum = -1 ;
  G__G__ThreadLN_TThreadcLcLEState.tagnum = -1 ;
  G__G__ThreadLN_TMutexImp.tagnum = -1 ;
  G__G__ThreadLN_TRWLock.tagnum = -1 ;
  G__G__ThreadLN_TSemaphore.tagnum = -1 ;
  G__G__ThreadLN_TThreadFactory.tagnum = -1 ;
  G__G__ThreadLN_pthread_cond_t.tagnum = -1 ;
  G__G__ThreadLN_TPosixMutex.tagnum = -1 ;
  G__G__ThreadLN_TPosixCondition.tagnum = -1 ;
  G__G__ThreadLN_pthread_mutex_t.tagnum = -1 ;
  G__G__ThreadLN_TPosixThreadCleanUp.tagnum = -1 ;
  G__G__ThreadLN_TPosixThreadFactory.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__Thread() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum(&G__G__ThreadLN_TClass);
   G__get_linked_tagnum(&G__G__ThreadLN_TBuffer);
   G__get_linked_tagnum(&G__G__ThreadLN_TMemberInspector);
   G__get_linked_tagnum(&G__G__ThreadLN_TObject);
   G__get_linked_tagnum(&G__G__ThreadLN_TNamed);
   G__get_linked_tagnum(&G__G__ThreadLN_va_list);
   G__get_linked_tagnum(&G__G__ThreadLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR);
   G__get_linked_tagnum(&G__G__ThreadLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TConditionImp),sizeof(TConditionImp),-1,29956,"Condition variable implementation ABC",G__setup_memvarTConditionImp,G__setup_memfuncTConditionImp);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TMutex),sizeof(TMutex),-1,29952,"Mutex lock class",G__setup_memvarTMutex,G__setup_memfuncTMutex);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TCondition),sizeof(TCondition),-1,29952,"Condition variable class",G__setup_memvarTCondition,G__setup_memfuncTCondition);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThread),sizeof(TThread),-1,62720,"Thread class",G__setup_memvarTThread,G__setup_memfuncTThread);
   G__get_linked_tagnum(&G__G__ThreadLN_TVirtualMutex);
   G__get_linked_tagnum(&G__G__ThreadLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum(&G__G__ThreadLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__G__ThreadLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum(&G__G__ThreadLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThreadImp),sizeof(TThreadImp),-1,29965,"ThreadImp class",G__setup_memvarTThreadImp,G__setup_memfuncTThreadImp);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThread),sizeof(TPosixThread),-1,29952,"TPosixThread class",G__setup_memvarTPosixThread,G__setup_memfuncTPosixThread);
   G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEPriority);
   G__get_linked_tagnum(&G__G__ThreadLN_TThreadcLcLEState);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TMutexImp),sizeof(TMutexImp),-1,29955,"Mutex lock implementation ABC",G__setup_memvarTMutexImp,G__setup_memfuncTMutexImp);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TRWLock),sizeof(TRWLock),-1,29952,"Reader/writer lock",G__setup_memvarTRWLock,G__setup_memfuncTRWLock);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TSemaphore),sizeof(TSemaphore),-1,29952,"Counting semaphore class",G__setup_memvarTSemaphore,G__setup_memfuncTSemaphore);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TThreadFactory),sizeof(TThreadFactory),-1,62723,"Thread factory ABC",G__setup_memvarTThreadFactory,G__setup_memfuncTThreadFactory);
   G__get_linked_tagnum(&G__G__ThreadLN_pthread_cond_t);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixMutex),sizeof(TPosixMutex),-1,29952,"Posix mutex lock",G__setup_memvarTPosixMutex,G__setup_memfuncTPosixMutex);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixCondition),sizeof(TPosixCondition),-1,62464,"Posix condition variable",G__setup_memvarTPosixCondition,G__setup_memfuncTPosixCondition);
   G__get_linked_tagnum(&G__G__ThreadLN_pthread_mutex_t);
   G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadCleanUp);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__ThreadLN_TPosixThreadFactory),sizeof(TPosixThreadFactory),-1,62720,"Posix thread factory",G__setup_memvarTPosixThreadFactory,G__setup_memfuncTPosixThreadFactory);
}
extern "C" void G__cpp_setupG__Thread(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__Thread()");
  G__set_cpp_environmentG__Thread();
  G__cpp_setup_tagtableG__Thread();

  G__cpp_setup_inheritanceG__Thread();

  G__cpp_setup_typetableG__Thread();

  G__cpp_setup_memvarG__Thread();

  G__cpp_setup_memfuncG__Thread();
  G__cpp_setup_globalG__Thread();
  G__cpp_setup_funcG__Thread();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__Thread();
  return;
}
class G__cpp_setup_initG__Thread {
  public:
    G__cpp_setup_initG__Thread() { G__add_setup_func("G__Thread",(G__incsetup)(&G__cpp_setupG__Thread)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__Thread() { G__remove_setup_func("G__Thread"); }
};
G__cpp_setup_initG__Thread G__cpp_setup_initializerG__Thread;

