//
// File generated by utils/src/rootcint_tmp at Wed Jul  1 06:29:49 2020.
// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

#include "G__MLP.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TStreamerInfo.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"

#include "TCollectionProxy.h"

namespace ROOT {
   namespace Shadow {
   } // Of namespace ROOT::Shadow
} // Of namespace ROOT

namespace ROOT {
   void TMultiLayerPerceptron_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TMultiLayerPerceptron_IsA(const void*);
   static void *new_TMultiLayerPerceptron(void *p = 0);
   static void *newArray_TMultiLayerPerceptron(Long_t size);
   static void delete_TMultiLayerPerceptron(void *p);
   static void deleteArray_TMultiLayerPerceptron(void *p);
   static void destruct_TMultiLayerPerceptron(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TMultiLayerPerceptron*)
   {
      ::TMultiLayerPerceptron *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TMultiLayerPerceptron", ::TMultiLayerPerceptron::Class_Version(), "mlp/inc/TMultiLayerPerceptron.h", 55,
                  typeid(::TMultiLayerPerceptron), DefineBehavior(ptr, ptr),
                  &::TMultiLayerPerceptron::Dictionary, &TMultiLayerPerceptron_IsA, 4,
                  sizeof(::TMultiLayerPerceptron) );
      instance.SetNew(&new_TMultiLayerPerceptron);
      instance.SetNewArray(&newArray_TMultiLayerPerceptron);
      instance.SetDelete(&delete_TMultiLayerPerceptron);
      instance.SetDeleteArray(&deleteArray_TMultiLayerPerceptron);
      instance.SetDestructor(&destruct_TMultiLayerPerceptron);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TMultiLayerPerceptron*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TMLPAnalyzer_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TMLPAnalyzer_IsA(const void*);
   static void delete_TMLPAnalyzer(void *p);
   static void deleteArray_TMLPAnalyzer(void *p);
   static void destruct_TMLPAnalyzer(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TMLPAnalyzer*)
   {
      ::TMLPAnalyzer *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TMLPAnalyzer", ::TMLPAnalyzer::Class_Version(), "mlp/inc/TMLPAnalyzer.h", 34,
                  typeid(::TMLPAnalyzer), DefineBehavior(ptr, ptr),
                  &::TMLPAnalyzer::Dictionary, &TMLPAnalyzer_IsA, 4,
                  sizeof(::TMLPAnalyzer) );
      instance.SetDelete(&delete_TMLPAnalyzer);
      instance.SetDeleteArray(&deleteArray_TMLPAnalyzer);
      instance.SetDestructor(&destruct_TMLPAnalyzer);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TMLPAnalyzer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TNeuron_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TNeuron_IsA(const void*);
   static void *new_TNeuron(void *p = 0);
   static void *newArray_TNeuron(Long_t size);
   static void delete_TNeuron(void *p);
   static void deleteArray_TNeuron(void *p);
   static void destruct_TNeuron(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TNeuron*)
   {
      ::TNeuron *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TNeuron", ::TNeuron::Class_Version(), "mlp/inc/TNeuron.h", 47,
                  typeid(::TNeuron), DefineBehavior(ptr, ptr),
                  &::TNeuron::Dictionary, &TNeuron_IsA, 4,
                  sizeof(::TNeuron) );
      instance.SetNew(&new_TNeuron);
      instance.SetNewArray(&newArray_TNeuron);
      instance.SetDelete(&delete_TNeuron);
      instance.SetDeleteArray(&deleteArray_TNeuron);
      instance.SetDestructor(&destruct_TNeuron);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TNeuron*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TSynapse_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TSynapse_IsA(const void*);
   static void *new_TSynapse(void *p = 0);
   static void *newArray_TSynapse(Long_t size);
   static void delete_TSynapse(void *p);
   static void deleteArray_TSynapse(void *p);
   static void destruct_TSynapse(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TSynapse*)
   {
      ::TSynapse *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TSynapse", ::TSynapse::Class_Version(), "mlp/inc/TSynapse.h", 32,
                  typeid(::TSynapse), DefineBehavior(ptr, ptr),
                  &::TSynapse::Dictionary, &TSynapse_IsA, 4,
                  sizeof(::TSynapse) );
      instance.SetNew(&new_TSynapse);
      instance.SetNewArray(&newArray_TSynapse);
      instance.SetDelete(&delete_TSynapse);
      instance.SetDeleteArray(&deleteArray_TSynapse);
      instance.SetDestructor(&destruct_TSynapse);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TSynapse*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

//______________________________________________________________________________
TClass *TMultiLayerPerceptron::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TMultiLayerPerceptron::Class_Name()
{
   return "TMultiLayerPerceptron";
}

//______________________________________________________________________________
const char *TMultiLayerPerceptron::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TMultiLayerPerceptron*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TMultiLayerPerceptron::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TMultiLayerPerceptron*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TMultiLayerPerceptron::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TMultiLayerPerceptron*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TMultiLayerPerceptron::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TMultiLayerPerceptron*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TMLPAnalyzer::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TMLPAnalyzer::Class_Name()
{
   return "TMLPAnalyzer";
}

//______________________________________________________________________________
const char *TMLPAnalyzer::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TMLPAnalyzer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TMLPAnalyzer::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TMLPAnalyzer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TMLPAnalyzer::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TMLPAnalyzer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TMLPAnalyzer::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TMLPAnalyzer*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TNeuron::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TNeuron::Class_Name()
{
   return "TNeuron";
}

//______________________________________________________________________________
const char *TNeuron::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TNeuron*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TNeuron::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TNeuron*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TNeuron::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TNeuron*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TNeuron::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TNeuron*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TSynapse::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TSynapse::Class_Name()
{
   return "TSynapse";
}

//______________________________________________________________________________
const char *TSynapse::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TSynapse*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TSynapse::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TSynapse*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TSynapse::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TSynapse*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TSynapse::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TSynapse*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TNeuron::Streamer(TBuffer &R__b)
{
   // Stream an object of class TNeuron.

   if (R__b.IsReading()) {
      TNeuron::Class()->ReadBuffer(R__b, this);
   } else {
      TNeuron::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TNeuron::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TNeuron.

      TClass *R__cl = ::TNeuron::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fpre", &fpre);
      fpre.ShowMembers(R__insp, strcat(R__parent,"fpre.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fpost", &fpost);
      fpost.ShowMembers(R__insp, strcat(R__parent,"fpost.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fWeight", &fWeight);
      R__insp.Inspect(R__cl, R__parent, "fNorm[2]", fNorm);
      R__insp.Inspect(R__cl, R__parent, "fType", &fType);
      R__insp.Inspect(R__cl, R__parent, "*fFormula", &fFormula);
      R__insp.Inspect(R__cl, R__parent, "fNewValue", &fNewValue);
      R__insp.Inspect(R__cl, R__parent, "fValue", &fValue);
      R__insp.Inspect(R__cl, R__parent, "fNewDeriv", &fNewDeriv);
      R__insp.Inspect(R__cl, R__parent, "fDerivative", &fDerivative);
      R__insp.Inspect(R__cl, R__parent, "fNewDeDw", &fNewDeDw);
      R__insp.Inspect(R__cl, R__parent, "fDeDw", &fDeDw);
      R__insp.Inspect(R__cl, R__parent, "fDEDw", &fDEDw);
      TNamed::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TNeuron_IsA(const void *obj) {
      return ((::TNeuron*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TNeuron(void *p) {
      return  p ? new(p) ::TNeuron : new ::TNeuron;
   }
   static void *newArray_TNeuron(Long_t size) {
      return new ::TNeuron[size];
   }
   // Wrapper around operator delete
   static void delete_TNeuron(void *p) {
      delete ((::TNeuron*)p);
   }
   static void deleteArray_TNeuron(void *p) {
      delete [] ((::TNeuron*)p);
   }
   static void destruct_TNeuron(void *p) {
      typedef ::TNeuron current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TNeuron

//______________________________________________________________________________
void TSynapse::Streamer(TBuffer &R__b)
{
   // Stream an object of class TSynapse.

   if (R__b.IsReading()) {
      TSynapse::Class()->ReadBuffer(R__b, this);
   } else {
      TSynapse::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TSynapse::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TSynapse.

      TClass *R__cl = ::TSynapse::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fpre", &fpre);
      R__insp.Inspect(R__cl, R__parent, "*fpost", &fpost);
      R__insp.Inspect(R__cl, R__parent, "fweight", &fweight);
      R__insp.Inspect(R__cl, R__parent, "fDEDw", &fDEDw);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TSynapse_IsA(const void *obj) {
      return ((::TSynapse*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TSynapse(void *p) {
      return  p ? new(p) ::TSynapse : new ::TSynapse;
   }
   static void *newArray_TSynapse(Long_t size) {
      return new ::TSynapse[size];
   }
   // Wrapper around operator delete
   static void delete_TSynapse(void *p) {
      delete ((::TSynapse*)p);
   }
   static void deleteArray_TSynapse(void *p) {
      delete [] ((::TSynapse*)p);
   }
   static void destruct_TSynapse(void *p) {
      typedef ::TSynapse current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TSynapse

//______________________________________________________________________________
void TMultiLayerPerceptron::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMultiLayerPerceptron.

   if (R__b.IsReading()) {
      TMultiLayerPerceptron::Class()->ReadBuffer(R__b, this);
   } else {
      TMultiLayerPerceptron::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TMultiLayerPerceptron::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMultiLayerPerceptron.

      TClass *R__cl = ::TMultiLayerPerceptron::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fData", &fData);
      R__insp.Inspect(R__cl, R__parent, "fCurrentTree", &fCurrentTree);
      R__insp.Inspect(R__cl, R__parent, "fCurrentTreeWeight", &fCurrentTreeWeight);
      R__insp.Inspect(R__cl, R__parent, "fNetwork", &fNetwork);
      fNetwork.ShowMembers(R__insp, strcat(R__parent,"fNetwork.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fFirstLayer", &fFirstLayer);
      fFirstLayer.ShowMembers(R__insp, strcat(R__parent,"fFirstLayer.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fLastLayer", &fLastLayer);
      fLastLayer.ShowMembers(R__insp, strcat(R__parent,"fLastLayer.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fSynapses", &fSynapses);
      fSynapses.ShowMembers(R__insp, strcat(R__parent,"fSynapses.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fStructure", &fStructure);
      fStructure.ShowMembers(R__insp, strcat(R__parent,"fStructure.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fWeight", &fWeight);
      fWeight.ShowMembers(R__insp, strcat(R__parent,"fWeight.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fTraining", &fTraining);
      R__insp.Inspect(R__cl, R__parent, "*fTest", &fTest);
      R__insp.Inspect(R__cl, R__parent, "fLearningMethod", &fLearningMethod);
      R__insp.Inspect(R__cl, R__parent, "*fEventWeight", &fEventWeight);
      R__insp.Inspect(R__cl, R__parent, "*fManager", &fManager);
      R__insp.Inspect(R__cl, R__parent, "fEta", &fEta);
      R__insp.Inspect(R__cl, R__parent, "fEpsilon", &fEpsilon);
      R__insp.Inspect(R__cl, R__parent, "fDelta", &fDelta);
      R__insp.Inspect(R__cl, R__parent, "fEtaDecay", &fEtaDecay);
      R__insp.Inspect(R__cl, R__parent, "fTau", &fTau);
      R__insp.Inspect(R__cl, R__parent, "fLastAlpha", &fLastAlpha);
      R__insp.Inspect(R__cl, R__parent, "fReset", &fReset);
      R__insp.Inspect(R__cl, R__parent, "fTrainingOwner", &fTrainingOwner);
      R__insp.Inspect(R__cl, R__parent, "fTestOwner", &fTestOwner);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TMultiLayerPerceptron_IsA(const void *obj) {
      return ((::TMultiLayerPerceptron*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TMultiLayerPerceptron(void *p) {
      return  p ? new(p) ::TMultiLayerPerceptron : new ::TMultiLayerPerceptron;
   }
   static void *newArray_TMultiLayerPerceptron(Long_t size) {
      return new ::TMultiLayerPerceptron[size];
   }
   // Wrapper around operator delete
   static void delete_TMultiLayerPerceptron(void *p) {
      delete ((::TMultiLayerPerceptron*)p);
   }
   static void deleteArray_TMultiLayerPerceptron(void *p) {
      delete [] ((::TMultiLayerPerceptron*)p);
   }
   static void destruct_TMultiLayerPerceptron(void *p) {
      typedef ::TMultiLayerPerceptron current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMultiLayerPerceptron

//______________________________________________________________________________
void TMLPAnalyzer::Streamer(TBuffer &R__b)
{
   // Stream an object of class TMLPAnalyzer.

   if (R__b.IsReading()) {
      TMLPAnalyzer::Class()->ReadBuffer(R__b, this);
   } else {
      TMLPAnalyzer::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TMLPAnalyzer::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TMLPAnalyzer.

      TClass *R__cl = ::TMLPAnalyzer::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fNetwork", &fNetwork);
      R__insp.Inspect(R__cl, R__parent, "*fAnalysisTree", &fAnalysisTree);
      R__insp.Inspect(R__cl, R__parent, "*fIOTree", &fIOTree);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TMLPAnalyzer_IsA(const void *obj) {
      return ((::TMLPAnalyzer*)obj)->IsA();
   }
   // Wrapper around operator delete
   static void delete_TMLPAnalyzer(void *p) {
      delete ((::TMLPAnalyzer*)p);
   }
   static void deleteArray_TMLPAnalyzer(void *p) {
      delete [] ((::TMLPAnalyzer*)p);
   }
   static void destruct_TMLPAnalyzer(void *p) {
      typedef ::TMLPAnalyzer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TMLPAnalyzer

/********************************************************
* mlp/src/G__MLP.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableG__MLP();

extern "C" void G__set_cpp_environmentG__MLP() {
  G__add_compiledheader("base/inc/TROOT.h");
  G__add_compiledheader("base/inc/TMemberInspector.h");
  G__add_compiledheader("mlp/inc/TMultiLayerPerceptron.h");
  G__add_compiledheader("mlp/inc/TSynapse.h");
  G__add_compiledheader("mlp/inc/TNeuron.h");
  G__add_compiledheader("mlp/inc/TMLPAnalyzer.h");
  G__cpp_reset_tagtableG__MLP();
}
class G__mlpdIsrcdIG__MLPdOcxx_tag {};

void* operator new(size_t size,G__mlpdIsrcdIG__MLPdOcxx_tag* p) {
  if(p && G__PVOID!=G__getgvp()) return((void*)p);
#ifndef G__ROOT
  return(malloc(size));
#else
  return(::operator new(size));
#endif
}

/* dummy, for exception */
#ifdef G__EH_DUMMY_DELETE
void operator delete(void *p,G__mlpdIsrcdIG__MLPdOcxx_tag* x) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}
#endif

static void G__operator_delete(void *p) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}

void G__DELDMY_mlpdIsrcdIG__MLPdOcxx() { G__operator_delete(0); }

extern "C" int G__cpp_dllrevG__MLP() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TMultiLayerPerceptron */
static int G__G__MLP_195_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TMultiLayerPerceptron *p=NULL;
   if(G__getaryconstruct()) p=new TMultiLayerPerceptron[G__getaryconstruct()];
   else                    p=new TMultiLayerPerceptron;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptron);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TMultiLayerPerceptron *p=NULL;
   switch(libp->paran) {
   case 4:
      p = new TMultiLayerPerceptron(
(const char*)G__int(libp->para[0]),(TTree*)G__int(libp->para[1])
,(const char*)G__int(libp->para[2]),(const char*)G__int(libp->para[3]));
      break;
   case 3:
      p = new TMultiLayerPerceptron(
(const char*)G__int(libp->para[0]),(TTree*)G__int(libp->para[1])
,(const char*)G__int(libp->para[2]));
      break;
   case 2:
      p = new TMultiLayerPerceptron((const char*)G__int(libp->para[0]),(TTree*)G__int(libp->para[1]));
      break;
   case 1:
      p = new TMultiLayerPerceptron((const char*)G__int(libp->para[0]));
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptron);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TMultiLayerPerceptron *p=NULL;
   switch(libp->paran) {
   case 5:
      p = new TMultiLayerPerceptron(
(const char*)G__int(libp->para[0]),(const char*)G__int(libp->para[1])
,(TTree*)G__int(libp->para[2]),(const char*)G__int(libp->para[3])
,(const char*)G__int(libp->para[4]));
      break;
   case 4:
      p = new TMultiLayerPerceptron(
(const char*)G__int(libp->para[0]),(const char*)G__int(libp->para[1])
,(TTree*)G__int(libp->para[2]),(const char*)G__int(libp->para[3]));
      break;
   case 3:
      p = new TMultiLayerPerceptron(
(const char*)G__int(libp->para[0]),(const char*)G__int(libp->para[1])
,(TTree*)G__int(libp->para[2]));
      break;
   case 2:
      p = new TMultiLayerPerceptron((const char*)G__int(libp->para[0]),(const char*)G__int(libp->para[1]));
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptron);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TMultiLayerPerceptron *p=NULL;
      p = new TMultiLayerPerceptron(
(const char*)G__int(libp->para[0]),(TTree*)G__int(libp->para[1])
,(TEventList*)G__int(libp->para[2]),(TEventList*)G__int(libp->para[3]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptron);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TMultiLayerPerceptron *p=NULL;
      p = new TMultiLayerPerceptron(
(const char*)G__int(libp->para[0]),(const char*)G__int(libp->para[1])
,(TTree*)G__int(libp->para[2]),(TEventList*)G__int(libp->para[3])
,(TEventList*)G__int(libp->para[4]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptron);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->SetData((TTree*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->SetTrainingDataSet((TEventList*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->SetTestDataSet((TEventList*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->SetTrainingDataSet((const char*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->SetTestDataSet((const char*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->SetLearningMethod((TMultiLayerPerceptron::LearningMethod)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->SetEventWeight((const char*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->Train((Int_t)G__int(libp->para[0]),(Option_t*)G__int(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->Train((Int_t)G__int(libp->para[0]));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__letdouble(result7,100,(double)((const TMultiLayerPerceptron*)(G__getstructoffset()))->Result((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7,100,(double)((const TMultiLayerPerceptron*)(G__getstructoffset()))->Result((Int_t)G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TMultiLayerPerceptron*)(G__getstructoffset()))->GetError((Int_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TMultiLayerPerceptron*)(G__getstructoffset()))->GetError((TMultiLayerPerceptron::DataSet)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TMultiLayerPerceptron*)(G__getstructoffset()))->ComputeDEDw();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TMultiLayerPerceptron*)(G__getstructoffset()))->Randomize();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->SetEta((Double_t)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->SetEpsilon((Double_t)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->SetDelta((Double_t)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->SetEtaDecay((Double_t)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->SetTau((Double_t)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->SetReset((Int_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TMultiLayerPerceptron*)(G__getstructoffset()))->GetEta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TMultiLayerPerceptron*)(G__getstructoffset()))->GetEpsilon());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TMultiLayerPerceptron*)(G__getstructoffset()))->GetDelta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TMultiLayerPerceptron*)(G__getstructoffset()))->GetEtaDecay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TMultiLayerPerceptron*)(G__getstructoffset()))->GetTau());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_0_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TMultiLayerPerceptron*)(G__getstructoffset()))->GetReset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_1_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
const         TString *pobj,xobj=((const TMultiLayerPerceptron*)(G__getstructoffset()))->GetStructure();
        pobj=new TString(xobj);
        result7->obj.i=(long)((void*)pobj); result7->ref=result7->obj.i;
        G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_2_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__setnull(result7);
      ((const TMultiLayerPerceptron*)(G__getstructoffset()))->DrawResult((Int_t)G__int(libp->para[0]),(Option_t*)G__int(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((const TMultiLayerPerceptron*)(G__getstructoffset()))->DrawResult((Int_t)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((const TMultiLayerPerceptron*)(G__getstructoffset()))->DrawResult();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_3_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((const TMultiLayerPerceptron*)(G__getstructoffset()))->DumpWeights((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((const TMultiLayerPerceptron*)(G__getstructoffset()))->DumpWeights();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_4_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->LoadWeights((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->LoadWeights();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_5_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TMultiLayerPerceptron*)(G__getstructoffset()))->Evaluate((Int_t)G__int(libp->para[0]),(Double_t*)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_6_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__setnull(result7);
      ((const TMultiLayerPerceptron*)(G__getstructoffset()))->Export((Option_t*)G__int(libp->para[0]),(Option_t*)G__int(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((const TMultiLayerPerceptron*)(G__getstructoffset()))->Export((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((const TMultiLayerPerceptron*)(G__getstructoffset()))->Export();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_7_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->Draw((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->Draw();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_5_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TMultiLayerPerceptron::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_6_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TMultiLayerPerceptron::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_7_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TMultiLayerPerceptron::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_8_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TMultiLayerPerceptron::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_9_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TMultiLayerPerceptron*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_0_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_1_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_2_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMultiLayerPerceptron*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_3_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TMultiLayerPerceptron::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_4_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TMultiLayerPerceptron::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_5_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TMultiLayerPerceptron::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_195_6_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TMultiLayerPerceptron::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMultiLayerPerceptron G__TTMultiLayerPerceptron;
static int G__G__MLP_195_7_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TMultiLayerPerceptron *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TMultiLayerPerceptron *)((G__getstructoffset())+sizeof(TMultiLayerPerceptron)*i);
   else  delete (TMultiLayerPerceptron *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TMLPAnalyzer */
static int G__G__MLP_196_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TMLPAnalyzer *p=NULL;
      p = new TMLPAnalyzer(*(TMultiLayerPerceptron*)libp->para[0].ref);
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__MLPLN_TMLPAnalyzer);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TMLPAnalyzer *p=NULL;
      p = new TMLPAnalyzer((TMultiLayerPerceptron*)G__int(libp->para[0]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__MLPLN_TMLPAnalyzer);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMLPAnalyzer*)(G__getstructoffset()))->DrawNetwork((Int_t)G__int(libp->para[0]),(const char*)G__int(libp->para[1])
,(const char*)G__int(libp->para[2]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMLPAnalyzer*)(G__getstructoffset()))->DrawDInput((Int_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMLPAnalyzer*)(G__getstructoffset()))->DrawDInputs();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
   G__letint(result7,85,(long)((TMLPAnalyzer*)(G__getstructoffset()))->DrawTruthDeviation((Int_t)G__int(libp->para[0]),(Option_t*)G__int(libp->para[1])));
      break;
   case 1:
   G__letint(result7,85,(long)((TMLPAnalyzer*)(G__getstructoffset()))->DrawTruthDeviation((Int_t)G__int(libp->para[0])));
      break;
   case 0:
   G__letint(result7,85,(long)((TMLPAnalyzer*)(G__getstructoffset()))->DrawTruthDeviation());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
   G__letint(result7,85,(long)((TMLPAnalyzer*)(G__getstructoffset()))->DrawTruthDeviations((Option_t*)G__int(libp->para[0])));
      break;
   case 0:
   G__letint(result7,85,(long)((TMLPAnalyzer*)(G__getstructoffset()))->DrawTruthDeviations());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 3:
   G__letint(result7,85,(long)((TMLPAnalyzer*)(G__getstructoffset()))->DrawTruthDeviationInOut((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(Option_t*)G__int(libp->para[2])));
      break;
   case 2:
   G__letint(result7,85,(long)((TMLPAnalyzer*)(G__getstructoffset()))->DrawTruthDeviationInOut((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
      break;
   case 1:
   G__letint(result7,85,(long)((TMLPAnalyzer*)(G__getstructoffset()))->DrawTruthDeviationInOut((Int_t)G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
   G__letint(result7,85,(long)((TMLPAnalyzer*)(G__getstructoffset()))->DrawTruthDeviationInsOut((Int_t)G__int(libp->para[0]),(Option_t*)G__int(libp->para[1])));
      break;
   case 1:
   G__letint(result7,85,(long)((TMLPAnalyzer*)(G__getstructoffset()))->DrawTruthDeviationInsOut((Int_t)G__int(libp->para[0])));
      break;
   case 0:
   G__letint(result7,85,(long)((TMLPAnalyzer*)(G__getstructoffset()))->DrawTruthDeviationInsOut());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMLPAnalyzer*)(G__getstructoffset()))->CheckNetwork();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMLPAnalyzer*)(G__getstructoffset()))->GatherInformations();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TMLPAnalyzer*)(G__getstructoffset()))->GetIOTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TMLPAnalyzer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TMLPAnalyzer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TMLPAnalyzer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TMLPAnalyzer::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TMLPAnalyzer*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMLPAnalyzer*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMLPAnalyzer*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TMLPAnalyzer*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TMLPAnalyzer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TMLPAnalyzer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TMLPAnalyzer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_196_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TMLPAnalyzer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__MLP_196_0_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TMLPAnalyzer *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TMLPAnalyzer(*(TMLPAnalyzer*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__MLPLN_TMLPAnalyzer);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TMLPAnalyzer G__TTMLPAnalyzer;
static int G__G__MLP_196_1_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TMLPAnalyzer *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TMLPAnalyzer *)((G__getstructoffset())+sizeof(TMLPAnalyzer)*i);
   else  delete (TMLPAnalyzer *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__MLP_196_2_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TMLPAnalyzer *dest = (TMLPAnalyzer*)(G__getstructoffset());
   *dest = (*(TMLPAnalyzer*)libp->para[0].ref);
   const TMLPAnalyzer& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TNeuron */
static int G__G__MLP_199_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TNeuron *p=NULL;
   switch(libp->paran) {
   case 3:
      p = new TNeuron(
(TNeuron::NeuronType)G__int(libp->para[0]),(const char*)G__int(libp->para[1])
,(const char*)G__int(libp->para[2]));
      break;
   case 2:
      p = new TNeuron((TNeuron::NeuronType)G__int(libp->para[0]),(const char*)G__int(libp->para[1]));
      break;
   case 1:
      p = new TNeuron((TNeuron::NeuronType)G__int(libp->para[0]));
      break;
   case 0:
   if(G__getaryconstruct()) p=new TNeuron[G__getaryconstruct()];
   else                    p=new TNeuron;
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__MLPLN_TNeuron);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TNeuron*)(G__getstructoffset()))->GetPre((Int_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TNeuron*)(G__getstructoffset()))->GetPost((Int_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TNeuron*)(G__getstructoffset()))->UseBranch((TTree*)G__int(libp->para[0]),(const char*)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TNeuron*)(G__getstructoffset()))->GetValue());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TNeuron*)(G__getstructoffset()))->GetDerivative());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TNeuron*)(G__getstructoffset()))->GetError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TNeuron*)(G__getstructoffset()))->GetDeDw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TNeuron*)(G__getstructoffset()))->GetBranch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TNeuron*)(G__getstructoffset()))->SetWeight((Double_t)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TNeuron*)(G__getstructoffset()))->GetWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TNeuron*)(G__getstructoffset()))->SetNormalisation((Double_t)G__double(libp->para[0]),(Double_t)G__double(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,68,(long)((const TNeuron*)(G__getstructoffset()))->GetNormalisation());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TNeuron*)(G__getstructoffset()))->SetNewEvent();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TNeuron*)(G__getstructoffset()))->SetDEDw((Double_t)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TNeuron*)(G__getstructoffset()))->GetDEDw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TNeuron*)(G__getstructoffset()))->ForceExternalValue((Double_t)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TNeuron::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TNeuron::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TNeuron::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TNeuron::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TNeuron*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TNeuron*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TNeuron*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TNeuron*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_0_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TNeuron::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_1_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TNeuron::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_2_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TNeuron::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_199_3_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TNeuron::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TNeuron G__TTNeuron;
static int G__G__MLP_199_4_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TNeuron *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TNeuron *)((G__getstructoffset())+sizeof(TNeuron)*i);
   else  delete (TNeuron *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TSynapse */
static int G__G__MLP_200_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TSynapse *p=NULL;
   if(G__getaryconstruct()) p=new TSynapse[G__getaryconstruct()];
   else                    p=new TSynapse;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__MLPLN_TSynapse);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TSynapse *p=NULL;
   switch(libp->paran) {
   case 3:
      p = new TSynapse(
(TNeuron*)G__int(libp->para[0]),(TNeuron*)G__int(libp->para[1])
,(Double_t)G__double(libp->para[2]));
      break;
   case 2:
      p = new TSynapse((TNeuron*)G__int(libp->para[0]),(TNeuron*)G__int(libp->para[1]));
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__MLPLN_TSynapse);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSynapse*)(G__getstructoffset()))->SetPre((TNeuron*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSynapse*)(G__getstructoffset()))->SetPost((TNeuron*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TSynapse*)(G__getstructoffset()))->GetPre());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TSynapse*)(G__getstructoffset()))->GetPost());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSynapse*)(G__getstructoffset()))->SetWeight((Double_t)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TSynapse*)(G__getstructoffset()))->GetWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TSynapse*)(G__getstructoffset()))->GetValue());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TSynapse*)(G__getstructoffset()))->GetDeDw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSynapse*)(G__getstructoffset()))->SetDEDw((Double_t)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TSynapse*)(G__getstructoffset()))->GetDEDw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TSynapse::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TSynapse::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TSynapse::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TSynapse::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TSynapse*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSynapse*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSynapse*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TSynapse*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TSynapse::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TSynapse::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TSynapse::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MLP_200_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TSynapse::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__MLP_200_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TSynapse *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TSynapse(*(TSynapse*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__MLPLN_TSynapse);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TSynapse G__TTSynapse;
static int G__G__MLP_200_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TSynapse *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TSynapse *)((G__getstructoffset())+sizeof(TSynapse)*i);
   else  delete (TSynapse *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__MLP_200_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TSynapse *dest = (TSynapse*)(G__getstructoffset());
   *dest = (*(TSynapse*)libp->para[0].ref);
   const TSynapse& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TMultiLayerPerceptron */

/* TMLPAnalyzer */

/* TNeuron */

/* TSynapse */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__MLP {
 public:
  G__Sizep2memfuncG__MLP() {p=&G__Sizep2memfuncG__MLP::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__MLP::*p)();
};

size_t G__get_sizep2memfuncG__MLP()
{
  G__Sizep2memfuncG__MLP a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__MLP() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptron))) {
     TMultiLayerPerceptron *G__Lderived;
     G__Lderived=(TMultiLayerPerceptron*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptron),G__get_linked_tagnum(&G__G__MLPLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__MLPLN_TMLPAnalyzer))) {
     TMLPAnalyzer *G__Lderived;
     G__Lderived=(TMLPAnalyzer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__MLPLN_TMLPAnalyzer),G__get_linked_tagnum(&G__G__MLPLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__MLPLN_TNeuron))) {
     TNeuron *G__Lderived;
     G__Lderived=(TNeuron*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__MLPLN_TNeuron),G__get_linked_tagnum(&G__G__MLPLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__MLPLN_TNeuron),G__get_linked_tagnum(&G__G__MLPLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__MLPLN_TSynapse))) {
     TSynapse *G__Lderived;
     G__Lderived=(TSynapse*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__MLPLN_TSynapse),G__get_linked_tagnum(&G__G__MLPLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__MLP() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,
-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,
-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,
-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,
-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<TStreamerInfo*>",117,G__get_linked_tagnum(&G__G__MLPLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__MLPLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MLPLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__MLPLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MLPLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TMultiLayerPerceptron */
static void G__setup_memvarTMultiLayerPerceptron(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptron));
   { TMultiLayerPerceptron *p; p=(TMultiLayerPerceptron*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptroncLcLLearningMethod),-1,-2,1,"kStochastic=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptroncLcLLearningMethod),-1,-2,1,"kBatch=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptroncLcLLearningMethod),-1,-2,1,"kSteepestDescent=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptroncLcLLearningMethod),-1,-2,1,"kRibierePolak=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptroncLcLLearningMethod),-1,-2,1,"kFletcherReeves=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptroncLcLLearningMethod),-1,-2,1,"kBFGS=5",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptroncLcLDataSet),-1,-2,1,"kTraining=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptroncLcLDataSet),-1,-2,1,"kTest=1",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__MLPLN_TTree),-1,-1,4,"fData=",0,"! pointer to the tree used as datasource");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCurrentTree=",0,"! index of the current tree in a chain");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCurrentTreeWeight=",0,"! weight of the current tree in a chain");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__MLPLN_TObjArray),-1,-1,4,"fNetwork=",0,"Collection of all the neurons in the network");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__MLPLN_TObjArray),-1,-1,4,"fFirstLayer=",0,"Collection of the input neurons; subset of fNetwork");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__MLPLN_TObjArray),-1,-1,4,"fLastLayer=",0,"Collection of the output neurons; subset of fNetwork");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__MLPLN_TObjArray),-1,-1,4,"fSynapses=",0,"Collection of all the synapses in the network");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__MLPLN_TString),-1,-1,4,"fStructure=",0,"String containing the network structure");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__MLPLN_TString),-1,-1,4,"fWeight=",0,"String containing the event weight");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__MLPLN_TEventList),-1,-1,4,"fTraining=",0,"! EventList defining the events in the training dataset");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__MLPLN_TEventList),-1,-1,4,"fTest=",0,"! EventList defining the events in the test dataset");
   G__memvar_setup((void*)NULL,105,0,0,G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptroncLcLLearningMethod),-1,-1,4,"fLearningMethod=",0,"! The Learning Method");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__MLPLN_TTreeFormula),-1,-1,4,"fEventWeight=",0,"! formula representing the event weight");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__MLPLN_TTreeFormulaManager),-1,-1,4,"fManager=",0,"! TTreeFormulaManager for the weight and neurons");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEta=",0,"! Eta - used in stochastic minimisation - Default=0.1");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEpsilon=",0,"! Epsilon - used in stochastic minimisation - Default=0.");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDelta=",0,"! Delta - used in stochastic minimisation - Default=0.");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEtaDecay=",0,"! EtaDecay - Eta *= EtaDecay at each epoch - Default=1.");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTau=",0,"! Tau - used in line search - Default=3.");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fLastAlpha=",0,"! internal parameter used in line search");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fReset=",0,"! number of epochs between two resets of the search direction to the steepest descent - Default=50");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTrainingOwner=",0,"! internal flag whether one has to delete fTraining or not");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTestOwner=",0,"! internal flag whether one has to delete fTest or not");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__MLPLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TMLPAnalyzer */
static void G__setup_memvarTMLPAnalyzer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__MLPLN_TMLPAnalyzer));
   { TMLPAnalyzer *p; p=(TMLPAnalyzer*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptron),-1,-1,4,"fNetwork=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__MLPLN_TTree),-1,-1,4,"fAnalysisTree=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__MLPLN_TTree),-1,-1,4,"fIOTree=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__MLPLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TNeuron */
static void G__setup_memvarTNeuron(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__MLPLN_TNeuron));
   { TNeuron *p; p=(TNeuron*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MLPLN_TNeuroncLcLNeuronType),-1,-2,1,"kOff=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MLPLN_TNeuroncLcLNeuronType),-1,-2,1,"kLinear=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MLPLN_TNeuroncLcLNeuronType),-1,-2,1,"kSigmoid=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MLPLN_TNeuroncLcLNeuronType),-1,-2,1,"kTanh=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__MLPLN_TNeuroncLcLNeuronType),-1,-2,1,"kGauss=4",0,(char*)NULL);
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__MLPLN_TObjArray),-1,-1,4,"fpre=",0,"pointers to the previous level in a network");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__MLPLN_TObjArray),-1,-1,4,"fpost=",0,"pointers to the next level in a network");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fWeight=",0,"weight used for computation");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fNorm[2]=",0,"normalisation to mean=0, RMS=1.");
   G__memvar_setup((void*)NULL,105,0,0,G__get_linked_tagnum(&G__G__MLPLN_TNeuroncLcLNeuronType),-1,-1,4,"fType=",0,"neuron type");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__MLPLN_TTreeFormula),-1,-1,4,"fFormula=",0,"! formula to be used for inputs and outputs");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNewValue=",0,"! do we need to compute fValue again ?");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fValue=",0,"! buffer containing the last neuron output");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNewDeriv=",0,"! do we need to compute fDerivative again ?");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDerivative=",0,"! buffer containing the last neuron derivative");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNewDeDw=",0,"! do we need to compute fDeDw again ?");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDeDw=",0,"! buffer containing the last derivative of the error");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDEDw=",0,"! buffer containing the sum over all examples of DeDw");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__MLPLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TSynapse */
static void G__setup_memvarTSynapse(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__MLPLN_TSynapse));
   { TSynapse *p; p=(TSynapse*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__MLPLN_TNeuron),-1,-1,4,"fpre=",0,"the neuron before the synapse");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__MLPLN_TNeuron),-1,-1,4,"fpost=",0,"the neuron after the synapse");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fweight=",0,"the weight of the synapse");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDEDw=",0,"! the derivative of the total error wrt the synapse weight");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__MLPLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__MLP() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTMultiLayerPerceptron(void) {
   /* TMultiLayerPerceptron */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptron));
   G__memfunc_setup("TMultiLayerPerceptron",2174,G__G__MLP_195_1_0,105,G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptron),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TMultiLayerPerceptron",2174,G__G__MLP_195_2_0,105,G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptron),-1,0,4,1,1,0,
"C - - 10 - layout U 'TTree' - 0 NULL data "
"C - - 10 \"Entry$%2==0\" training C - - 10 \"\" test",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TMultiLayerPerceptron",2174,G__G__MLP_195_3_0,105,G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptron),-1,0,5,1,1,0,
"C - - 10 - layout C - - 10 - weight "
"U 'TTree' - 0 NULL data C - - 10 \"Entry$%2==0\" training "
"C - - 10 \"\" test",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TMultiLayerPerceptron",2174,G__G__MLP_195_4_0,105,G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptron),-1,0,4,1,1,0,
"C - - 10 - layout U 'TTree' - 0 - data "
"U 'TEventList' - 0 - training U 'TEventList' - 0 - test",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TMultiLayerPerceptron",2174,G__G__MLP_195_5_0,105,G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptron),-1,0,5,1,1,0,
"C - - 10 - layout C - - 10 - weight "
"U 'TTree' - 0 - data U 'TEventList' - 0 - training "
"U 'TEventList' - 0 - test",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetData",678,G__G__MLP_195_6_0,121,-1,-1,0,1,1,1,0,"U 'TTree' - 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetTrainingDataSet",1806,G__G__MLP_195_7_0,121,-1,-1,0,1,1,1,0,"U 'TEventList' - 0 - train",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetTestDataSet",1394,G__G__MLP_195_8_0,121,-1,-1,0,1,1,1,0,"U 'TEventList' - 0 - test",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetTrainingDataSet",1806,G__G__MLP_195_9_0,121,-1,-1,0,1,1,1,0,"C - - 10 - train",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetTestDataSet",1394,G__G__MLP_195_0_1,121,-1,-1,0,1,1,1,0,"C - - 10 - test",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetLearningMethod",1725,G__G__MLP_195_1_1,121,-1,-1,0,1,1,1,0,"i 'TMultiLayerPerceptron::LearningMethod' - 0 - method",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetEventWeight",1430,G__G__MLP_195_2_1,121,-1,-1,0,1,1,1,0,"C - - 10 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Train",510,G__G__MLP_195_3_1,121,-1,-1,0,2,1,1,0,
"i - 'Int_t' 0 - nEpoch C - 'Option_t' 10 \"text\" option",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Result",639,G__G__MLP_195_4_1,100,-1,G__defined_typename("Double_t"),0,2,1,1,8,
"i - 'Int_t' 0 - event i - 'Int_t' 0 0 index",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetError",810,G__G__MLP_195_5_1,100,-1,G__defined_typename("Double_t"),0,1,1,1,8,"i - 'Int_t' 0 - event",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetError",810,G__G__MLP_195_6_1,100,-1,G__defined_typename("Double_t"),0,1,1,1,8,"i 'TMultiLayerPerceptron::DataSet' - 0 - set",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ComputeDEDw",1057,G__G__MLP_195_7_1,121,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Randomize",937,G__G__MLP_195_8_1,121,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetEta",582,G__G__MLP_195_9_1,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 0 - eta",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetEpsilon",1030,G__G__MLP_195_0_2,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 0 - eps",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetDelta",790,G__G__MLP_195_1_2,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 0 - delta",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetEtaDecay",1068,G__G__MLP_195_2_2,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 0 - ed",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetTau",598,G__G__MLP_195_3_2,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 0 - tau",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetReset",815,G__G__MLP_195_4_2,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 - reset",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetEta",570,G__G__MLP_195_5_2,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetEpsilon",1018,G__G__MLP_195_6_2,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetDelta",778,G__G__MLP_195_7_2,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetEtaDecay",1056,G__G__MLP_195_8_2,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetTau",586,G__G__MLP_195_9_2,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetReset",803,G__G__MLP_195_0_3,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetStructure",1265,G__G__MLP_195_1_3,117,G__get_linked_tagnum(&G__G__MLPLN_TString),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DrawResult",1037,G__G__MLP_195_2_3,121,-1,-1,0,2,1,1,8,
"i - 'Int_t' 0 0 index C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DumpWeights",1137,G__G__MLP_195_3_3,121,-1,-1,0,1,1,1,8,"C - 'Option_t' 10 \"-\" filename",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("LoadWeights",1115,G__G__MLP_195_4_3,121,-1,-1,0,1,1,1,0,"C - 'Option_t' 10 \"\" filename",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Evaluate",823,G__G__MLP_195_5_3,100,-1,G__defined_typename("Double_t"),0,2,1,1,8,
"i - 'Int_t' 0 - index D - 'Double_t' 0 - params",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Export",642,G__G__MLP_195_6_3,121,-1,-1,0,2,1,1,8,
"C - 'Option_t' 10 \"NNfunction\" filename C - 'Option_t' 10 \"C++\" language",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Draw",398,G__G__MLP_195_7_3,121,-1,-1,0,1,1,1,0,"C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("AttachData",975,(G__InterfaceMethod)NULL,121,-1,-1,0,0,1,2,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("BuildNetwork",1242,(G__InterfaceMethod)NULL,121,-1,-1,0,0,1,2,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetEntry",818,(G__InterfaceMethod)NULL,121,-1,-1,0,1,1,2,8,"i - 'Int_t' 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("MLP_Stochastic",1373,(G__InterfaceMethod)NULL,121,-1,-1,0,1,1,2,0,"D - 'Double_t' 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("MLP_Batch",810,(G__InterfaceMethod)NULL,121,-1,-1,0,1,1,2,0,"D - 'Double_t' 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("LineSearch",990,(G__InterfaceMethod)NULL,103,-1,G__defined_typename("Bool_t"),0,2,1,2,0,
"D - 'Double_t' 0 - - D - 'Double_t' 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SteepestDir",1132,(G__InterfaceMethod)NULL,121,-1,-1,0,1,1,2,0,"D - 'Double_t' 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ConjugateGradientsDir",2144,(G__InterfaceMethod)NULL,121,-1,-1,0,2,1,2,0,
"D - 'Double_t' 0 - - d - 'Double_t' 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetGammaDelta",1273,(G__InterfaceMethod)NULL,121,-1,-1,0,3,1,2,0,
"u 'TMatrixD' - 1 - - u 'TMatrixD' - 1 - - "
"D - 'Double_t' 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetBFGSH",650,(G__InterfaceMethod)NULL,103,-1,-1,0,3,1,2,0,
"u 'TMatrixD' - 1 - - u 'TMatrixD' - 1 - - "
"u 'TMatrixD' - 1 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("BFGSDir",577,(G__InterfaceMethod)NULL,121,-1,-1,0,2,1,2,0,
"u 'TMatrixD' - 1 - - D - 'Double_t' 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DerivDir",793,(G__InterfaceMethod)NULL,100,-1,G__defined_typename("Double_t"),0,1,1,2,0,"D - 'Double_t' 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("BuildFirstLayer",1525,(G__InterfaceMethod)NULL,121,-1,-1,0,1,1,4,0,"u 'TString' - 1 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("BuildHiddenLayers",1708,(G__InterfaceMethod)NULL,121,-1,-1,0,1,1,4,0,"u 'TString' - 1 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("BuildLastLayer",1409,(G__InterfaceMethod)NULL,121,-1,-1,0,2,1,4,0,
"u 'TString' - 1 - - i - 'Int_t' 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Shuffle",717,(G__InterfaceMethod)NULL,121,-1,-1,0,2,1,4,8,
"I - 'Int_t' 0 - - i - 'Int_t' 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("MLP_Line",720,(G__InterfaceMethod)NULL,121,-1,-1,0,3,1,4,0,
"D - 'Double_t' 0 - - D - 'Double_t' 0 - - "
"d - 'Double_t' 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__MLP_195_5_5,85,G__get_linked_tagnum(&G__G__MLPLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TMultiLayerPerceptron::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__MLP_195_6_5,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TMultiLayerPerceptron::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__MLP_195_7_5,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TMultiLayerPerceptron::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__MLP_195_8_5,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TMultiLayerPerceptron::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__MLP_195_9_5,85,G__get_linked_tagnum(&G__G__MLPLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__MLP_195_0_6,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__MLP_195_1_6,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__MLP_195_2_6,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__MLP_195_3_6,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TMultiLayerPerceptron::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__MLP_195_4_6,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TMultiLayerPerceptron::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__MLP_195_5_6,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TMultiLayerPerceptron::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__MLP_195_6_6,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TMultiLayerPerceptron::DeclFileLine),0);
   // automatic destructor
   G__memfunc_setup("~TMultiLayerPerceptron",2300,G__G__MLP_195_7_6,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTMLPAnalyzer(void) {
   /* TMLPAnalyzer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__MLPLN_TMLPAnalyzer));
   G__memfunc_setup("GetLayers",912,(G__InterfaceMethod)NULL,105,-1,G__defined_typename("Int_t"),0,0,1,2,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetNeurons",1034,(G__InterfaceMethod)NULL,105,-1,G__defined_typename("Int_t"),0,1,1,2,0,"i - 'Int_t' 0 - layer",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetNeuronFormula",1645,(G__InterfaceMethod)NULL,117,G__get_linked_tagnum(&G__G__MLPLN_TString),-1,0,1,1,2,0,"i - 'Int_t' 0 - idx",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetInputNeuronTitle",1961,(G__InterfaceMethod)NULL,67,-1,-1,0,1,1,2,1,"i - 'Int_t' 0 - in",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetOutputNeuronTitle",2090,(G__InterfaceMethod)NULL,67,-1,-1,0,1,1,2,1,"i - 'Int_t' 0 - out",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TMLPAnalyzer",1155,G__G__MLP_196_6_0,105,G__get_linked_tagnum(&G__G__MLPLN_TMLPAnalyzer),-1,0,1,1,1,0,"u 'TMultiLayerPerceptron' - 1 - net",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TMLPAnalyzer",1155,G__G__MLP_196_7_0,105,G__get_linked_tagnum(&G__G__MLPLN_TMLPAnalyzer),-1,0,1,1,1,0,"U 'TMultiLayerPerceptron' - 0 - net",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DrawNetwork",1144,G__G__MLP_196_8_0,121,-1,-1,0,3,1,1,0,
"i - 'Int_t' 0 - neuron C - - 10 - signal "
"C - - 10 - bg",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DrawDInput",994,G__G__MLP_196_9_0,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 - i",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DrawDInputs",1109,G__G__MLP_196_0_1,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DrawTruthDeviation",1864,G__G__MLP_196_1_1,85,G__get_linked_tagnum(&G__G__MLPLN_TProfile),-1,0,2,1,1,0,
"i - 'Int_t' 0 0 outnode C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DrawTruthDeviations",1979,G__G__MLP_196_2_1,85,G__get_linked_tagnum(&G__G__MLPLN_THStack),-1,0,1,1,1,0,"C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DrawTruthDeviationInOut",2359,G__G__MLP_196_3_1,85,G__get_linked_tagnum(&G__G__MLPLN_TProfile),-1,0,3,1,1,0,
"i - 'Int_t' 0 - innode i - 'Int_t' 0 0 outnode "
"C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DrawTruthDeviationInsOut",2474,G__G__MLP_196_4_1,85,G__get_linked_tagnum(&G__G__MLPLN_THStack),-1,0,2,1,1,0,
"i - 'Int_t' 0 0 outnode C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("CheckNetwork",1224,G__G__MLP_196_5_1,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GatherInformations",1876,G__G__MLP_196_6_1,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetIOTree",840,G__G__MLP_196_7_1,85,G__get_linked_tagnum(&G__G__MLPLN_TTree),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__MLP_196_8_1,85,G__get_linked_tagnum(&G__G__MLPLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TMLPAnalyzer::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__MLP_196_9_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TMLPAnalyzer::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__MLP_196_0_2,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TMLPAnalyzer::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__MLP_196_1_2,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TMLPAnalyzer::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__MLP_196_2_2,85,G__get_linked_tagnum(&G__G__MLPLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__MLP_196_3_2,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__MLP_196_4_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__MLP_196_5_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__MLP_196_6_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TMLPAnalyzer::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__MLP_196_7_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TMLPAnalyzer::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__MLP_196_8_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TMLPAnalyzer::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__MLP_196_9_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TMLPAnalyzer::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TMLPAnalyzer",1155,G__G__MLP_196_0_3,(int)('i'),G__get_linked_tagnum(&G__G__MLPLN_TMLPAnalyzer),-1,0,1,1,1,0,"u 'TMLPAnalyzer' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TMLPAnalyzer",1281,G__G__MLP_196_1_3,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__MLP_196_2_3,(int)('u'),G__get_linked_tagnum(&G__G__MLPLN_TMLPAnalyzer),-1,1,1,1,1,0,"u 'TMLPAnalyzer' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTNeuron(void) {
   /* TNeuron */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__MLPLN_TNeuron));
   G__memfunc_setup("TNeuron",715,G__G__MLP_199_1_0,105,G__get_linked_tagnum(&G__G__MLPLN_TNeuron),-1,0,3,1,1,0,
"i 'TNeuron::NeuronType' - 0 kSigmoid type C - - 10 \"\" name "
"C - - 10 \"\" title",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetPre",583,G__G__MLP_199_2_0,85,G__get_linked_tagnum(&G__G__MLPLN_TSynapse),-1,0,1,1,1,8,"i - 'Int_t' 0 - n",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetPost",710,G__G__MLP_199_3_0,85,G__get_linked_tagnum(&G__G__MLPLN_TSynapse),-1,0,1,1,1,8,"i - 'Int_t' 0 - n",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("UseBranch",891,G__G__MLP_199_4_0,85,G__get_linked_tagnum(&G__G__MLPLN_TTreeFormula),-1,0,2,1,1,0,
"U 'TTree' - 0 - - C - - 10 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetValue",797,G__G__MLP_199_5_0,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetDerivative",1331,G__G__MLP_199_6_0,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetError",810,G__G__MLP_199_7_0,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetDeDw",644,G__G__MLP_199_8_0,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetBranch",878,G__G__MLP_199_9_0,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetWeight",916,G__G__MLP_199_0_1,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 0 - w",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetWeight",904,G__G__MLP_199_1_1,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetNormalisation",1676,G__G__MLP_199_2_1,121,-1,-1,0,2,1,1,0,
"d - 'Double_t' 0 - mean d - 'Double_t' 0 - RMS",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetNormalisation",1664,G__G__MLP_199_3_1,68,-1,G__defined_typename("Double_t"),0,0,1,1,9,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetNewEvent",1112,G__G__MLP_199_4_1,121,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetDEDw",624,G__G__MLP_199_5_1,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 0 - in",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetDEDw",612,G__G__MLP_199_6_1,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ForceExternalValue",1839,G__G__MLP_199_7_1,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 0 - value",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Sigmoid",716,(G__InterfaceMethod)NULL,100,-1,G__defined_typename("Double_t"),0,1,1,2,8,"d - 'Double_t' 0 - x",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DSigmoid",784,(G__InterfaceMethod)NULL,100,-1,G__defined_typename("Double_t"),0,1,1,2,8,"d - 'Double_t' 0 - x",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("AddPre",560,(G__InterfaceMethod)NULL,121,-1,-1,0,1,1,2,0,"U 'TSynapse' - 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("AddPost",687,(G__InterfaceMethod)NULL,121,-1,-1,0,1,1,2,0,"U 'TSynapse' - 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__MLP_199_2_2,85,G__get_linked_tagnum(&G__G__MLPLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TNeuron::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__MLP_199_3_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TNeuron::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__MLP_199_4_2,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TNeuron::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__MLP_199_5_2,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TNeuron::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__MLP_199_6_2,85,G__get_linked_tagnum(&G__G__MLPLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__MLP_199_7_2,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__MLP_199_8_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__MLP_199_9_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__MLP_199_0_3,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TNeuron::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__MLP_199_1_3,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TNeuron::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__MLP_199_2_3,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TNeuron::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__MLP_199_3_3,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TNeuron::DeclFileLine),0);
   // automatic destructor
   G__memfunc_setup("~TNeuron",841,G__G__MLP_199_4_3,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTSynapse(void) {
   /* TSynapse */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__MLPLN_TSynapse));
   G__memfunc_setup("TSynapse",823,G__G__MLP_200_1_0,105,G__get_linked_tagnum(&G__G__MLPLN_TSynapse),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TSynapse",823,G__G__MLP_200_2_0,105,G__get_linked_tagnum(&G__G__MLPLN_TSynapse),-1,0,3,1,1,0,
"U 'TNeuron' - 0 - - U 'TNeuron' - 0 - - "
"d - 'Double_t' 0 1 w",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetPre",595,G__G__MLP_200_3_0,121,-1,-1,0,1,1,1,0,"U 'TNeuron' - 0 - pre",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetPost",722,G__G__MLP_200_4_0,121,-1,-1,0,1,1,1,0,"U 'TNeuron' - 0 - post",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetPre",583,G__G__MLP_200_5_0,85,G__get_linked_tagnum(&G__G__MLPLN_TNeuron),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetPost",710,G__G__MLP_200_6_0,85,G__get_linked_tagnum(&G__G__MLPLN_TNeuron),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetWeight",916,G__G__MLP_200_7_0,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 0 - w",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetWeight",904,G__G__MLP_200_8_0,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetValue",797,G__G__MLP_200_9_0,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetDeDw",644,G__G__MLP_200_0_1,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetDEDw",624,G__G__MLP_200_1_1,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 0 - in",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetDEDw",612,G__G__MLP_200_2_1,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__MLP_200_3_1,85,G__get_linked_tagnum(&G__G__MLPLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TSynapse::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__MLP_200_4_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TSynapse::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__MLP_200_5_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TSynapse::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__MLP_200_6_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TSynapse::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__MLP_200_7_1,85,G__get_linked_tagnum(&G__G__MLPLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__MLP_200_8_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__MLP_200_9_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__MLP_200_0_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__MLP_200_1_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TSynapse::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__MLP_200_2_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TSynapse::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__MLP_200_3_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TSynapse::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__MLP_200_4_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TSynapse::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TSynapse",823,G__G__MLP_200_5_2,(int)('i'),G__get_linked_tagnum(&G__G__MLPLN_TSynapse),-1,0,1,1,1,0,"u 'TSynapse' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TSynapse",949,G__G__MLP_200_6_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__MLP_200_7_2,(int)('u'),G__get_linked_tagnum(&G__G__MLPLN_TSynapse),-1,1,1,1,1,0,"u 'TSynapse' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__MLP() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__MLP() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__MLP() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__MLPLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR = { "vector<TStreamerInfo*,allocator<TStreamerInfo*> >" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TStreamerInfo*,allocator<TStreamerInfo*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_TMatrixD = { "TMatrixD" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_TEventList = { "TEventList" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_TTreeFormula = { "TTreeFormula" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_TTreeFormulaManager = { "TTreeFormulaManager" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_TMultiLayerPerceptron = { "TMultiLayerPerceptron" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_TMLPAnalyzer = { "TMLPAnalyzer" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_TMultiLayerPerceptroncLcLLearningMethod = { "TMultiLayerPerceptron::LearningMethod" , 101 , -1 };
G__linked_taginfo G__G__MLPLN_TMultiLayerPerceptroncLcLDataSet = { "TMultiLayerPerceptron::DataSet" , 101 , -1 };
G__linked_taginfo G__G__MLPLN_TNeuron = { "TNeuron" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_TSynapse = { "TSynapse" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_TNeuroncLcLNeuronType = { "TNeuron::NeuronType" , 101 , -1 };
G__linked_taginfo G__G__MLPLN_TProfile = { "TProfile" , 99 , -1 };
G__linked_taginfo G__G__MLPLN_THStack = { "THStack" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__MLP() {
  G__G__MLPLN_TClass.tagnum = -1 ;
  G__G__MLPLN_TBuffer.tagnum = -1 ;
  G__G__MLPLN_TMemberInspector.tagnum = -1 ;
  G__G__MLPLN_TObject.tagnum = -1 ;
  G__G__MLPLN_TNamed.tagnum = -1 ;
  G__G__MLPLN_TObjArray.tagnum = -1 ;
  G__G__MLPLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR.tagnum = -1 ;
  G__G__MLPLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__MLPLN_TString.tagnum = -1 ;
  G__G__MLPLN_TMatrixD.tagnum = -1 ;
  G__G__MLPLN_TTree.tagnum = -1 ;
  G__G__MLPLN_TEventList.tagnum = -1 ;
  G__G__MLPLN_TTreeFormula.tagnum = -1 ;
  G__G__MLPLN_TTreeFormulaManager.tagnum = -1 ;
  G__G__MLPLN_TMultiLayerPerceptron.tagnum = -1 ;
  G__G__MLPLN_TMLPAnalyzer.tagnum = -1 ;
  G__G__MLPLN_TMultiLayerPerceptroncLcLLearningMethod.tagnum = -1 ;
  G__G__MLPLN_TMultiLayerPerceptroncLcLDataSet.tagnum = -1 ;
  G__G__MLPLN_TNeuron.tagnum = -1 ;
  G__G__MLPLN_TSynapse.tagnum = -1 ;
  G__G__MLPLN_TNeuroncLcLNeuronType.tagnum = -1 ;
  G__G__MLPLN_TProfile.tagnum = -1 ;
  G__G__MLPLN_THStack.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__MLP() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum(&G__G__MLPLN_TClass);
   G__get_linked_tagnum(&G__G__MLPLN_TBuffer);
   G__get_linked_tagnum(&G__G__MLPLN_TMemberInspector);
   G__get_linked_tagnum(&G__G__MLPLN_TObject);
   G__get_linked_tagnum(&G__G__MLPLN_TNamed);
   G__get_linked_tagnum(&G__G__MLPLN_TObjArray);
   G__get_linked_tagnum(&G__G__MLPLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR);
   G__get_linked_tagnum(&G__G__MLPLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__G__MLPLN_TString);
   G__get_linked_tagnum(&G__G__MLPLN_TMatrixD);
   G__get_linked_tagnum(&G__G__MLPLN_TTree);
   G__get_linked_tagnum(&G__G__MLPLN_TEventList);
   G__get_linked_tagnum(&G__G__MLPLN_TTreeFormula);
   G__get_linked_tagnum(&G__G__MLPLN_TTreeFormulaManager);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptron),sizeof(TMultiLayerPerceptron),-1,324864,"a Neural Network",G__setup_memvarTMultiLayerPerceptron,G__setup_memfuncTMultiLayerPerceptron);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__MLPLN_TMLPAnalyzer),sizeof(TMLPAnalyzer),-1,324608,(char*)NULL,G__setup_memvarTMLPAnalyzer,G__setup_memfuncTMLPAnalyzer);
   G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptroncLcLLearningMethod);
   G__get_linked_tagnum(&G__G__MLPLN_TMultiLayerPerceptroncLcLDataSet);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__MLPLN_TNeuron),sizeof(TNeuron),-1,324864,"Neuron for MultiLayerPerceptrons",G__setup_memvarTNeuron,G__setup_memfuncTNeuron);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__MLPLN_TSynapse),sizeof(TSynapse),-1,324864,"simple weighted bidirectionnal connection between 2 neurons",G__setup_memvarTSynapse,G__setup_memfuncTSynapse);
   G__get_linked_tagnum(&G__G__MLPLN_TNeuroncLcLNeuronType);
   G__get_linked_tagnum(&G__G__MLPLN_TProfile);
   G__get_linked_tagnum(&G__G__MLPLN_THStack);
}
extern "C" void G__cpp_setupG__MLP(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__MLP()");
  G__set_cpp_environmentG__MLP();
  G__cpp_setup_tagtableG__MLP();

  G__cpp_setup_inheritanceG__MLP();

  G__cpp_setup_typetableG__MLP();

  G__cpp_setup_memvarG__MLP();

  G__cpp_setup_memfuncG__MLP();
  G__cpp_setup_globalG__MLP();
  G__cpp_setup_funcG__MLP();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__MLP();
  return;
}
class G__cpp_setup_initG__MLP {
  public:
    G__cpp_setup_initG__MLP() { G__add_setup_func("G__MLP",(G__incsetup)(&G__cpp_setupG__MLP)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__MLP() { G__remove_setup_func("G__MLP"); }
};
G__cpp_setup_initG__MLP G__cpp_setup_initializerG__MLP;

