//
// File generated by utils/src/rootcint_tmp at Wed Jul  1 06:30:46 2020.
// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

#include "G__Foam.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TStreamerInfo.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"

#include "TCollectionProxy.h"

namespace ROOT {
   namespace Shadow {
   } // Of namespace ROOT::Shadow
} // Of namespace ROOT

namespace ROOT {
   void TFoamMaxwt_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TFoamMaxwt_IsA(const void*);
   static void *new_TFoamMaxwt(void *p = 0);
   static void *newArray_TFoamMaxwt(Long_t size);
   static void delete_TFoamMaxwt(void *p);
   static void deleteArray_TFoamMaxwt(void *p);
   static void destruct_TFoamMaxwt(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TFoamMaxwt*)
   {
      ::TFoamMaxwt *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TFoamMaxwt", ::TFoamMaxwt::Class_Version(), "foam/inc/TFoamMaxwt.h", 20,
                  typeid(::TFoamMaxwt), DefineBehavior(ptr, ptr),
                  &::TFoamMaxwt::Dictionary, &TFoamMaxwt_IsA, 4,
                  sizeof(::TFoamMaxwt) );
      instance.SetNew(&new_TFoamMaxwt);
      instance.SetNewArray(&newArray_TFoamMaxwt);
      instance.SetDelete(&delete_TFoamMaxwt);
      instance.SetDeleteArray(&deleteArray_TFoamMaxwt);
      instance.SetDestructor(&destruct_TFoamMaxwt);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TFoamMaxwt*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TFoamIntegrand_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TFoamIntegrand_IsA(const void*);
   static void delete_TFoamIntegrand(void *p);
   static void deleteArray_TFoamIntegrand(void *p);
   static void destruct_TFoamIntegrand(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TFoamIntegrand*)
   {
      ::TFoamIntegrand *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TFoamIntegrand", ::TFoamIntegrand::Class_Version(), "foam/inc/TFoamIntegrand.h", 16,
                  typeid(::TFoamIntegrand), DefineBehavior(ptr, ptr),
                  &::TFoamIntegrand::Dictionary, &TFoamIntegrand_IsA, 4,
                  sizeof(::TFoamIntegrand) );
      instance.SetDelete(&delete_TFoamIntegrand);
      instance.SetDeleteArray(&deleteArray_TFoamIntegrand);
      instance.SetDestructor(&destruct_TFoamIntegrand);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TFoamIntegrand*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TFoamVect_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TFoamVect_IsA(const void*);
   static void *new_TFoamVect(void *p = 0);
   static void *newArray_TFoamVect(Long_t size);
   static void delete_TFoamVect(void *p);
   static void deleteArray_TFoamVect(void *p);
   static void destruct_TFoamVect(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TFoamVect*)
   {
      ::TFoamVect *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TFoamVect", ::TFoamVect::Class_Version(), "foam/inc/TFoamVect.h", 20,
                  typeid(::TFoamVect), DefineBehavior(ptr, ptr),
                  &::TFoamVect::Dictionary, &TFoamVect_IsA, 4,
                  sizeof(::TFoamVect) );
      instance.SetNew(&new_TFoamVect);
      instance.SetNewArray(&newArray_TFoamVect);
      instance.SetDelete(&delete_TFoamVect);
      instance.SetDeleteArray(&deleteArray_TFoamVect);
      instance.SetDestructor(&destruct_TFoamVect);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TFoamVect*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TFoamCell_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TFoamCell_IsA(const void*);
   static void *new_TFoamCell(void *p = 0);
   static void *newArray_TFoamCell(Long_t size);
   static void delete_TFoamCell(void *p);
   static void deleteArray_TFoamCell(void *p);
   static void destruct_TFoamCell(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TFoamCell*)
   {
      ::TFoamCell *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TFoamCell", ::TFoamCell::Class_Version(), "foam/inc/TFoamCell.h", 22,
                  typeid(::TFoamCell), DefineBehavior(ptr, ptr),
                  &::TFoamCell::Dictionary, &TFoamCell_IsA, 4,
                  sizeof(::TFoamCell) );
      instance.SetNew(&new_TFoamCell);
      instance.SetNewArray(&newArray_TFoamCell);
      instance.SetDelete(&delete_TFoamCell);
      instance.SetDeleteArray(&deleteArray_TFoamCell);
      instance.SetDestructor(&destruct_TFoamCell);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TFoamCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TFoam_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TFoam_IsA(const void*);
   static void *new_TFoam(void *p = 0);
   static void *newArray_TFoam(Long_t size);
   static void delete_TFoam(void *p);
   static void deleteArray_TFoam(void *p);
   static void destruct_TFoam(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TFoam*)
   {
      ::TFoam *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TFoam", ::TFoam::Class_Version(), "foam/inc/TFoam.h", 30,
                  typeid(::TFoam), DefineBehavior(ptr, ptr),
                  &::TFoam::Dictionary, &TFoam_IsA, 4,
                  sizeof(::TFoam) );
      instance.SetNew(&new_TFoam);
      instance.SetNewArray(&newArray_TFoam);
      instance.SetDelete(&delete_TFoam);
      instance.SetDeleteArray(&deleteArray_TFoam);
      instance.SetDestructor(&destruct_TFoam);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TFoam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

//______________________________________________________________________________
TClass *TFoamMaxwt::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TFoamMaxwt::Class_Name()
{
   return "TFoamMaxwt";
}

//______________________________________________________________________________
const char *TFoamMaxwt::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TFoamMaxwt*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TFoamMaxwt::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TFoamMaxwt*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TFoamMaxwt::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TFoamMaxwt*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TFoamMaxwt::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TFoamMaxwt*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TFoamIntegrand::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TFoamIntegrand::Class_Name()
{
   return "TFoamIntegrand";
}

//______________________________________________________________________________
const char *TFoamIntegrand::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TFoamIntegrand*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TFoamIntegrand::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TFoamIntegrand*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TFoamIntegrand::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TFoamIntegrand*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TFoamIntegrand::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TFoamIntegrand*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TFoamVect::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TFoamVect::Class_Name()
{
   return "TFoamVect";
}

//______________________________________________________________________________
const char *TFoamVect::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TFoamVect*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TFoamVect::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TFoamVect*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TFoamVect::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TFoamVect*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TFoamVect::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TFoamVect*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TFoamCell::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TFoamCell::Class_Name()
{
   return "TFoamCell";
}

//______________________________________________________________________________
const char *TFoamCell::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TFoamCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TFoamCell::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TFoamCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TFoamCell::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TFoamCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TFoamCell::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TFoamCell*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TFoam::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TFoam::Class_Name()
{
   return "TFoam";
}

//______________________________________________________________________________
const char *TFoam::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TFoam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TFoam::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TFoam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TFoam::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TFoam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TFoam::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TFoam*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TFoamIntegrand::Streamer(TBuffer &R__b)
{
   // Stream an object of class TFoamIntegrand.

   if (R__b.IsReading()) {
      TFoamIntegrand::Class()->ReadBuffer(R__b, this);
   } else {
      TFoamIntegrand::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TFoamIntegrand::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TFoamIntegrand.

      TClass *R__cl = ::TFoamIntegrand::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TFoamIntegrand_IsA(const void *obj) {
      return ((::TFoamIntegrand*)obj)->IsA();
   }
   // Wrapper around operator delete
   static void delete_TFoamIntegrand(void *p) {
      delete ((::TFoamIntegrand*)p);
   }
   static void deleteArray_TFoamIntegrand(void *p) {
      delete [] ((::TFoamIntegrand*)p);
   }
   static void destruct_TFoamIntegrand(void *p) {
      typedef ::TFoamIntegrand current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TFoamIntegrand

//______________________________________________________________________________
void TFoamMaxwt::Streamer(TBuffer &R__b)
{
   // Stream an object of class TFoamMaxwt.

   if (R__b.IsReading()) {
      TFoamMaxwt::Class()->ReadBuffer(R__b, this);
   } else {
      TFoamMaxwt::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TFoamMaxwt::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TFoamMaxwt.

      TClass *R__cl = ::TFoamMaxwt::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fNent", &fNent);
      R__insp.Inspect(R__cl, R__parent, "fnBin", &fnBin);
      R__insp.Inspect(R__cl, R__parent, "fwmax", &fwmax);
      R__insp.Inspect(R__cl, R__parent, "*fWtHst1", &fWtHst1);
      R__insp.Inspect(R__cl, R__parent, "*fWtHst2", &fWtHst2);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TFoamMaxwt_IsA(const void *obj) {
      return ((::TFoamMaxwt*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TFoamMaxwt(void *p) {
      return  p ? new(p) ::TFoamMaxwt : new ::TFoamMaxwt;
   }
   static void *newArray_TFoamMaxwt(Long_t size) {
      return new ::TFoamMaxwt[size];
   }
   // Wrapper around operator delete
   static void delete_TFoamMaxwt(void *p) {
      delete ((::TFoamMaxwt*)p);
   }
   static void deleteArray_TFoamMaxwt(void *p) {
      delete [] ((::TFoamMaxwt*)p);
   }
   static void destruct_TFoamMaxwt(void *p) {
      typedef ::TFoamMaxwt current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TFoamMaxwt

//______________________________________________________________________________
void TFoamVect::Streamer(TBuffer &R__b)
{
   // Stream an object of class TFoamVect.

   if (R__b.IsReading()) {
      TFoamVect::Class()->ReadBuffer(R__b, this);
   } else {
      TFoamVect::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TFoamVect::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TFoamVect.

      TClass *R__cl = ::TFoamVect::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fDim", &fDim);
      R__insp.Inspect(R__cl, R__parent, "*fCoords", &fCoords);
      R__insp.Inspect(R__cl, R__parent, "*fNext", &fNext);
      R__insp.Inspect(R__cl, R__parent, "*fPrev", &fPrev);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TFoamVect_IsA(const void *obj) {
      return ((::TFoamVect*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TFoamVect(void *p) {
      return  p ? new(p) ::TFoamVect : new ::TFoamVect;
   }
   static void *newArray_TFoamVect(Long_t size) {
      return new ::TFoamVect[size];
   }
   // Wrapper around operator delete
   static void delete_TFoamVect(void *p) {
      delete ((::TFoamVect*)p);
   }
   static void deleteArray_TFoamVect(void *p) {
      delete [] ((::TFoamVect*)p);
   }
   static void destruct_TFoamVect(void *p) {
      typedef ::TFoamVect current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TFoamVect

//______________________________________________________________________________
void TFoamCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class TFoamCell.

   if (R__b.IsReading()) {
      TFoamCell::Class()->ReadBuffer(R__b, this);
   } else {
      TFoamCell::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TFoamCell::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TFoamCell.

      TClass *R__cl = ::TFoamCell::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fDim", &fDim);
      R__insp.Inspect(R__cl, R__parent, "fSerial", &fSerial);
      R__insp.Inspect(R__cl, R__parent, "fStatus", &fStatus);
      R__insp.Inspect(R__cl, R__parent, "fParent", &fParent);
      fParent.ShowMembers(R__insp, strcat(R__parent,"fParent.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fDaught0", &fDaught0);
      fDaught0.ShowMembers(R__insp, strcat(R__parent,"fDaught0.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fDaught1", &fDaught1);
      fDaught1.ShowMembers(R__insp, strcat(R__parent,"fDaught1.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fXdiv", &fXdiv);
      R__insp.Inspect(R__cl, R__parent, "fBest", &fBest);
      R__insp.Inspect(R__cl, R__parent, "fVolume", &fVolume);
      R__insp.Inspect(R__cl, R__parent, "fIntegral", &fIntegral);
      R__insp.Inspect(R__cl, R__parent, "fDrive", &fDrive);
      R__insp.Inspect(R__cl, R__parent, "fPrimary", &fPrimary);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TFoamCell_IsA(const void *obj) {
      return ((::TFoamCell*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TFoamCell(void *p) {
      return  p ? new(p) ::TFoamCell : new ::TFoamCell;
   }
   static void *newArray_TFoamCell(Long_t size) {
      return new ::TFoamCell[size];
   }
   // Wrapper around operator delete
   static void delete_TFoamCell(void *p) {
      delete ((::TFoamCell*)p);
   }
   static void deleteArray_TFoamCell(void *p) {
      delete [] ((::TFoamCell*)p);
   }
   static void destruct_TFoamCell(void *p) {
      typedef ::TFoamCell current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TFoamCell

//______________________________________________________________________________
void R__TFoam_fCells(TBuffer &R__b, void *R__p, int R__n)
{
   TFoamCell*** fCells = (TFoamCell***)R__p;
   if (R__b.IsReading()) {
      delete [] *fCells;
      if (!R__n) return;
      *fCells = new TFoamCell*[R__n];
      TFoamCell** R__s = *fCells;
      for (Int_t R__l = 0; R__l < R__n; R__l++) {
         R__s[R__l] = new TFoamCell();
         R__s[R__l]->Streamer(R__b);
      }
   } else {
      TFoamCell** R__s = *fCells;
      for (Int_t R__l = 0; R__l < R__n; R__l++) {
         R__s[R__l]->Streamer(R__b);
      }
   }
}

//______________________________________________________________________________
void TFoam::Streamer(TBuffer &R__b)
{
   // Stream an object of class TFoam.

   if (R__b.IsReading()) {
      TFoam::Class()->ReadBuffer(R__b, this);
   } else {
      TFoam::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TFoam::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TFoam.

      TClass *R__cl = ::TFoam::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fName", &fName);
      fName.ShowMembers(R__insp, strcat(R__parent,"fName.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fVersion", &fVersion);
      fVersion.ShowMembers(R__insp, strcat(R__parent,"fVersion.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fDate", &fDate);
      fDate.ShowMembers(R__insp, strcat(R__parent,"fDate.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fDim", &fDim);
      R__insp.Inspect(R__cl, R__parent, "fNCells", &fNCells);
      R__insp.Inspect(R__cl, R__parent, "fRNmax", &fRNmax);
      R__insp.Inspect(R__cl, R__parent, "fOptDrive", &fOptDrive);
      R__insp.Inspect(R__cl, R__parent, "fChat", &fChat);
      R__insp.Inspect(R__cl, R__parent, "fOptRej", &fOptRej);
      R__insp.Inspect(R__cl, R__parent, "fNBin", &fNBin);
      R__insp.Inspect(R__cl, R__parent, "fNSampl", &fNSampl);
      R__insp.Inspect(R__cl, R__parent, "fEvPerBin", &fEvPerBin);
      R__insp.Inspect(R__cl, R__parent, "*fMaskDiv", &fMaskDiv);
      R__insp.Inspect(R__cl, R__parent, "*fInhiDiv", &fInhiDiv);
      R__insp.Inspect(R__cl, R__parent, "fOptPRD", &fOptPRD);
      R__insp.Inspect(R__cl, R__parent, "*fXdivPRD", &fXdivPRD);
      R__insp.Inspect(R__cl, R__parent, "fNoAct", &fNoAct);
      R__insp.Inspect(R__cl, R__parent, "fLastCe", &fLastCe);
      R__insp.Inspect(R__cl, R__parent, "*fCells", &fCells);
      R__cl->SetMemberStreamer("*fCells",R__TFoam_fCells);
      R__insp.Inspect(R__cl, R__parent, "*fMCMonit", &fMCMonit);
      R__insp.Inspect(R__cl, R__parent, "fMaxWtRej", &fMaxWtRej);
      R__insp.Inspect(R__cl, R__parent, "*fCellsAct", &fCellsAct);
      R__insp.Inspect(R__cl, R__parent, "*fPrimAcu", &fPrimAcu);
      R__insp.Inspect(R__cl, R__parent, "*fHistEdg", &fHistEdg);
      R__insp.Inspect(R__cl, R__parent, "*fHistDbg", &fHistDbg);
      R__insp.Inspect(R__cl, R__parent, "*fHistWt", &fHistWt);
      R__insp.Inspect(R__cl, R__parent, "*fMCvect", &fMCvect);
      R__insp.Inspect(R__cl, R__parent, "fMCwt", &fMCwt);
      R__insp.Inspect(R__cl, R__parent, "*fRvec", &fRvec);
      R__insp.Inspect(R__cl, R__parent, "*fRho", &fRho);
      R__insp.Inspect(R__cl, R__parent, "*fMethodCall", &fMethodCall);
      R__insp.Inspect(R__cl, R__parent, "*fPseRan", &fPseRan);
      R__insp.Inspect(R__cl, R__parent, "fNCalls", &fNCalls);
      R__insp.Inspect(R__cl, R__parent, "fNEffev", &fNEffev);
      R__insp.Inspect(R__cl, R__parent, "fSumWt", &fSumWt);
      R__insp.Inspect(R__cl, R__parent, "fSumWt2", &fSumWt2);
      R__insp.Inspect(R__cl, R__parent, "fSumOve", &fSumOve);
      R__insp.Inspect(R__cl, R__parent, "fNevGen", &fNevGen);
      R__insp.Inspect(R__cl, R__parent, "fWtMax", &fWtMax);
      R__insp.Inspect(R__cl, R__parent, "fWtMin", &fWtMin);
      R__insp.Inspect(R__cl, R__parent, "fPrime", &fPrime);
      R__insp.Inspect(R__cl, R__parent, "fMCresult", &fMCresult);
      R__insp.Inspect(R__cl, R__parent, "fMCerror", &fMCerror);
      R__insp.Inspect(R__cl, R__parent, "*fAlpha", &fAlpha);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TFoam_IsA(const void *obj) {
      return ((::TFoam*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TFoam(void *p) {
      return  p ? new(p) ::TFoam : new ::TFoam;
   }
   static void *newArray_TFoam(Long_t size) {
      return new ::TFoam[size];
   }
   // Wrapper around operator delete
   static void delete_TFoam(void *p) {
      delete ((::TFoam*)p);
   }
   static void deleteArray_TFoam(void *p) {
      delete [] ((::TFoam*)p);
   }
   static void destruct_TFoam(void *p) {
      typedef ::TFoam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TFoam

/********************************************************
* foam/src/G__Foam.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableG__Foam();

extern "C" void G__set_cpp_environmentG__Foam() {
  G__add_compiledheader("base/inc/TROOT.h");
  G__add_compiledheader("base/inc/TMemberInspector.h");
  G__add_compiledheader("foam/inc/TFoamMaxwt.h");
  G__add_compiledheader("foam/inc/TFoam.h");
  G__add_compiledheader("foam/inc/TFoamVect.h");
  G__add_compiledheader("foam/inc/TFoamCell.h");
  G__add_compiledheader("foam/inc/TFoamIntegrand.h");
  G__cpp_reset_tagtableG__Foam();
}
class G__foamdIsrcdIG__FoamdOcxx_tag {};

void* operator new(size_t size,G__foamdIsrcdIG__FoamdOcxx_tag* p) {
  if(p && G__PVOID!=G__getgvp()) return((void*)p);
#ifndef G__ROOT
  return(malloc(size));
#else
  return(::operator new(size));
#endif
}

/* dummy, for exception */
#ifdef G__EH_DUMMY_DELETE
void operator delete(void *p,G__foamdIsrcdIG__FoamdOcxx_tag* x) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}
#endif

static void G__operator_delete(void *p) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}

void G__DELDMY_foamdIsrcdIG__FoamdOcxx() { G__operator_delete(0); }

extern "C" int G__cpp_dllrevG__Foam() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TFoamMaxwt */
static int G__G__Foam_128_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TFoamMaxwt *p=NULL;
   if(G__getaryconstruct()) p=new TFoamMaxwt[G__getaryconstruct()];
   else                    p=new TFoamMaxwt;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TFoamMaxwt *p=NULL;
      p = new TFoamMaxwt((Double_t)G__double(libp->para[0]),(Int_t)G__int(libp->para[1]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TFoamMaxwt *p=NULL;
      p = new TFoamMaxwt(*(TFoamMaxwt*)libp->para[0].ref);
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamMaxwt*)(G__getstructoffset()))->Reset();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        const TFoamMaxwt& obj=((TFoamMaxwt*)(G__getstructoffset()))->operator=(*(TFoamMaxwt*)libp->para[0].ref);
         result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamMaxwt*)(G__getstructoffset()))->Fill((Double_t)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamMaxwt*)(G__getstructoffset()))->Make((Double_t)G__double(libp->para[0]),*(Double_t*)G__Doubleref(&libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamMaxwt*)(G__getstructoffset()))->GetMCeff((Double_t)G__double(libp->para[0]),*(Double_t*)G__Doubleref(&libp->para[1])
,*(Double_t*)G__Doubleref(&libp->para[2]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TFoamMaxwt::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TFoamMaxwt::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TFoamMaxwt::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TFoamMaxwt::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TFoamMaxwt*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamMaxwt*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamMaxwt*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamMaxwt*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TFoamMaxwt::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TFoamMaxwt::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TFoamMaxwt::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_128_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TFoamMaxwt::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TFoamMaxwt G__TTFoamMaxwt;
static int G__G__Foam_128_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TFoamMaxwt *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TFoamMaxwt *)((G__getstructoffset())+sizeof(TFoamMaxwt)*i);
   else  delete (TFoamMaxwt *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TFoamIntegrand */
static int G__G__Foam_132_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((TFoamIntegrand*)(G__getstructoffset()))->Density((Int_t)G__int(libp->para[0]),(Double_t*)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_132_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TFoamIntegrand::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_132_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TFoamIntegrand::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_132_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TFoamIntegrand::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_132_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TFoamIntegrand::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_132_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TFoamIntegrand*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_132_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamIntegrand*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_132_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamIntegrand*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_132_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamIntegrand*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_132_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TFoamIntegrand::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_132_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TFoamIntegrand::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_132_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TFoamIntegrand::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_132_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TFoamIntegrand::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TFoamIntegrand G__TTFoamIntegrand;
static int G__G__Foam_132_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TFoamIntegrand *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TFoamIntegrand *)((G__getstructoffset())+sizeof(TFoamIntegrand)*i);
   else  delete (TFoamIntegrand *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Foam_132_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TFoamIntegrand *dest = (TFoamIntegrand*)(G__getstructoffset());
   *dest = (*(TFoamIntegrand*)libp->para[0].ref);
   const TFoamIntegrand& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TFoamVect */
static int G__G__Foam_133_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TFoamVect *p=NULL;
   if(G__getaryconstruct()) p=new TFoamVect[G__getaryconstruct()];
   else                    p=new TFoamVect;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__FoamLN_TFoamVect);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TFoamVect *p=NULL;
      p = new TFoamVect((Int_t)G__int(libp->para[0]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__FoamLN_TFoamVect);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TFoamVect *p=NULL;
      p = new TFoamVect(*(TFoamVect*)libp->para[0].ref);
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__FoamLN_TFoamVect);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        const TFoamVect& obj=((TFoamVect*)(G__getstructoffset()))->operator=(*(TFoamVect*)libp->para[0].ref);
         result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        const Double_t& obj=((TFoamVect*)(G__getstructoffset()))->operator[]((Int_t)G__int(libp->para[0]));
         result7->ref=(long)(&obj); result7->obj.d=(double)(obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        const TFoamVect& obj=((TFoamVect*)(G__getstructoffset()))->operator=((Double_t*)G__int(libp->para[0]));
         result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        const TFoamVect& obj=((TFoamVect*)(G__getstructoffset()))->operator=((Double_t)G__double(libp->para[0]));
         result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        const TFoamVect& obj=((TFoamVect*)(G__getstructoffset()))->operator+=(*(TFoamVect*)libp->para[0].ref);
         result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        const TFoamVect& obj=((TFoamVect*)(G__getstructoffset()))->operator-=(*(TFoamVect*)libp->para[0].ref);
         result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        const TFoamVect& obj=((TFoamVect*)(G__getstructoffset()))->operator*=(*(Double_t*)G__Doubleref(&libp->para[0]));
         result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        TFoamVect *pobj,xobj=((TFoamVect*)(G__getstructoffset()))->operator+(*(TFoamVect*)libp->para[0].ref);
        pobj=new TFoamVect(xobj);
        result7->obj.i=(long)((void*)pobj); result7->ref=result7->obj.i;
        G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        TFoamVect *pobj,xobj=((TFoamVect*)(G__getstructoffset()))->operator-(*(TFoamVect*)libp->para[0].ref);
        pobj=new TFoamVect(xobj);
        result7->obj.i=(long)((void*)pobj); result7->ref=result7->obj.i;
        G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TFoamVect*)(G__getstructoffset()))->Print((Option_t*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamVect*)(G__getstructoffset()))->PrintList();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TFoamVect*)(G__getstructoffset()))->GetDim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TFoamVect*)(G__getstructoffset()))->GetCoord((Int_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TFoamVect::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TFoamVect::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TFoamVect::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TFoamVect::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TFoamVect*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamVect*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamVect*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamVect*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TFoamVect::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TFoamVect::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TFoamVect::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_133_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TFoamVect::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TFoamVect G__TTFoamVect;
static int G__G__Foam_133_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TFoamVect *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TFoamVect *)((G__getstructoffset())+sizeof(TFoamVect)*i);
   else  delete (TFoamVect *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TFoamCell */
static int G__G__Foam_134_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TFoamCell *p=NULL;
   if(G__getaryconstruct()) p=new TFoamCell[G__getaryconstruct()];
   else                    p=new TFoamCell;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__FoamLN_TFoamCell);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TFoamCell *p=NULL;
      p = new TFoamCell((Int_t)G__int(libp->para[0]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__FoamLN_TFoamCell);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TFoamCell *p=NULL;
      p = new TFoamCell(*(TFoamCell*)libp->para[0].ref);
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__FoamLN_TFoamCell);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamCell*)(G__getstructoffset()))->Fill((Int_t)G__int(libp->para[0]),(TFoamCell*)G__int(libp->para[1])
,(TFoamCell*)G__int(libp->para[2]),(TFoamCell*)G__int(libp->para[3]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        const TFoamCell& obj=((TFoamCell*)(G__getstructoffset()))->operator=(*(TFoamCell*)libp->para[0].ref);
         result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TFoamCell*)(G__getstructoffset()))->GetXdiv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TFoamCell*)(G__getstructoffset()))->GetBest());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamCell*)(G__getstructoffset()))->SetBest((Int_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamCell*)(G__getstructoffset()))->SetXdiv((Double_t)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TFoamCell*)(G__getstructoffset()))->GetHcub(*(TFoamVect*)libp->para[0].ref,*(TFoamVect*)libp->para[1].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TFoamCell*)(G__getstructoffset()))->GetHSize(*(TFoamVect*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamCell*)(G__getstructoffset()))->CalcVolume();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TFoamCell*)(G__getstructoffset()))->GetVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TFoamCell*)(G__getstructoffset()))->GetIntg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TFoamCell*)(G__getstructoffset()))->GetDriv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TFoamCell*)(G__getstructoffset()))->GetPrim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamCell*)(G__getstructoffset()))->SetIntg((Double_t)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamCell*)(G__getstructoffset()))->SetDriv((Double_t)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamCell*)(G__getstructoffset()))->SetPrim((Double_t)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TFoamCell*)(G__getstructoffset()))->GetStat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamCell*)(G__getstructoffset()))->SetStat((Int_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TFoamCell*)(G__getstructoffset()))->GetPare());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TFoamCell*)(G__getstructoffset()))->GetDau0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TFoamCell*)(G__getstructoffset()))->GetDau1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamCell*)(G__getstructoffset()))->SetDau0((TFoamCell*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamCell*)(G__getstructoffset()))->SetDau1((TFoamCell*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamCell*)(G__getstructoffset()))->SetSerial((Int_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TFoamCell*)(G__getstructoffset()))->GetSerial());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TFoamCell*)(G__getstructoffset()))->Print((Option_t*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_0_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TFoamCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_1_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TFoamCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_2_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TFoamCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_3_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TFoamCell::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_4_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TFoamCell*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_5_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamCell*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_6_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamCell*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_7_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoamCell*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_8_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TFoamCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_9_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TFoamCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_0_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TFoamCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_134_1_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TFoamCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TFoamCell G__TTFoamCell;
static int G__G__Foam_134_2_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TFoamCell *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TFoamCell *)((G__getstructoffset())+sizeof(TFoamCell)*i);
   else  delete (TFoamCell *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TFoam */
static int G__G__Foam_135_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TFoam *p=NULL;
   if(G__getaryconstruct()) p=new TFoam[G__getaryconstruct()];
   else                    p=new TFoam;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__FoamLN_TFoam);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TFoam *p=NULL;
      p = new TFoam((const Char_t*)G__int(libp->para[0]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__FoamLN_TFoam);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TFoam *p=NULL;
      p = new TFoam(*(TFoam*)libp->para[0].ref);
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__FoamLN_TFoam);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->Initialize();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->Initialize((TRandom*)G__int(libp->para[0]),(TFoamIntegrand*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->InitCells();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TFoam*)(G__getstructoffset()))->CellFill((Int_t)G__int(libp->para[0]),(TFoamCell*)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->Explore((TFoamCell*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->Carver(*(Int_t*)G__Intref(&libp->para[0]),*(Double_t*)G__Doubleref(&libp->para[1])
,*(Double_t*)G__Doubleref(&libp->para[2]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->Varedu((Double_t*)G__int(libp->para[0]),*(Int_t*)G__Intref(&libp->para[1])
,*(Double_t*)G__Doubleref(&libp->para[2]),*(Double_t*)G__Doubleref(&libp->para[3]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->MakeAlpha();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->Grow();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,108,(long)((TFoam*)(G__getstructoffset()))->PeekMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TFoam*)(G__getstructoffset()))->Divide((TFoamCell*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->MakeActiveList();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->GenerCel2(libp->para[0].ref?*(TFoamCell**)libp->para[0].ref:*(TFoamCell**)(&G__Mlong(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((TFoam*)(G__getstructoffset()))->Eval((Double_t*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->MakeEvent();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->GetMCvect((Double_t*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->GetMCwt(*(Double_t*)G__Doubleref(&libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((TFoam*)(G__getstructoffset()))->GetMCwt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((TFoam*)(G__getstructoffset()))->MCgenerate((Double_t*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->GetIntegMC(*(Double_t*)G__Doubleref(&libp->para[0]),*(Double_t*)G__Doubleref(&libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->GetIntNorm(*(Double_t*)G__Doubleref(&libp->para[0]),*(Double_t*)G__Doubleref(&libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->GetWtParams((Double_t)G__double(libp->para[0]),*(Double_t*)G__Doubleref(&libp->para[1])
,*(Double_t*)G__Doubleref(&libp->para[2]),*(Double_t*)G__Doubleref(&libp->para[3]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->Finalize(*(Double_t*)G__Doubleref(&libp->para[0]),*(Double_t*)G__Doubleref(&libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TFoam*)(G__getstructoffset()))->GetRho());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TFoam*)(G__getstructoffset()))->GetPseRan());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->SetRhoInt((void*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_0_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->SetRho((TFoamIntegrand*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_1_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->ResetRho((TFoamIntegrand*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_2_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->SetPseRan((TRandom*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_3_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->ResetPseRan((TRandom*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_4_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->SetkDim((Int_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_5_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->SetnCells((Long_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_6_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->SetnSampl((Long_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_7_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->SetnBin((Int_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_8_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->SetChat((Int_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_9_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->SetOptRej((Int_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_0_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->SetOptDrive((Int_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_1_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->SetEvPerBin((Int_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_2_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->SetMaxWtRej((Double_t)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_3_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->SetInhiDiv((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_4_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->SetXdivPRD((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(Double_t*)G__int(libp->para[2]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_5_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)((const TFoam*)(G__getstructoffset()))->GetVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_6_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TFoam*)(G__getstructoffset()))->GetTotDim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_7_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TFoam*)(G__getstructoffset()))->GetPrimary());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_8_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->GetPrimary(*(Double_t*)G__Doubleref(&libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_9_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,108,(long)((const TFoam*)(G__getstructoffset()))->GetnCalls());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_0_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,108,(long)((const TFoam*)(G__getstructoffset()))->GetnEffev());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_1_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->CheckAll((Int_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_2_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->PrintCells();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_3_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->RootPlot2dim((Char_t*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_4_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->LinkCells();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_6_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TFoam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_7_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TFoam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_8_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TFoam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_9_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TFoam::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_0_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TFoam*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_1_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_2_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_3_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TFoam*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_4_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TFoam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_5_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TFoam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_6_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TFoam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__Foam_135_7_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TFoam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TFoam G__TTFoam;
static int G__G__Foam_135_8_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TFoam *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TFoam *)((G__getstructoffset())+sizeof(TFoam)*i);
   else  delete (TFoam *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__Foam_135_9_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TFoam *dest = (TFoam*)(G__getstructoffset());
   *dest = (*(TFoam*)libp->para[0].ref);
   const TFoam& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TFoamMaxwt */

/* TFoamIntegrand */

/* TFoamVect */

/* TFoamCell */

/* TFoam */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__Foam {
 public:
  G__Sizep2memfuncG__Foam() {p=&G__Sizep2memfuncG__Foam::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__Foam::*p)();
};

size_t G__get_sizep2memfuncG__Foam()
{
  G__Sizep2memfuncG__Foam a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__Foam() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt))) {
     TFoamMaxwt *G__Lderived;
     G__Lderived=(TFoamMaxwt*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt),G__get_linked_tagnum(&G__G__FoamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FoamLN_TFoamIntegrand))) {
     TFoamIntegrand *G__Lderived;
     G__Lderived=(TFoamIntegrand*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamIntegrand),G__get_linked_tagnum(&G__G__FoamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FoamLN_TFoamVect))) {
     TFoamVect *G__Lderived;
     G__Lderived=(TFoamVect*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),G__get_linked_tagnum(&G__G__FoamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FoamLN_TFoamCell))) {
     TFoamCell *G__Lderived;
     G__Lderived=(TFoamCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamCell),G__get_linked_tagnum(&G__G__FoamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__FoamLN_TFoam))) {
     TFoam *G__Lderived;
     G__Lderived=(TFoam*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoam),G__get_linked_tagnum(&G__G__FoamLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__Foam() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,
-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,
-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Long_t",108,-1,0,
-1);
   G__setnewtype(-1,"Signed long integer 8 bytes (long)",0);
   G__search_typename2("Double_t",100,-1,0,
-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,
-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,
-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<TStreamerInfo*>",117,G__get_linked_tagnum(&G__G__FoamLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__FoamLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FoamLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__FoamLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__FoamLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TFoamMaxwt */
static void G__setup_memvarTFoamMaxwt(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt));
   { TFoamMaxwt *p; p=(TFoamMaxwt*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fNent=",0,"No. of MC events");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fnBin=",0,"No. of bins on the weight distribution");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fwmax=",0,"Maximum analyzed weight");
   G__memvar_setup((void*)((long)(&p->fWtHst1)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TH1D),-1,-1,1,"fWtHst1=",0,"Histogram of the weight wt");
   G__memvar_setup((void*)((long)(&p->fWtHst2)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TH1D),-1,-1,1,"fWtHst2=",0,"Histogram of wt filled with wt");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TFoamIntegrand */
static void G__setup_memvarTFoamIntegrand(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamIntegrand));
   { TFoamIntegrand *p; p=(TFoamIntegrand*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TFoamVect */
static void G__setup_memvarTFoamVect(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamVect));
   { TFoamVect *p; p=(TFoamVect*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDim=",0,"Dimension");
   G__memvar_setup((void*)NULL,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCoords=",0,"[fDim] Coordinates");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),-1,-1,4,"fNext=",0,"pointer for tree construction");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),-1,-1,4,"fPrev=",0,"pointer for tree construction");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TFoamCell */
static void G__setup_memvarTFoamCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamCell));
   { TFoamCell *p; p=(TFoamCell*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fDim=",0,"Dimension of the vector space");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSerial=",0,"Serial number");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fStatus=",0,"Status (active, inactive)");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__FoamLN_TRef),-1,-1,4,"fParent=",0,"Pointer to parent cell");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__FoamLN_TRef),-1,-1,4,"fDaught0=",0,"Pointer to daughter 1");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__FoamLN_TRef),-1,-1,4,"fDaught1=",0,"Pointer to daughter 2");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fXdiv=",0,"Factor for division");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBest=",0,"Best Edge for division");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fVolume=",0,"Cartesian Volume of cell");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fIntegral=",0,"Integral over cell (estimate from exploration)");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDrive=",0,"Driver  integral, only for cell build-up");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPrimary=",0,"Primary integral, only for MC generation");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TFoam */
static void G__setup_memvarTFoam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoam));
   { TFoam *p; p=(TFoam*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__FoamLN_TString),-1,-1,4,"fName=",0,"Name of a given instance of the FOAM class");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__FoamLN_TString),-1,-1,4,"fVersion=",0,"Actual version of the FOAM like (1.01m)");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__G__FoamLN_TString),-1,-1,4,"fDate=",0,"Release date of FOAM");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDim=",0,"Dimension of the integration/simulation space");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNCells=",0,"Maximum number of cells");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRNmax=",0,"Maximum No. of the rand. numb. requested at once");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fOptDrive=",0,"Optimization switch =1,2 for variance or maximum weight optimization");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fChat=",0,"Chat=0,1,2 chat level in output, Chat=1 normal level");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fOptRej=",0,"Switch =0 for weighted events; =1 for unweighted events in MC");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNBin=",0,"No. of bins in the edge histogram for cell MC exploration");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNSampl=",0,"No. of MC events, when dividing (exploring) cell");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEvPerBin=",0,"Maximum number of effective (wt=1) events per bin");
   G__memvar_setup((void*)NULL,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaskDiv=",0,"! [fDim] Dynamic Mask for  cell division");
   G__memvar_setup((void*)NULL,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fInhiDiv=",0,"! [fDim] Flags for inhibiting cell division");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fOptPRD=",0,"Option switch for predefined division, for quick check");
   G__memvar_setup((void*)NULL,85,2,0,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),-1,-1,4,"fXdivPRD=",0,"! Lists of division values encoded in one vector per direction");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNoAct=",0,"Number of active cells");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLastCe=",0,"Index of the last cell");
   G__memvar_setup((void*)NULL,85,2,0,G__get_linked_tagnum(&G__G__FoamLN_TFoamCell),-1,-1,4,"fCells=",0,"[fNCells] Array of ALL cells");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt),-1,-1,4,"fMCMonit=",0,"Monitor of the MC weight for measuring MC efficiency");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMaxWtRej=",0,"Maximum weight in rejection for getting wt=1 events");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TRefArray),-1,-1,4,"fCellsAct=",0,"Array of pointers to active cells, constructed at the end of foam build-up");
   G__memvar_setup((void*)NULL,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPrimAcu=",0,"[fNoAct] Array of cumulative probability of all active cells");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TObjArray),-1,-1,4,"fHistEdg=",0,"Histograms of wt, one for each cell edge");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TObjArray),-1,-1,4,"fHistDbg=",0,"Histograms of wt, for debug");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TH1D),-1,-1,4,"fHistWt=",0,"Histogram of the MC wt");
   G__memvar_setup((void*)NULL,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMCvect=",0,"[fDim] Generated MC vector for the outside user");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMCwt=",0,"MC weight");
   G__memvar_setup((void*)NULL,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRvec=",0,"[fRNmax] random number vector from r.n. generator fDim+1 maximum elements");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TFoamIntegrand),-1,-1,4,"fRho=",0,"Pointer to the user-defined integrand function/distribution");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TMethodCall),-1,-1,4,"fMethodCall=",0,"! ROOT's pointer to user-defined global distribution function");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TRandom),-1,-1,4,"fPseRan=",0,"Pointer to user-defined generator of pseudorandom numbers");
   G__memvar_setup((void*)NULL,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"fNCalls=",0,"Total number of the function calls");
   G__memvar_setup((void*)NULL,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"fNEffev=",0,"Total number of effective events (wt=1) in the foam buildup");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSumWt=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSumWt2=",0,"Total sum of wt and wt^2");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSumOve=",0,"Total Sum of overveighted events");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fNevGen=",0,"Total number of the generated MC events");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fWtMax=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fWtMin=",0,"Maximum/Minimum MC weight");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPrime=",0,"Primary integral R' (R=R'<wt>)");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMCresult=",0,"True Integral R from MC series");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMCerror=",0,"and its error");
   G__memvar_setup((void*)NULL,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fAlpha=",0,"[fDim] Internal parameters of the hyperrectangle");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__Foam() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTFoamMaxwt(void) {
   /* TFoamMaxwt */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt));
   G__memfunc_setup("TFoamMaxwt",1000,G__G__Foam_128_1_0,105,G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt),-1,0,0,1,1,0,"","NOT IMPLEMENTED (NEVER USED)",(void*)NULL,0);
   G__memfunc_setup("TFoamMaxwt",1000,G__G__Foam_128_2_0,105,G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt),-1,0,2,1,1,0,
"d - 'Double_t' 0 - - i - 'Int_t' 0 - -","Principal Constructor",(void*)NULL,0);
   G__memfunc_setup("TFoamMaxwt",1000,G__G__Foam_128_3_0,105,G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt),-1,0,1,1,1,0,"u 'TFoamMaxwt' - 1 - From","Copy constructor",(void*)NULL,0);
   G__memfunc_setup("Reset",515,G__G__Foam_128_4_0,121,-1,-1,0,0,1,1,0,"","Reset",(void*)NULL,0);
   G__memfunc_setup("operator=",937,G__G__Foam_128_5_0,117,G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt),-1,1,1,1,1,0,"u 'TFoamMaxwt' - 1 - -","operator =",(void*)NULL,0);
   G__memfunc_setup("Fill",391,G__G__Foam_128_6_0,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 0 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Make",382,G__G__Foam_128_7_0,121,-1,-1,0,2,1,1,0,
"d - 'Double_t' 0 - - d - 'Double_t' 1 - -",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetMCeff",737,G__G__Foam_128_8_0,121,-1,-1,0,3,1,1,0,
"d - 'Double_t' 0 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - -","get MC efficiency= <w>/wmax",(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__Foam_128_9_0,85,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TFoamMaxwt::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Foam_128_0_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TFoamMaxwt::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Foam_128_1_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TFoamMaxwt::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Foam_128_2_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TFoamMaxwt::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Foam_128_3_1,85,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Foam_128_4_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Foam_128_5_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Foam_128_6_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Foam_128_7_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TFoamMaxwt::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Foam_128_8_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TFoamMaxwt::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Foam_128_9_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TFoamMaxwt::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Foam_128_0_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TFoamMaxwt::DeclFileLine),0);
   // automatic destructor
   G__memfunc_setup("~TFoamMaxwt",1126,G__G__Foam_128_1_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTFoamIntegrand(void) {
   /* TFoamIntegrand */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamIntegrand));
   G__memfunc_setup("Density",736,G__G__Foam_132_2_0,100,-1,G__defined_typename("Double_t"),0,2,1,1,0,
"i - 'Int_t' 0 - ndim D - 'Double_t' 0 - -",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("Class",502,G__G__Foam_132_3_0,85,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TFoamIntegrand::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Foam_132_4_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TFoamIntegrand::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Foam_132_5_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TFoamIntegrand::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Foam_132_6_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TFoamIntegrand::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Foam_132_7_0,85,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Foam_132_8_0,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Foam_132_9_0,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Foam_132_0_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Foam_132_1_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TFoamIntegrand::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Foam_132_2_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TFoamIntegrand::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Foam_132_3_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TFoamIntegrand::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Foam_132_4_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TFoamIntegrand::DeclFileLine),0);
   // automatic destructor
   G__memfunc_setup("~TFoamIntegrand",1521,G__G__Foam_132_5_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Foam_132_6_1,(int)('u'),G__get_linked_tagnum(&G__G__FoamLN_TFoamIntegrand),-1,1,1,1,1,0,"u 'TFoamIntegrand' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTFoamVect(void) {
   /* TFoamVect */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamVect));
   G__memfunc_setup("TFoamVect",873,G__G__Foam_133_1_0,105,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),-1,0,0,1,1,0,"","Constructor",(void*)NULL,0);
   G__memfunc_setup("TFoamVect",873,G__G__Foam_133_2_0,105,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),-1,0,1,1,1,0,"i - 'Int_t' 0 - -","USER Constructor",(void*)NULL,0);
   G__memfunc_setup("TFoamVect",873,G__G__Foam_133_3_0,105,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),-1,0,1,1,1,0,"u 'TFoamVect' - 11 - -","Copy constructor",(void*)NULL,0);
   G__memfunc_setup("operator=",937,G__G__Foam_133_4_0,117,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),-1,1,1,1,1,0,"u 'TFoamVect' - 11 - -","= operator; Substitution",(void*)NULL,0);
   G__memfunc_setup("operator[]",1060,G__G__Foam_133_5_0,100,-1,G__defined_typename("Double_t"),1,1,1,1,0,"i - 'Int_t' 0 - -","[] provides POINTER to coordinate",(void*)NULL,0);
   G__memfunc_setup("operator=",937,G__G__Foam_133_6_0,117,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),-1,1,1,1,1,0,"D - 'Double_t' 0 - -","LOAD IN entire double vector",(void*)NULL,0);
   G__memfunc_setup("operator=",937,G__G__Foam_133_7_0,117,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),-1,1,1,1,1,0,"d - 'Double_t' 0 - -","LOAD IN double number",(void*)NULL,0);
   G__memfunc_setup("operator+=",980,G__G__Foam_133_8_0,117,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),-1,1,1,1,1,0,"u 'TFoamVect' - 11 - -","+=; add vector u+=v  (FAST)",(void*)NULL,0);
   G__memfunc_setup("operator-=",982,G__G__Foam_133_9_0,117,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),-1,1,1,1,1,0,"u 'TFoamVect' - 11 - -","+=; add vector u+=v  (FAST)",(void*)NULL,0);
   G__memfunc_setup("operator*=",979,G__G__Foam_133_0_1,117,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),-1,1,1,1,1,0,"d - 'Double_t' 11 - -","*=; mult. by scalar v*=x (FAST)",(void*)NULL,0);
   G__memfunc_setup("operator+",919,G__G__Foam_133_1_1,117,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),-1,0,1,1,1,0,"u 'TFoamVect' - 11 - -","+;  u=v+s, NEVER USE IT, SLOW!!!",(void*)NULL,0);
   G__memfunc_setup("operator-",921,G__G__Foam_133_2_1,117,G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),-1,0,1,1,1,0,"u 'TFoamVect' - 11 - -","-;  u=v-s, NEVER USE IT, SLOW!!!",(void*)NULL,0);
   G__memfunc_setup("Print",525,G__G__Foam_133_3_1,121,-1,-1,0,1,1,1,8,"C - 'Option_t' 10 - option","Prints vector",(void*)NULL,1);
   G__memfunc_setup("PrintList",937,G__G__Foam_133_4_1,121,-1,-1,0,0,1,1,0,"","Prints vector and the following linked list",(void*)NULL,0);
   G__memfunc_setup("GetDim",570,G__G__Foam_133_5_1,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"","Returns dimension",(void*)NULL,0);
   G__memfunc_setup("GetCoord",791,G__G__Foam_133_6_1,100,-1,G__defined_typename("Double_t"),0,1,1,1,8,"i - 'Int_t' 0 - i","Returns coordinate",(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__Foam_133_7_1,85,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TFoamVect::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Foam_133_8_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TFoamVect::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Foam_133_9_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TFoamVect::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Foam_133_0_2,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TFoamVect::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Foam_133_1_2,85,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Foam_133_2_2,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Foam_133_3_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Foam_133_4_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Foam_133_5_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TFoamVect::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Foam_133_6_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TFoamVect::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Foam_133_7_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TFoamVect::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Foam_133_8_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TFoamVect::DeclFileLine),0);
   // automatic destructor
   G__memfunc_setup("~TFoamVect",999,G__G__Foam_133_9_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTFoamCell(void) {
   /* TFoamCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamCell));
   G__memfunc_setup("TFoamCell",855,G__G__Foam_134_1_0,105,G__get_linked_tagnum(&G__G__FoamLN_TFoamCell),-1,0,0,1,1,0,"","Default Constructor for ROOT streamers",(void*)NULL,0);
   G__memfunc_setup("TFoamCell",855,G__G__Foam_134_2_0,105,G__get_linked_tagnum(&G__G__FoamLN_TFoamCell),-1,0,1,1,1,0,"i - 'Int_t' 0 - -","User Constructor",(void*)NULL,0);
   G__memfunc_setup("TFoamCell",855,G__G__Foam_134_3_0,105,G__get_linked_tagnum(&G__G__FoamLN_TFoamCell),-1,0,1,1,1,0,"u 'TFoamCell' - 1 - -","Copy Constructor",(void*)NULL,0);
   G__memfunc_setup("Fill",391,G__G__Foam_134_4_0,121,-1,-1,0,4,1,1,0,
"i - 'Int_t' 0 - - U 'TFoamCell' - 0 - - "
"U 'TFoamCell' - 0 - - U 'TFoamCell' - 0 - -","Assigns values of attributes",(void*)NULL,0);
   G__memfunc_setup("operator=",937,G__G__Foam_134_5_0,117,G__get_linked_tagnum(&G__G__FoamLN_TFoamCell),-1,1,1,1,1,0,"u 'TFoamCell' - 1 - -","Substitution operator (never used)",(void*)NULL,0);
   G__memfunc_setup("GetXdiv",699,G__G__Foam_134_6_0,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"","Pointer to Xdiv",(void*)NULL,0);
   G__memfunc_setup("GetBest",686,G__G__Foam_134_7_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"","Pointer to Best",(void*)NULL,0);
   G__memfunc_setup("SetBest",698,G__G__Foam_134_8_0,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 - Best","Set Best edge candidate",(void*)NULL,0);
   G__memfunc_setup("SetXdiv",711,G__G__Foam_134_9_0,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 0 - Xdiv","Set x-division for best edge cand.",(void*)NULL,0);
   G__memfunc_setup("GetHcub",674,G__G__Foam_134_0_1,121,-1,-1,0,2,1,1,8,
"u 'TFoamVect' - 1 - - u 'TFoamVect' - 1 - -","Get position and size vectors (h-cubical subspace)",(void*)NULL,0);
   G__memfunc_setup("GetHSize",771,G__G__Foam_134_1_1,121,-1,-1,0,1,1,1,8,"u 'TFoamVect' - 1 - -","Get size only of cell vector  (h-cubical subspace)",(void*)NULL,0);
   G__memfunc_setup("CalcVolume",1003,G__G__Foam_134_2_1,121,-1,-1,0,0,1,1,0,"","Calculates volume of cell",(void*)NULL,0);
   G__memfunc_setup("GetVolume",920,G__G__Foam_134_3_1,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"","Volume of cell",(void*)NULL,0);
   G__memfunc_setup("GetIntg",690,G__G__Foam_134_4_1,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"","Get Integral",(void*)NULL,0);
   G__memfunc_setup("GetDriv",693,G__G__Foam_134_5_1,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"","Get Drive",(void*)NULL,0);
   G__memfunc_setup("GetPrim",696,G__G__Foam_134_6_1,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"","Get Primary",(void*)NULL,0);
   G__memfunc_setup("SetIntg",702,G__G__Foam_134_7_1,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 0 - Intg","Set true integral",(void*)NULL,0);
   G__memfunc_setup("SetDriv",705,G__G__Foam_134_8_1,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 0 - Driv","Set driver integral",(void*)NULL,0);
   G__memfunc_setup("SetPrim",708,G__G__Foam_134_9_1,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 0 - Prim","Set primary integral",(void*)NULL,0);
   G__memfunc_setup("GetStat",700,G__G__Foam_134_0_2,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"","Get Status",(void*)NULL,0);
   G__memfunc_setup("SetStat",712,G__G__Foam_134_1_2,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 - Stat","Set Status",(void*)NULL,0);
   G__memfunc_setup("GetPare",680,G__G__Foam_134_2_2,85,G__get_linked_tagnum(&G__G__FoamLN_TFoamCell),-1,0,0,1,1,8,"","Get Pointer to parent cell",(void*)NULL,0);
   G__memfunc_setup("GetDau0",618,G__G__Foam_134_3_2,85,G__get_linked_tagnum(&G__G__FoamLN_TFoamCell),-1,0,0,1,1,8,"","Get Pointer to 1-st daughter vertex",(void*)NULL,0);
   G__memfunc_setup("GetDau1",619,G__G__Foam_134_4_2,85,G__get_linked_tagnum(&G__G__FoamLN_TFoamCell),-1,0,0,1,1,8,"","Get Pointer to 2-nd daughter vertex",(void*)NULL,0);
   G__memfunc_setup("SetDau0",630,G__G__Foam_134_5_2,121,-1,-1,0,1,1,1,0,"U 'TFoamCell' - 0 - Daug","Set pointer to 1-st daughter",(void*)NULL,0);
   G__memfunc_setup("SetDau1",631,G__G__Foam_134_6_2,121,-1,-1,0,1,1,1,0,"U 'TFoamCell' - 0 - Daug","Set pointer to 2-nd daughter",(void*)NULL,0);
   G__memfunc_setup("SetSerial",908,G__G__Foam_134_7_2,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 - Serial","Set serial number",(void*)NULL,0);
   G__memfunc_setup("GetSerial",896,G__G__Foam_134_8_2,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"","Get serial number",(void*)NULL,0);
   G__memfunc_setup("Print",525,G__G__Foam_134_9_2,121,-1,-1,0,1,1,1,8,"C - 'Option_t' 10 - option","Prints cell content",(void*)NULL,1);
   G__memfunc_setup("Class",502,G__G__Foam_134_0_3,85,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TFoamCell::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Foam_134_1_3,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TFoamCell::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Foam_134_2_3,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TFoamCell::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Foam_134_3_3,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TFoamCell::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Foam_134_4_3,85,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Foam_134_5_3,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Foam_134_6_3,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Foam_134_7_3,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Foam_134_8_3,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TFoamCell::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Foam_134_9_3,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TFoamCell::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Foam_134_0_4,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TFoamCell::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Foam_134_1_4,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TFoamCell::DeclFileLine),0);
   // automatic destructor
   G__memfunc_setup("~TFoamCell",981,G__G__Foam_134_2_4,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTFoam(void) {
   /* TFoam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoam));
   G__memfunc_setup("TFoam",471,G__G__Foam_135_1_0,105,G__get_linked_tagnum(&G__G__FoamLN_TFoam),-1,0,0,1,1,0,"","Default constructor (used only by ROOT streamer)",(void*)NULL,0);
   G__memfunc_setup("TFoam",471,G__G__Foam_135_2_0,105,G__get_linked_tagnum(&G__G__FoamLN_TFoam),-1,0,1,1,1,0,"C - 'Char_t' 10 - -","Principal user-defined constructor",(void*)NULL,0);
   G__memfunc_setup("TFoam",471,G__G__Foam_135_3_0,105,G__get_linked_tagnum(&G__G__FoamLN_TFoam),-1,0,1,1,1,0,"u 'TFoam' - 11 - -","Copy Constructor  NOT USED",(void*)NULL,0);
   G__memfunc_setup("Initialize",1042,G__G__Foam_135_4_0,121,-1,-1,0,0,1,1,0,"","Initialization of the FOAM (grid, cells, etc), mandatory!",(void*)NULL,0);
   G__memfunc_setup("Initialize",1042,G__G__Foam_135_5_0,121,-1,-1,0,2,1,1,0,
"U 'TRandom' - 0 - - U 'TFoamIntegrand' - 0 - -","Alternative initialization method, backward compatibility",(void*)NULL,0);
   G__memfunc_setup("InitCells",903,G__G__Foam_135_6_0,121,-1,-1,0,0,1,1,0,"","Initializes first cells inside original cube",(void*)NULL,0);
   G__memfunc_setup("CellFill",775,G__G__Foam_135_7_0,105,-1,G__defined_typename("Int_t"),0,2,1,1,0,
"i - 'Int_t' 0 - - U 'TFoamCell' - 0 - -","Allocates new empty cell and return its index",(void*)NULL,0);
   G__memfunc_setup("Explore",735,G__G__Foam_135_8_0,121,-1,-1,0,1,1,1,0,"U 'TFoamCell' - 0 - Cell","Exploration of the new cell, determine <wt>, wtMax etc.",(void*)NULL,0);
   G__memfunc_setup("Carver",611,G__G__Foam_135_9_0,121,-1,-1,0,3,1,1,0,
"i - 'Int_t' 1 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - -","Determines the best edge, wt_max reduction",(void*)NULL,0);
   G__memfunc_setup("Varedu",615,G__G__Foam_135_0_1,121,-1,-1,0,4,1,1,0,
"D - 'Double_t' 0 - - i - 'Int_t' 1 - - "
"d - 'Double_t' 1 - - d - 'Double_t' 1 - -","Determines the best edge, variace reduction",(void*)NULL,0);
   G__memfunc_setup("MakeAlpha",868,G__G__Foam_135_1_1,121,-1,-1,0,0,1,1,0,"","Provides random point inside hyperrectangle",(void*)NULL,0);
   G__memfunc_setup("Grow",415,G__G__Foam_135_2_1,121,-1,-1,0,0,1,1,0,"","Adds new cells to FOAM object until buffer is full",(void*)NULL,0);
   G__memfunc_setup("PeekMax",683,G__G__Foam_135_3_1,108,-1,G__defined_typename("Long_t"),0,0,1,1,0,"","Choose one active cell, used by Grow and also in MC generation",(void*)NULL,0);
   G__memfunc_setup("Divide",597,G__G__Foam_135_4_1,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"U 'TFoamCell' - 0 - -","Divide iCell into two daughters; iCell retained, taged as inactive",(void*)NULL,0);
   G__memfunc_setup("MakeActiveList",1398,G__G__Foam_135_5_1,121,-1,-1,0,0,1,1,0,"","Creates table of active cells",(void*)NULL,0);
   G__memfunc_setup("GenerCel2",823,G__G__Foam_135_6_1,121,-1,-1,0,1,1,1,0,"U 'TFoamCell' - 1 - -","Chose an active cell the with probability ~ Primary integral",(void*)NULL,0);
   G__memfunc_setup("Eval",392,G__G__Foam_135_7_1,100,-1,G__defined_typename("Double_t"),0,1,1,1,0,"D - 'Double_t' 0 - -","Evaluates value of the distribution function",(void*)NULL,0);
   G__memfunc_setup("MakeEvent",896,G__G__Foam_135_8_1,121,-1,-1,0,0,1,1,0,"","Makes (generates) single MC event",(void*)NULL,0);
   G__memfunc_setup("GetMCvect",866,G__G__Foam_135_9_1,121,-1,-1,0,1,1,1,0,"D - 'Double_t' 0 - -","Provides generated randomly MC vector",(void*)NULL,0);
   G__memfunc_setup("GetMCwt",667,G__G__Foam_135_0_2,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 1 - -","Provides generated MC weight",(void*)NULL,0);
   G__memfunc_setup("GetMCwt",667,G__G__Foam_135_1_2,100,-1,G__defined_typename("Double_t"),0,0,1,1,0,"","Provides generates MC weight",(void*)NULL,0);
   G__memfunc_setup("MCgenerate",987,G__G__Foam_135_2_2,100,-1,G__defined_typename("Double_t"),0,1,1,1,0,"D - 'Double_t' 0 - MCvect","All three above function in one",(void*)NULL,0);
   G__memfunc_setup("GetIntegMC",935,G__G__Foam_135_3_2,121,-1,-1,0,2,1,1,0,
"d - 'Double_t' 1 - - d - 'Double_t' 1 - -","Provides Integrand and abs. error from MC run",(void*)NULL,0);
   G__memfunc_setup("GetIntNorm",999,G__G__Foam_135_4_2,121,-1,-1,0,2,1,1,0,
"d - 'Double_t' 1 - - d - 'Double_t' 1 - -","Provides normalization Inegrand",(void*)NULL,0);
   G__memfunc_setup("GetWtParams",1103,G__G__Foam_135_5_2,121,-1,-1,0,4,1,1,0,
"d - 'Double_t' 0 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - - d - 'Double_t' 1 - -","Provides MC weight parameters",(void*)NULL,0);
   G__memfunc_setup("Finalize",818,G__G__Foam_135_6_2,121,-1,-1,0,2,1,1,0,
"d - 'Double_t' 1 - - d - 'Double_t' 1 - -","Prints summary of MC integration",(void*)NULL,0);
   G__memfunc_setup("GetRho",585,G__G__Foam_135_7_2,85,G__get_linked_tagnum(&G__G__FoamLN_TFoamIntegrand),-1,0,0,1,1,0,"","Gets pointer of the distribut. (after restoring from disk)",(void*)NULL,0);
   G__memfunc_setup("GetPseRan",873,G__G__Foam_135_8_2,85,G__get_linked_tagnum(&G__G__FoamLN_TRandom),-1,0,0,1,1,8,"","Gets pointer of r.n. generator (after restoring from disk)",(void*)NULL,0);
   G__memfunc_setup("SetRhoInt",896,G__G__Foam_135_9_2,121,-1,-1,0,1,1,1,0,"Y - - 0 - Rho","Set new integrand distr. in interactive mode",(void*)NULL,0);
   G__memfunc_setup("SetRho",597,G__G__Foam_135_0_3,121,-1,-1,0,1,1,1,0,"U 'TFoamIntegrand' - 0 - Rho","Set new integrand distr. in compiled mode",(void*)NULL,0);
   G__memfunc_setup("ResetRho",812,G__G__Foam_135_1_3,121,-1,-1,0,1,1,1,0,"U 'TFoamIntegrand' - 0 - Rho","Set new distribution, delete old",(void*)NULL,0);
   G__memfunc_setup("SetPseRan",885,G__G__Foam_135_2_3,121,-1,-1,0,1,1,1,0,"U 'TRandom' - 0 - PseRan","Set new r.n. generator",(void*)NULL,0);
   G__memfunc_setup("ResetPseRan",1100,G__G__Foam_135_3_3,121,-1,-1,0,1,1,1,0,"U 'TRandom' - 0 - PseRan","Set new r.n.g, delete old",(void*)NULL,0);
   G__memfunc_setup("SetkDim",689,G__G__Foam_135_4_3,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 - kDim","Sets dimension of cubical space",(void*)NULL,0);
   G__memfunc_setup("SetnCells",909,G__G__Foam_135_5_3,121,-1,-1,0,1,1,1,0,"l - 'Long_t' 0 - nCells","Sets maximum number of cells",(void*)NULL,0);
   G__memfunc_setup("SetnSampl",919,G__G__Foam_135_6_3,121,-1,-1,0,1,1,1,0,"l - 'Long_t' 0 - nSampl","Sets no of MC events in cell exploration",(void*)NULL,0);
   G__memfunc_setup("SetnBin",691,G__G__Foam_135_7_3,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 - nBin","Sets no of bins in histogs in cell exploration",(void*)NULL,0);
   G__memfunc_setup("SetChat",684,G__G__Foam_135_8_3,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 - Chat","Sets option Chat, chat level",(void*)NULL,0);
   G__memfunc_setup("SetOptRej",896,G__G__Foam_135_9_3,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 - OptRej","Sets option for MC rejection",(void*)NULL,0);
   G__memfunc_setup("SetOptDrive",1113,G__G__Foam_135_0_4,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 - OptDrive","Sets optimization switch",(void*)NULL,0);
   G__memfunc_setup("SetEvPerBin",1063,G__G__Foam_135_1_4,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 - EvPerBin","Sets max. no. of effective events per bin",(void*)NULL,0);
   G__memfunc_setup("SetMaxWtRej",1086,G__G__Foam_135_2_4,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 0 - MaxWtRej","Sets max. weight for rejection",(void*)NULL,0);
   G__memfunc_setup("SetInhiDiv",983,G__G__Foam_135_3_4,121,-1,-1,0,2,1,1,0,
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -","Set inhibition of cell division along certain edge",(void*)NULL,0);
   G__memfunc_setup("SetXdivPRD",941,G__G__Foam_135_4_4,121,-1,-1,0,3,1,1,0,
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"D - 'Double_t' 0 - -","Set predefined division points",(void*)NULL,0);
   G__memfunc_setup("GetVersion",1030,G__G__Foam_135_5_4,67,-1,-1,0,0,1,1,9,"","Get version of the FOAM",(void*)NULL,0);
   G__memfunc_setup("GetTotDim",881,G__G__Foam_135_6_4,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"","Get total dimension",(void*)NULL,0);
   G__memfunc_setup("GetPrimary",1028,G__G__Foam_135_7_4,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"","Get value of primary integral R'",(void*)NULL,0);
   G__memfunc_setup("GetPrimary",1028,G__G__Foam_135_8_4,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 1 - prime","Get value of primary integral R'",(void*)NULL,0);
   G__memfunc_setup("GetnCalls",893,G__G__Foam_135_9_4,108,-1,G__defined_typename("Long_t"),0,0,1,1,8,"","Get total no. of the function calls",(void*)NULL,0);
   G__memfunc_setup("GetnEffev",890,G__G__Foam_135_0_5,108,-1,G__defined_typename("Long_t"),0,0,1,1,8,"","Get total no. of effective wt=1 events",(void*)NULL,0);
   G__memfunc_setup("CheckAll",759,G__G__Foam_135_1_5,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 - -","Checks correctness of the entire data structure in the FOAM object",(void*)NULL,0);
   G__memfunc_setup("PrintCells",1024,G__G__Foam_135_2_5,121,-1,-1,0,0,1,1,0,"","Prints content of all cells",(void*)NULL,0);
   G__memfunc_setup("RootPlot2dim",1199,G__G__Foam_135_3_5,121,-1,-1,0,1,1,1,0,"C - 'Char_t' 0 - -","Generates C++ code for drawing foam",(void*)NULL,0);
   G__memfunc_setup("LinkCells",897,G__G__Foam_135_4_5,121,-1,-1,0,0,1,1,0,"","Void function for backward compatibility",(void*)NULL,0);
   G__memfunc_setup("Sqr",310,(G__InterfaceMethod)NULL,100,-1,G__defined_typename("Double_t"),0,1,1,4,8,"d - 'Double_t' 0 - x","Square function",(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__Foam_135_6_5,85,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TFoam::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__Foam_135_7_5,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TFoam::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__Foam_135_8_5,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TFoam::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__Foam_135_9_5,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TFoam::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__Foam_135_0_6,85,G__get_linked_tagnum(&G__G__FoamLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__Foam_135_1_6,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__Foam_135_2_6,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__Foam_135_3_6,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__Foam_135_4_6,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TFoam::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__Foam_135_5_6,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TFoam::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__Foam_135_6_6,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TFoam::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__Foam_135_7_6,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TFoam::DeclFileLine),0);
   // automatic destructor
   G__memfunc_setup("~TFoam",597,G__G__Foam_135_8_6,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__Foam_135_9_6,(int)('u'),G__get_linked_tagnum(&G__G__FoamLN_TFoam),-1,1,1,1,1,0,"u 'TFoam' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__Foam() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__Foam() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__Foam() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__FoamLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR = { "vector<TStreamerInfo*,allocator<TStreamerInfo*> >" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TStreamerInfo*,allocator<TStreamerInfo*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TFoamMaxwt = { "TFoamMaxwt" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TRefArray = { "TRefArray" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TMethodCall = { "TMethodCall" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TRandom = { "TRandom" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TFoamIntegrand = { "TFoamIntegrand" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TFoamVect = { "TFoamVect" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TFoamCell = { "TFoamCell" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TFoam = { "TFoam" , 99 , -1 };
G__linked_taginfo G__G__FoamLN_TRef = { "TRef" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__Foam() {
  G__G__FoamLN_TClass.tagnum = -1 ;
  G__G__FoamLN_TBuffer.tagnum = -1 ;
  G__G__FoamLN_TMemberInspector.tagnum = -1 ;
  G__G__FoamLN_TObject.tagnum = -1 ;
  G__G__FoamLN_TObjArray.tagnum = -1 ;
  G__G__FoamLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR.tagnum = -1 ;
  G__G__FoamLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__FoamLN_TString.tagnum = -1 ;
  G__G__FoamLN_TH1D.tagnum = -1 ;
  G__G__FoamLN_TFoamMaxwt.tagnum = -1 ;
  G__G__FoamLN_TRefArray.tagnum = -1 ;
  G__G__FoamLN_TMethodCall.tagnum = -1 ;
  G__G__FoamLN_TRandom.tagnum = -1 ;
  G__G__FoamLN_TFoamIntegrand.tagnum = -1 ;
  G__G__FoamLN_TFoamVect.tagnum = -1 ;
  G__G__FoamLN_TFoamCell.tagnum = -1 ;
  G__G__FoamLN_TFoam.tagnum = -1 ;
  G__G__FoamLN_TRef.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__Foam() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum(&G__G__FoamLN_TClass);
   G__get_linked_tagnum(&G__G__FoamLN_TBuffer);
   G__get_linked_tagnum(&G__G__FoamLN_TMemberInspector);
   G__get_linked_tagnum(&G__G__FoamLN_TObject);
   G__get_linked_tagnum(&G__G__FoamLN_TObjArray);
   G__get_linked_tagnum(&G__G__FoamLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR);
   G__get_linked_tagnum(&G__G__FoamLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__G__FoamLN_TString);
   G__get_linked_tagnum(&G__G__FoamLN_TH1D);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamMaxwt),sizeof(TFoamMaxwt),-1,327424,"Controlling of the MC weight (maximum weight)",G__setup_memvarTFoamMaxwt,G__setup_memfuncTFoamMaxwt);
   G__get_linked_tagnum(&G__G__FoamLN_TRefArray);
   G__get_linked_tagnum(&G__G__FoamLN_TMethodCall);
   G__get_linked_tagnum(&G__G__FoamLN_TRandom);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamIntegrand),sizeof(TFoamIntegrand),-1,292097,"n-dimensional real positive integrand of FOAM",G__setup_memvarTFoamIntegrand,G__setup_memfuncTFoamIntegrand);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamVect),sizeof(TFoamVect),-1,327424,"n-dimensional vector with dynamical allocation",G__setup_memvarTFoamVect,G__setup_memfuncTFoamVect);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoamCell),sizeof(TFoamCell),-1,327424,"Single cell of FOAM",G__setup_memvarTFoamCell,G__setup_memfuncTFoamCell);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__FoamLN_TFoam),sizeof(TFoam),-1,325376,"General purpose self-adapting Monte Carlo event generator",G__setup_memvarTFoam,G__setup_memfuncTFoam);
   G__get_linked_tagnum(&G__G__FoamLN_TRef);
}
extern "C" void G__cpp_setupG__Foam(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__Foam()");
  G__set_cpp_environmentG__Foam();
  G__cpp_setup_tagtableG__Foam();

  G__cpp_setup_inheritanceG__Foam();

  G__cpp_setup_typetableG__Foam();

  G__cpp_setup_memvarG__Foam();

  G__cpp_setup_memfuncG__Foam();
  G__cpp_setup_globalG__Foam();
  G__cpp_setup_funcG__Foam();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__Foam();
  return;
}
class G__cpp_setup_initG__Foam {
  public:
    G__cpp_setup_initG__Foam() { G__add_setup_func("G__Foam",(G__incsetup)(&G__cpp_setupG__Foam)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__Foam() { G__remove_setup_func("G__Foam"); }
};
G__cpp_setup_initG__Foam G__cpp_setup_initializerG__Foam;

