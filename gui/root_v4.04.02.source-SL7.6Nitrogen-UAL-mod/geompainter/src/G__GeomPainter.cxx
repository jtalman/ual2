//
// File generated by utils/src/rootcint_tmp at Wed Jul  1 06:29:37 2020.
// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

#include "G__GeomPainter.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TStreamerInfo.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"

#include "TCollectionProxy.h"

namespace ROOT {
   namespace Shadow {
   } // Of namespace ROOT::Shadow
} // Of namespace ROOT

namespace ROOT {
   void TGeoTrack_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TGeoTrack_IsA(const void*);
   static void *new_TGeoTrack(void *p = 0);
   static void *newArray_TGeoTrack(Long_t size);
   static void delete_TGeoTrack(void *p);
   static void deleteArray_TGeoTrack(void *p);
   static void destruct_TGeoTrack(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TGeoTrack*)
   {
      ::TGeoTrack *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TGeoTrack", ::TGeoTrack::Class_Version(), "geompainter/inc/TGeoTrack.h", 36,
                  typeid(::TGeoTrack), DefineBehavior(ptr, ptr),
                  &::TGeoTrack::Dictionary, &TGeoTrack_IsA, 4,
                  sizeof(::TGeoTrack) );
      instance.SetNew(&new_TGeoTrack);
      instance.SetNewArray(&newArray_TGeoTrack);
      instance.SetDelete(&delete_TGeoTrack);
      instance.SetDeleteArray(&deleteArray_TGeoTrack);
      instance.SetDestructor(&destruct_TGeoTrack);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TGeoTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TGeoChecker_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TGeoChecker_IsA(const void*);
   static void *new_TGeoChecker(void *p = 0);
   static void *newArray_TGeoChecker(Long_t size);
   static void delete_TGeoChecker(void *p);
   static void deleteArray_TGeoChecker(void *p);
   static void destruct_TGeoChecker(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TGeoChecker*)
   {
      ::TGeoChecker *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TGeoChecker", ::TGeoChecker::Class_Version(), "geompainter/inc/TGeoChecker.h", 35,
                  typeid(::TGeoChecker), DefineBehavior(ptr, ptr),
                  &::TGeoChecker::Dictionary, &TGeoChecker_IsA, 4,
                  sizeof(::TGeoChecker) );
      instance.SetNew(&new_TGeoChecker);
      instance.SetNewArray(&newArray_TGeoChecker);
      instance.SetDelete(&delete_TGeoChecker);
      instance.SetDeleteArray(&deleteArray_TGeoChecker);
      instance.SetDestructor(&destruct_TGeoChecker);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TGeoChecker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TGeoOverlap_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TGeoOverlap_IsA(const void*);
   static void delete_TGeoOverlap(void *p);
   static void deleteArray_TGeoOverlap(void *p);
   static void destruct_TGeoOverlap(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TGeoOverlap*)
   {
      ::TGeoOverlap *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TGeoOverlap", ::TGeoOverlap::Class_Version(), "geompainter/inc/TGeoOverlap.h", 46,
                  typeid(::TGeoOverlap), DefineBehavior(ptr, ptr),
                  &::TGeoOverlap::Dictionary, &TGeoOverlap_IsA, 4,
                  sizeof(::TGeoOverlap) );
      instance.SetDelete(&delete_TGeoOverlap);
      instance.SetDeleteArray(&deleteArray_TGeoOverlap);
      instance.SetDestructor(&destruct_TGeoOverlap);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TGeoOverlap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TGeoPainter_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TGeoPainter_IsA(const void*);
   static void delete_TGeoPainter(void *p);
   static void deleteArray_TGeoPainter(void *p);
   static void destruct_TGeoPainter(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TGeoPainter*)
   {
      ::TGeoPainter *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TGeoPainter", ::TGeoPainter::Class_Version(), "geompainter/inc/TGeoPainter.h", 42,
                  typeid(::TGeoPainter), DefineBehavior(ptr, ptr),
                  &::TGeoPainter::Dictionary, &TGeoPainter_IsA, 4,
                  sizeof(::TGeoPainter) );
      instance.SetDelete(&delete_TGeoPainter);
      instance.SetDeleteArray(&deleteArray_TGeoPainter);
      instance.SetDestructor(&destruct_TGeoPainter);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TGeoPainter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TGeoExtrusion_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TGeoExtrusion_IsA(const void*);
   static void *new_TGeoExtrusion(void *p = 0);
   static void *newArray_TGeoExtrusion(Long_t size);
   static void delete_TGeoExtrusion(void *p);
   static void deleteArray_TGeoExtrusion(void *p);
   static void destruct_TGeoExtrusion(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TGeoExtrusion*)
   {
      ::TGeoExtrusion *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TGeoExtrusion", ::TGeoExtrusion::Class_Version(), "geompainter/inc/TGeoOverlap.h", 85,
                  typeid(::TGeoExtrusion), DefineBehavior(ptr, ptr),
                  &::TGeoExtrusion::Dictionary, &TGeoExtrusion_IsA, 4,
                  sizeof(::TGeoExtrusion) );
      instance.SetNew(&new_TGeoExtrusion);
      instance.SetNewArray(&newArray_TGeoExtrusion);
      instance.SetDelete(&delete_TGeoExtrusion);
      instance.SetDeleteArray(&deleteArray_TGeoExtrusion);
      instance.SetDestructor(&destruct_TGeoExtrusion);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TGeoExtrusion*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void TGeoNodeOverlap_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *TGeoNodeOverlap_IsA(const void*);
   static void *new_TGeoNodeOverlap(void *p = 0);
   static void *newArray_TGeoNodeOverlap(Long_t size);
   static void delete_TGeoNodeOverlap(void *p);
   static void deleteArray_TGeoNodeOverlap(void *p);
   static void destruct_TGeoNodeOverlap(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::TGeoNodeOverlap*)
   {
      ::TGeoNodeOverlap *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("TGeoNodeOverlap", ::TGeoNodeOverlap::Class_Version(), "geompainter/inc/TGeoOverlap.h", 109,
                  typeid(::TGeoNodeOverlap), DefineBehavior(ptr, ptr),
                  &::TGeoNodeOverlap::Dictionary, &TGeoNodeOverlap_IsA, 4,
                  sizeof(::TGeoNodeOverlap) );
      instance.SetNew(&new_TGeoNodeOverlap);
      instance.SetNewArray(&newArray_TGeoNodeOverlap);
      instance.SetDelete(&delete_TGeoNodeOverlap);
      instance.SetDeleteArray(&deleteArray_TGeoNodeOverlap);
      instance.SetDestructor(&destruct_TGeoNodeOverlap);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::TGeoNodeOverlap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

//______________________________________________________________________________
TClass *TGeoTrack::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoTrack::Class_Name()
{
   return "TGeoTrack";
}

//______________________________________________________________________________
const char *TGeoTrack::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TGeoTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoTrack::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TGeoTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoTrack::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TGeoTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoTrack::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TGeoTrack*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoChecker::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoChecker::Class_Name()
{
   return "TGeoChecker";
}

//______________________________________________________________________________
const char *TGeoChecker::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TGeoChecker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoChecker::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TGeoChecker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoChecker::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TGeoChecker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoChecker::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TGeoChecker*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoOverlap::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoOverlap::Class_Name()
{
   return "TGeoOverlap";
}

//______________________________________________________________________________
const char *TGeoOverlap::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TGeoOverlap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoOverlap::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TGeoOverlap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoOverlap::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TGeoOverlap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoOverlap::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TGeoOverlap*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoPainter::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoPainter::Class_Name()
{
   return "TGeoPainter";
}

//______________________________________________________________________________
const char *TGeoPainter::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TGeoPainter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoPainter::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TGeoPainter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoPainter::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TGeoPainter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoPainter::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TGeoPainter*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoExtrusion::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoExtrusion::Class_Name()
{
   return "TGeoExtrusion";
}

//______________________________________________________________________________
const char *TGeoExtrusion::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TGeoExtrusion*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoExtrusion::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TGeoExtrusion*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoExtrusion::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TGeoExtrusion*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoExtrusion::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TGeoExtrusion*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TGeoNodeOverlap::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGeoNodeOverlap::Class_Name()
{
   return "TGeoNodeOverlap";
}

//______________________________________________________________________________
const char *TGeoNodeOverlap::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::TGeoNodeOverlap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGeoNodeOverlap::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::TGeoNodeOverlap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGeoNodeOverlap::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::TGeoNodeOverlap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGeoNodeOverlap::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::TGeoNodeOverlap*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TGeoPainter::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoPainter.

   if (R__b.IsReading()) {
      TGeoPainter::Class()->ReadBuffer(R__b, this);
   } else {
      TGeoPainter::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TGeoPainter::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoPainter.

      TClass *R__cl = ::TGeoPainter::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fBombX", &fBombX);
      R__insp.Inspect(R__cl, R__parent, "fBombY", &fBombY);
      R__insp.Inspect(R__cl, R__parent, "fBombZ", &fBombZ);
      R__insp.Inspect(R__cl, R__parent, "fBombR", &fBombR);
      R__insp.Inspect(R__cl, R__parent, "fCheckedBox[6]", fCheckedBox);
      R__insp.Inspect(R__cl, R__parent, "fMat[9]", fMat);
      R__insp.Inspect(R__cl, R__parent, "fNsegments", &fNsegments);
      R__insp.Inspect(R__cl, R__parent, "fNVisNodes", &fNVisNodes);
      R__insp.Inspect(R__cl, R__parent, "fVisLevel", &fVisLevel);
      R__insp.Inspect(R__cl, R__parent, "fVisOption", &fVisOption);
      R__insp.Inspect(R__cl, R__parent, "fExplodedView", &fExplodedView);
      R__insp.Inspect(R__cl, R__parent, "fVisLock", &fVisLock);
      R__insp.Inspect(R__cl, R__parent, "fTopVisible", &fTopVisible);
      R__insp.Inspect(R__cl, R__parent, "fPaintingOverlaps", &fPaintingOverlaps);
      R__insp.Inspect(R__cl, R__parent, "fIsRaytracing", &fIsRaytracing);
      R__insp.Inspect(R__cl, R__parent, "*fVisBranch", &fVisBranch);
      R__insp.Inspect(R__cl, R__parent, "*fCheckedNode", &fCheckedNode);
      R__insp.Inspect(R__cl, R__parent, "*fOverlap", &fOverlap);
      R__insp.Inspect(R__cl, R__parent, "*fMatrix", &fMatrix);
      R__insp.Inspect(R__cl, R__parent, "*fGeoManager", &fGeoManager);
      R__insp.Inspect(R__cl, R__parent, "*fChecker", &fChecker);
      R__insp.Inspect(R__cl, R__parent, "*fClippingShape", &fClippingShape);
      R__insp.Inspect(R__cl, R__parent, "*fLastVolume", &fLastVolume);
      R__insp.Inspect(R__cl, R__parent, "*fVisVolumes", &fVisVolumes);
      TVirtualGeoPainter::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TGeoPainter_IsA(const void *obj) {
      return ((::TGeoPainter*)obj)->IsA();
   }
   // Wrapper around operator delete
   static void delete_TGeoPainter(void *p) {
      delete ((::TGeoPainter*)p);
   }
   static void deleteArray_TGeoPainter(void *p) {
      delete [] ((::TGeoPainter*)p);
   }
   static void destruct_TGeoPainter(void *p) {
      typedef ::TGeoPainter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoPainter

//______________________________________________________________________________
void TGeoChecker::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoChecker.

   if (R__b.IsReading()) {
      TGeoChecker::Class()->ReadBuffer(R__b, this);
   } else {
      TGeoChecker::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TGeoChecker::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoChecker.

      TClass *R__cl = ::TGeoChecker::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fGeoManager", &fGeoManager);
      R__insp.Inspect(R__cl, R__parent, "*fVsafe", &fVsafe);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TGeoChecker_IsA(const void *obj) {
      return ((::TGeoChecker*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TGeoChecker(void *p) {
      return  p ? new(p) ::TGeoChecker : new ::TGeoChecker;
   }
   static void *newArray_TGeoChecker(Long_t size) {
      return new ::TGeoChecker[size];
   }
   // Wrapper around operator delete
   static void delete_TGeoChecker(void *p) {
      delete ((::TGeoChecker*)p);
   }
   static void deleteArray_TGeoChecker(void *p) {
      delete [] ((::TGeoChecker*)p);
   }
   static void destruct_TGeoChecker(void *p) {
      typedef ::TGeoChecker current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoChecker

//______________________________________________________________________________
void TGeoOverlap::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoOverlap.

   if (R__b.IsReading()) {
      TGeoOverlap::Class()->ReadBuffer(R__b, this);
   } else {
      TGeoOverlap::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TGeoOverlap::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoOverlap.

      TClass *R__cl = ::TGeoOverlap::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fOverlap", &fOverlap);
      R__insp.Inspect(R__cl, R__parent, "*fVolume", &fVolume);
      R__insp.Inspect(R__cl, R__parent, "*fMarker", &fMarker);
      TNamed::ShowMembers(R__insp, R__parent);
      TAttLine::ShowMembers(R__insp, R__parent);
      TAttFill::ShowMembers(R__insp, R__parent);
      TAtt3D::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TGeoOverlap_IsA(const void *obj) {
      return ((::TGeoOverlap*)obj)->IsA();
   }
   // Wrapper around operator delete
   static void delete_TGeoOverlap(void *p) {
      delete ((::TGeoOverlap*)p);
   }
   static void deleteArray_TGeoOverlap(void *p) {
      delete [] ((::TGeoOverlap*)p);
   }
   static void destruct_TGeoOverlap(void *p) {
      typedef ::TGeoOverlap current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoOverlap

//______________________________________________________________________________
void TGeoNodeOverlap::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoNodeOverlap.

   if (R__b.IsReading()) {
      TGeoNodeOverlap::Class()->ReadBuffer(R__b, this);
   } else {
      TGeoNodeOverlap::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TGeoNodeOverlap::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoNodeOverlap.

      TClass *R__cl = ::TGeoNodeOverlap::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fNode1", &fNode1);
      R__insp.Inspect(R__cl, R__parent, "*fNode2", &fNode2);
      TGeoOverlap::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TGeoNodeOverlap_IsA(const void *obj) {
      return ((::TGeoNodeOverlap*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TGeoNodeOverlap(void *p) {
      return  p ? new(p) ::TGeoNodeOverlap : new ::TGeoNodeOverlap;
   }
   static void *newArray_TGeoNodeOverlap(Long_t size) {
      return new ::TGeoNodeOverlap[size];
   }
   // Wrapper around operator delete
   static void delete_TGeoNodeOverlap(void *p) {
      delete ((::TGeoNodeOverlap*)p);
   }
   static void deleteArray_TGeoNodeOverlap(void *p) {
      delete [] ((::TGeoNodeOverlap*)p);
   }
   static void destruct_TGeoNodeOverlap(void *p) {
      typedef ::TGeoNodeOverlap current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoNodeOverlap

//______________________________________________________________________________
void TGeoExtrusion::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoExtrusion.

   if (R__b.IsReading()) {
      TGeoExtrusion::Class()->ReadBuffer(R__b, this);
   } else {
      TGeoExtrusion::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TGeoExtrusion::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoExtrusion.

      TClass *R__cl = ::TGeoExtrusion::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fNode", &fNode);
      TGeoOverlap::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TGeoExtrusion_IsA(const void *obj) {
      return ((::TGeoExtrusion*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TGeoExtrusion(void *p) {
      return  p ? new(p) ::TGeoExtrusion : new ::TGeoExtrusion;
   }
   static void *newArray_TGeoExtrusion(Long_t size) {
      return new ::TGeoExtrusion[size];
   }
   // Wrapper around operator delete
   static void delete_TGeoExtrusion(void *p) {
      delete ((::TGeoExtrusion*)p);
   }
   static void deleteArray_TGeoExtrusion(void *p) {
      delete [] ((::TGeoExtrusion*)p);
   }
   static void destruct_TGeoExtrusion(void *p) {
      typedef ::TGeoExtrusion current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoExtrusion

//______________________________________________________________________________
void TGeoTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class TGeoTrack.

   if (R__b.IsReading()) {
      TGeoTrack::Class()->ReadBuffer(R__b, this);
   } else {
      TGeoTrack::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void TGeoTrack::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TGeoTrack.

      TClass *R__cl = ::TGeoTrack::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fPointsSize", &fPointsSize);
      R__insp.Inspect(R__cl, R__parent, "fNpoints", &fNpoints);
      R__insp.Inspect(R__cl, R__parent, "*fPoints", &fPoints);
      TVirtualGeoTrack::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *TGeoTrack_IsA(const void *obj) {
      return ((::TGeoTrack*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_TGeoTrack(void *p) {
      return  p ? new(p) ::TGeoTrack : new ::TGeoTrack;
   }
   static void *newArray_TGeoTrack(Long_t size) {
      return new ::TGeoTrack[size];
   }
   // Wrapper around operator delete
   static void delete_TGeoTrack(void *p) {
      delete ((::TGeoTrack*)p);
   }
   static void deleteArray_TGeoTrack(void *p) {
      delete [] ((::TGeoTrack*)p);
   }
   static void destruct_TGeoTrack(void *p) {
      typedef ::TGeoTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TGeoTrack

/********************************************************
* geompainter/src/G__GeomPainter.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableG__GeomPainter();

extern "C" void G__set_cpp_environmentG__GeomPainter() {
  G__add_compiledheader("base/inc/TROOT.h");
  G__add_compiledheader("base/inc/TMemberInspector.h");
  G__add_compiledheader("geompainter/inc/TGeoTrack.h");
  G__add_compiledheader("geompainter/inc/TGeoChecker.h");
  G__add_compiledheader("geompainter/inc/TGeoPainter.h");
  G__add_compiledheader("geompainter/inc/TGeoOverlap.h");
  G__cpp_reset_tagtableG__GeomPainter();
}
class G__geompainterdIsrcdIG__GeomPainterdOcxx_tag {};

void* operator new(size_t size,G__geompainterdIsrcdIG__GeomPainterdOcxx_tag* p) {
  if(p && G__PVOID!=G__getgvp()) return((void*)p);
#ifndef G__ROOT
  return(malloc(size));
#else
  return(::operator new(size));
#endif
}

/* dummy, for exception */
#ifdef G__EH_DUMMY_DELETE
void operator delete(void *p,G__geompainterdIsrcdIG__GeomPainterdOcxx_tag* x) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}
#endif

static void G__operator_delete(void *p) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}

void G__DELDMY_geompainterdIsrcdIG__GeomPainterdOcxx() { G__operator_delete(0); }

extern "C" int G__cpp_dllrevG__GeomPainter() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TGeoTrack */
static int G__G__GeomPainter_144_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TGeoTrack *p=NULL;
   if(G__getaryconstruct()) p=new TGeoTrack[G__getaryconstruct()];
   else                    p=new TGeoTrack;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TGeoTrack *p=NULL;
   switch(libp->paran) {
   case 4:
      p = new TGeoTrack(
(Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(TVirtualGeoTrack*)G__int(libp->para[2]),(TObject*)G__int(libp->para[3]));
      break;
   case 3:
      p = new TGeoTrack(
(Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(TVirtualGeoTrack*)G__int(libp->para[2]));
      break;
   case 2:
      p = new TGeoTrack((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1]));
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 3:
   G__letint(result7,85,(long)((TGeoTrack*)(G__getstructoffset()))->AddDaughter((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(TObject*)G__int(libp->para[2])));
      break;
   case 2:
   G__letint(result7,85,(long)((TGeoTrack*)(G__getstructoffset()))->AddDaughter((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TGeoTrack*)(G__getstructoffset()))->AddDaughter((TVirtualGeoTrack*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->AddPoint((Double_t)G__double(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Double_t)G__double(libp->para[3]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 4:
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->AnimateTrack((Double_t)G__double(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Option_t*)G__int(libp->para[3]));
      break;
   case 3:
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->AnimateTrack((Double_t)G__double(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]));
      break;
   case 2:
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->AnimateTrack((Double_t)G__double(libp->para[0]),(Double_t)G__double(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->AnimateTrack((Double_t)G__double(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->AnimateTrack();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->Browse((TBrowser*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TGeoTrack*)(G__getstructoffset()))->DistancetoPrimitive((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->Draw((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->Draw();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->ExecuteEvent((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)((const TGeoTrack*)(G__getstructoffset()))->GetObjectInfo((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TGeoTrack*)(G__getstructoffset()))->GetNpoints());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TGeoTrack*)(G__getstructoffset()))->GetPoint((Int_t)G__int(libp->para[0]),*(Double_t*)G__Doubleref(&libp->para[1])
,*(Double_t*)G__Doubleref(&libp->para[2]),*(Double_t*)G__Doubleref(&libp->para[3])
,*(Double_t*)G__Doubleref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,68,(long)((const TGeoTrack*)(G__getstructoffset()))->GetPoint((Int_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 3:
      G__letint(result7,105,(long)((const TGeoTrack*)(G__getstructoffset()))->GetPoint((Double_t)G__double(libp->para[0]),(Double_t*)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7,105,(long)((const TGeoTrack*)(G__getstructoffset()))->GetPoint((Double_t)G__double(libp->para[0]),(Double_t*)G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const TGeoTrack*)(G__getstructoffset()))->IsFolder());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->Paint((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->Paint();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->PaintCollect((Double_t)G__double(libp->para[0]),(Double_t*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->PaintCollectTrack((Double_t)G__double(libp->para[0]),(Double_t*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->PaintMarker((Double_t*)G__int(libp->para[0]),(Option_t*)G__int(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->PaintMarker((Double_t*)G__int(libp->para[0]));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->PaintTrack((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->PaintTrack();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((const TGeoTrack*)(G__getstructoffset()))->Print((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((const TGeoTrack*)(G__getstructoffset()))->Print();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->ResetTrack();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__letint(result7,105,(long)((const TGeoTrack*)(G__getstructoffset()))->SearchPoint((Double_t)G__double(libp->para[0]),(Int_t)G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7,105,(long)((const TGeoTrack*)(G__getstructoffset()))->SearchPoint((Double_t)G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 4:
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->SetBits((Bool_t)G__int(libp->para[0]),(Bool_t)G__int(libp->para[1])
,(Bool_t)G__int(libp->para[2]),(Bool_t)G__int(libp->para[3]));
      break;
   case 3:
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->SetBits((Bool_t)G__int(libp->para[0]),(Bool_t)G__int(libp->para[1])
,(Bool_t)G__int(libp->para[2]));
      break;
   case 2:
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->SetBits((Bool_t)G__int(libp->para[0]),(Bool_t)G__int(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->SetBits((Bool_t)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->SetBits();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TGeoTrack*)(G__getstructoffset()))->Size(*(Int_t*)G__Intref(&libp->para[0]),*(Int_t*)G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TGeoTrack*)(G__getstructoffset()))->Sizeof3D();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TGeoTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TGeoTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_0_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TGeoTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_1_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TGeoTrack::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_2_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TGeoTrack*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_3_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_4_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_5_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoTrack*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_6_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TGeoTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_7_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TGeoTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_8_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TGeoTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_144_9_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TGeoTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__GeomPainter_144_0_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TGeoTrack *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TGeoTrack(*(TGeoTrack*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoTrack G__TTGeoTrack;
static int G__G__GeomPainter_144_1_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TGeoTrack *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TGeoTrack *)((G__getstructoffset())+sizeof(TGeoTrack)*i);
   else  delete (TGeoTrack *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__GeomPainter_144_2_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TGeoTrack *dest = (TGeoTrack*)(G__getstructoffset());
   *dest = (*(TGeoTrack*)libp->para[0].ref);
   const TGeoTrack& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoChecker */
static int G__G__GeomPainter_152_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TGeoChecker *p=NULL;
   if(G__getaryconstruct()) p=new TGeoChecker[G__getaryconstruct()];
   else                    p=new TGeoChecker;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TGeoChecker *p=NULL;
      p = new TGeoChecker((TGeoManager*)G__int(libp->para[0]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TGeoChecker *p=NULL;
      p = new TGeoChecker((const char*)G__int(libp->para[0]),(const char*)G__int(libp->para[1]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TGeoChecker*)(G__getstructoffset()))->CheckGeometry((Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Double_t)G__double(libp->para[3]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 3:
      G__setnull(result7);
      ((const TGeoChecker*)(G__getstructoffset()))->CheckOverlaps((const TGeoVolume*)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Option_t*)G__int(libp->para[2]));
      break;
   case 2:
      G__setnull(result7);
      ((const TGeoChecker*)(G__getstructoffset()))->CheckOverlaps((const TGeoVolume*)G__int(libp->para[0]),(Double_t)G__double(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((const TGeoChecker*)(G__getstructoffset()))->CheckOverlaps((const TGeoVolume*)G__int(libp->para[0]));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 4:
      G__setnull(result7);
      ((TGeoChecker*)(G__getstructoffset()))->CheckPoint((Double_t)G__double(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Option_t*)G__int(libp->para[3]));
      break;
   case 3:
      G__setnull(result7);
      ((TGeoChecker*)(G__getstructoffset()))->CheckPoint((Double_t)G__double(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]));
      break;
   case 2:
      G__setnull(result7);
      ((TGeoChecker*)(G__getstructoffset()))->CheckPoint((Double_t)G__double(libp->para[0]),(Double_t)G__double(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((TGeoChecker*)(G__getstructoffset()))->CheckPoint((Double_t)G__double(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoChecker*)(G__getstructoffset()))->CheckPoint();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((TGeoChecker*)(G__getstructoffset()))->CheckVoxels((TGeoVolume*)G__int(libp->para[0]),(TGeoVoxelFinder*)G__int(libp->para[1])
,(Double_t*)G__int(libp->para[2]),(Int_t)G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 9:
   G__letint(result7,85,(long)((TGeoChecker*)(G__getstructoffset()))->LegoPlot(
(Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Int_t)G__int(libp->para[3])
,(Double_t)G__double(libp->para[4]),(Double_t)G__double(libp->para[5])
,(Double_t)G__double(libp->para[6]),(Double_t)G__double(libp->para[7])
,(Option_t*)G__int(libp->para[8])));
      break;
   case 8:
   G__letint(result7,85,(long)((TGeoChecker*)(G__getstructoffset()))->LegoPlot(
(Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Int_t)G__int(libp->para[3])
,(Double_t)G__double(libp->para[4]),(Double_t)G__double(libp->para[5])
,(Double_t)G__double(libp->para[6]),(Double_t)G__double(libp->para[7])));
      break;
   case 7:
   G__letint(result7,85,(long)((TGeoChecker*)(G__getstructoffset()))->LegoPlot(
(Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Int_t)G__int(libp->para[3])
,(Double_t)G__double(libp->para[4]),(Double_t)G__double(libp->para[5])
,(Double_t)G__double(libp->para[6])));
      break;
   case 6:
   G__letint(result7,85,(long)((TGeoChecker*)(G__getstructoffset()))->LegoPlot((Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Int_t)G__int(libp->para[3])
,(Double_t)G__double(libp->para[4]),(Double_t)G__double(libp->para[5])));
      break;
   case 5:
   G__letint(result7,85,(long)((TGeoChecker*)(G__getstructoffset()))->LegoPlot((Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Int_t)G__int(libp->para[3])
,(Double_t)G__double(libp->para[4])));
      break;
   case 4:
   G__letint(result7,85,(long)((TGeoChecker*)(G__getstructoffset()))->LegoPlot((Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Int_t)G__int(libp->para[3])));
      break;
   case 3:
   G__letint(result7,85,(long)((TGeoChecker*)(G__getstructoffset()))->LegoPlot((Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2])));
      break;
   case 2:
   G__letint(result7,85,(long)((TGeoChecker*)(G__getstructoffset()))->LegoPlot((Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])));
      break;
   case 1:
   G__letint(result7,85,(long)((TGeoChecker*)(G__getstructoffset()))->LegoPlot((Int_t)G__int(libp->para[0])));
      break;
   case 0:
   G__letint(result7,85,(long)((TGeoChecker*)(G__getstructoffset()))->LegoPlot());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TGeoChecker*)(G__getstructoffset()))->PrintOverlaps();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoChecker*)(G__getstructoffset()))->RandomPoints((TGeoVolume*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(Option_t*)G__int(libp->para[2]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoChecker*)(G__getstructoffset()))->RandomRays((Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Double_t)G__double(libp->para[3]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TGeoChecker*)(G__getstructoffset()))->SamplePoints((Int_t)G__int(libp->para[0]),*(Double_t*)G__Doubleref(&libp->para[1])
,(Double_t)G__double(libp->para[2]),(const char*)G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 8:
      G__setnull(result7);
      ((const TGeoChecker*)(G__getstructoffset()))->ShootRay(
(Double_t*)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Double_t)G__double(libp->para[3])
,(Double_t*)G__int(libp->para[4]),*(Int_t*)G__Intref(&libp->para[5])
,*(Int_t*)G__Intref(&libp->para[6]),(Double_t*)G__int(libp->para[7]));
      break;
   case 7:
      G__setnull(result7);
      ((const TGeoChecker*)(G__getstructoffset()))->ShootRay(
(Double_t*)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Double_t)G__double(libp->para[3])
,(Double_t*)G__int(libp->para[4]),*(Int_t*)G__Intref(&libp->para[5])
,*(Int_t*)G__Intref(&libp->para[6]));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoChecker*)(G__getstructoffset()))->Test((Int_t)G__int(libp->para[0]),(Option_t*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoChecker*)(G__getstructoffset()))->TestOverlaps((const char*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__letint(result7,103,(long)((TGeoChecker*)(G__getstructoffset()))->TestVoxels((TGeoVolume*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7,103,(long)((TGeoChecker*)(G__getstructoffset()))->TestVoxels((TGeoVolume*)G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__letdouble(result7,100,(double)((TGeoChecker*)(G__getstructoffset()))->Weight((Double_t)G__double(libp->para[0]),(Option_t*)G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7,100,(double)((TGeoChecker*)(G__getstructoffset()))->Weight((Double_t)G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7,100,(double)((TGeoChecker*)(G__getstructoffset()))->Weight());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TGeoChecker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TGeoChecker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TGeoChecker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TGeoChecker::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TGeoChecker*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoChecker*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoChecker*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoChecker*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TGeoChecker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TGeoChecker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TGeoChecker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_152_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TGeoChecker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__GeomPainter_152_0_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TGeoChecker *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TGeoChecker(*(TGeoChecker*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoChecker G__TTGeoChecker;
static int G__G__GeomPainter_152_1_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TGeoChecker *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TGeoChecker *)((G__getstructoffset())+sizeof(TGeoChecker)*i);
   else  delete (TGeoChecker *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__GeomPainter_152_2_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TGeoChecker *dest = (TGeoChecker*)(G__getstructoffset());
   *dest = (*(TGeoChecker*)libp->para[0].ref);
   const TGeoChecker& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoOverlap */
static int G__G__GeomPainter_298_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoOverlap*)(G__getstructoffset()))->Browse((TBrowser*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TGeoOverlap*)(G__getstructoffset()))->Compare((const TObject*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TGeoOverlap*)(G__getstructoffset()))->DistancetoPrimitive((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TGeoOverlap*)(G__getstructoffset()))->Draw((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoOverlap*)(G__getstructoffset()))->Draw();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoOverlap*)(G__getstructoffset()))->ExecuteEvent((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TGeoOverlap*)(G__getstructoffset()))->GetPolyMarker());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TGeoOverlap*)(G__getstructoffset()))->GetNode((Int_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,100,(double)((const TGeoOverlap*)(G__getstructoffset()))->GetOverlap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TGeoOverlap*)(G__getstructoffset()))->GetVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const TGeoOverlap*)(G__getstructoffset()))->IsExtrusion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const TGeoOverlap*)(G__getstructoffset()))->IsFolder());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const TGeoOverlap*)(G__getstructoffset()))->IsSortable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TGeoOverlap*)(G__getstructoffset()))->Paint((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoOverlap*)(G__getstructoffset()))->Paint();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TGeoOverlap*)(G__getstructoffset()))->PrintInfo();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TGeoOverlap*)(G__getstructoffset()))->Sizeof3D();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoOverlap*)(G__getstructoffset()))->SetNextPoint((Double_t)G__double(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoOverlap*)(G__getstructoffset()))->SetVolume((TGeoVolume*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoOverlap*)(G__getstructoffset()))->SetOverlap((Double_t)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TGeoOverlap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TGeoOverlap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TGeoOverlap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TGeoOverlap::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TGeoOverlap*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoOverlap*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoOverlap*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoOverlap*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TGeoOverlap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_0_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TGeoOverlap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_1_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TGeoOverlap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_298_2_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TGeoOverlap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoOverlap G__TTGeoOverlap;
static int G__G__GeomPainter_298_3_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TGeoOverlap *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TGeoOverlap *)((G__getstructoffset())+sizeof(TGeoOverlap)*i);
   else  delete (TGeoOverlap *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__GeomPainter_298_4_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TGeoOverlap *dest = (TGeoOverlap*)(G__getstructoffset());
   *dest = (*(TGeoOverlap*)libp->para[0].ref);
   const TGeoOverlap& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoPainter */
static int G__G__GeomPainter_299_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TGeoPainter *p=NULL;
      p = new TGeoPainter((TGeoManager*)G__int(libp->para[0]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->AddSize3D((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TGeoPainter*)(G__getstructoffset()))->AddTrack((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(TObject*)G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 3:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->AddTrackPoint((Double_t*)G__int(libp->para[0]),(Double_t*)G__int(libp->para[1])
,(Bool_t)G__int(libp->para[2]));
      break;
   case 2:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->AddTrackPoint((Double_t*)G__int(libp->para[0]),(Double_t*)G__int(libp->para[1]));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->BombTranslation((const Double_t*)G__int(libp->para[0]),(Double_t*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TGeoPainter*)(G__getstructoffset()))->CheckGeometry((Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Double_t)G__double(libp->para[3]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 4:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->CheckPoint((Double_t)G__double(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Option_t*)G__int(libp->para[3]));
      break;
   case 3:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->CheckPoint((Double_t)G__double(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]));
      break;
   case 2:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->CheckPoint((Double_t)G__double(libp->para[0]),(Double_t)G__double(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->CheckPoint((Double_t)G__double(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->CheckPoint();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 3:
      G__setnull(result7);
      ((const TGeoPainter*)(G__getstructoffset()))->CheckOverlaps((const TGeoVolume*)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Option_t*)G__int(libp->para[2]));
      break;
   case 2:
      G__setnull(result7);
      ((const TGeoPainter*)(G__getstructoffset()))->CheckOverlaps((const TGeoVolume*)G__int(libp->para[0]),(Double_t)G__double(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((const TGeoPainter*)(G__getstructoffset()))->CheckOverlaps((const TGeoVolume*)G__int(libp->para[0]));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TGeoPainter*)(G__getstructoffset()))->CountVisibleNodes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->DefaultAngles();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->DefaultColors();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((TGeoPainter*)(G__getstructoffset()))->DistanceToPrimitiveVol((TGeoVolume*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->Draw((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->Draw();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->DrawOverlap((void*)G__int(libp->para[0]),(Option_t*)G__int(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->DrawOverlap((void*)G__int(libp->para[0]));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->DrawCurrentPoint((Int_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->DrawOnly((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->DrawOnly();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->DrawPanel();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->DrawPath((const char*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->EstimateCameraMove((Double_t)G__double(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t*)G__int(libp->para[2]),(Double_t*)G__int(libp->para[3]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->ExecuteVolumeEvent((TGeoVolume*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2]),(Int_t)G__int(libp->para[3]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)((const TGeoPainter*)(G__getstructoffset()))->GetVolumeInfo((const TGeoVolume*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TGeoPainter*)(G__getstructoffset()))->GetBombFactors(*(Double_t*)G__Doubleref(&libp->para[0]),*(Double_t*)G__Doubleref(&libp->para[1])
,*(Double_t*)G__Doubleref(&libp->para[2]),*(Double_t*)G__Doubleref(&libp->para[3]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TGeoPainter*)(G__getstructoffset()))->GetBombMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TGeoPainter*)(G__getstructoffset()))->GetCheckedNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TGeoPainter*)(G__getstructoffset()))->GetChecker());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TGeoPainter*)(G__getstructoffset()))->GetColor((Int_t)G__int(libp->para[0]),(Float_t)G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_0_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)((const TGeoPainter*)(G__getstructoffset()))->GetDrawPath());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_1_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TGeoPainter*)(G__getstructoffset()))->GetDrawnVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_2_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TGeoPainter*)(G__getstructoffset()))->GetVisLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_3_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TGeoPainter*)(G__getstructoffset()))->GetVisOption());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_4_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TGeoPainter*)(G__getstructoffset()))->GetNsegments());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_5_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 4:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->GrabFocus((Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Double_t)G__double(libp->para[3]));
      break;
   case 3:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->GrabFocus((Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]));
      break;
   case 2:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->GrabFocus((Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->GrabFocus((Int_t)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->GrabFocus();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_6_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,68,(long)((TGeoPainter*)(G__getstructoffset()))->GetViewBox());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_7_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->GetViewAngles(*(Double_t*)G__Doubleref(&libp->para[0]),*(Double_t*)G__Doubleref(&libp->para[1])
,*(Double_t*)G__Doubleref(&libp->para[2]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_8_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const TGeoPainter*)(G__getstructoffset()))->IsExplodedView());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_9_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const TGeoPainter*)(G__getstructoffset()))->IsRaytracing());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_0_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 9:
   G__letint(result7,85,(long)((TGeoPainter*)(G__getstructoffset()))->LegoPlot(
(Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Int_t)G__int(libp->para[3])
,(Double_t)G__double(libp->para[4]),(Double_t)G__double(libp->para[5])
,(Double_t)G__double(libp->para[6]),(Double_t)G__double(libp->para[7])
,(Option_t*)G__int(libp->para[8])));
      break;
   case 8:
   G__letint(result7,85,(long)((TGeoPainter*)(G__getstructoffset()))->LegoPlot(
(Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Int_t)G__int(libp->para[3])
,(Double_t)G__double(libp->para[4]),(Double_t)G__double(libp->para[5])
,(Double_t)G__double(libp->para[6]),(Double_t)G__double(libp->para[7])));
      break;
   case 7:
   G__letint(result7,85,(long)((TGeoPainter*)(G__getstructoffset()))->LegoPlot(
(Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Int_t)G__int(libp->para[3])
,(Double_t)G__double(libp->para[4]),(Double_t)G__double(libp->para[5])
,(Double_t)G__double(libp->para[6])));
      break;
   case 6:
   G__letint(result7,85,(long)((TGeoPainter*)(G__getstructoffset()))->LegoPlot((Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Int_t)G__int(libp->para[3])
,(Double_t)G__double(libp->para[4]),(Double_t)G__double(libp->para[5])));
      break;
   case 5:
   G__letint(result7,85,(long)((TGeoPainter*)(G__getstructoffset()))->LegoPlot((Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Int_t)G__int(libp->para[3])
,(Double_t)G__double(libp->para[4])));
      break;
   case 4:
   G__letint(result7,85,(long)((TGeoPainter*)(G__getstructoffset()))->LegoPlot((Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Int_t)G__int(libp->para[3])));
      break;
   case 3:
   G__letint(result7,85,(long)((TGeoPainter*)(G__getstructoffset()))->LegoPlot((Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2])));
      break;
   case 2:
   G__letint(result7,85,(long)((TGeoPainter*)(G__getstructoffset()))->LegoPlot((Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])));
      break;
   case 1:
   G__letint(result7,85,(long)((TGeoPainter*)(G__getstructoffset()))->LegoPlot((Int_t)G__int(libp->para[0])));
      break;
   case 0:
   G__letint(result7,85,(long)((TGeoPainter*)(G__getstructoffset()))->LegoPlot());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_1_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TGeoPainter*)(G__getstructoffset()))->ModifiedPad();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_2_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->Paint((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->Paint();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_3_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->PaintNode((TGeoNode*)G__int(libp->para[0]),(Option_t*)G__int(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->PaintNode((TGeoNode*)G__int(libp->para[0]));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_4_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const TGeoPainter*)(G__getstructoffset()))->PaintShape(*(TGeoShape*)libp->para[0].ref,(Option_t*)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_5_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->PaintOverlap((void*)G__int(libp->para[0]),(Option_t*)G__int(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->PaintOverlap((void*)G__int(libp->para[0]));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_6_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TGeoPainter*)(G__getstructoffset()))->PrintOverlaps();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_7_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->PaintPhysicalNode((TGeoPhysicalNode*)G__int(libp->para[0]),(Option_t*)G__int(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->PaintPhysicalNode((TGeoPhysicalNode*)G__int(libp->para[0]));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_8_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 3:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->RandomPoints((const TGeoVolume*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(Option_t*)G__int(libp->para[2]));
      break;
   case 2:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->RandomPoints((const TGeoVolume*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1]));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_9_4(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->RandomRays((Int_t)G__int(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Double_t)G__double(libp->para[3]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_0_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->Raytrace((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->Raytrace();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_1_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((TGeoPainter*)(G__getstructoffset()))->SamplePoints((Int_t)G__int(libp->para[0]),*(Double_t*)G__Doubleref(&libp->para[1])
,(Double_t)G__double(libp->para[2]),(const char*)G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_2_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 4:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetBombFactors((Double_t)G__double(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]),(Double_t)G__double(libp->para[3]));
      break;
   case 3:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetBombFactors((Double_t)G__double(libp->para[0]),(Double_t)G__double(libp->para[1])
,(Double_t)G__double(libp->para[2]));
      break;
   case 2:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetBombFactors((Double_t)G__double(libp->para[0]),(Double_t)G__double(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetBombFactors((Double_t)G__double(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetBombFactors();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_3_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetClippingShape((TGeoShape*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_4_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetExplodedView((Int_t)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetExplodedView();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_5_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetNsegments((Int_t)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetNsegments();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_6_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetGeoManager((TGeoManager*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_7_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetRaytracing((Bool_t)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetRaytracing();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_8_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetTopVisible((Bool_t)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetTopVisible();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_9_5(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetVisLevel((Int_t)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetVisLevel();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_0_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetVisOption((Int_t)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->SetVisOption();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_1_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const TGeoPainter*)(G__getstructoffset()))->ShapeDistancetoPrimitive((const TGeoShape*)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2]),(Int_t)G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_2_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->Test((Int_t)G__int(libp->para[0]),(Option_t*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_3_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->TestOverlaps((const char*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_4_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((TGeoPainter*)(G__getstructoffset()))->TestVoxels((TGeoVolume*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_5_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->UnbombTranslation((const Double_t*)G__int(libp->para[0]),(Double_t*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_6_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__letdouble(result7,100,(double)((TGeoPainter*)(G__getstructoffset()))->Weight((Double_t)G__double(libp->para[0]),(Option_t*)G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7,100,(double)((TGeoPainter*)(G__getstructoffset()))->Weight((Double_t)G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_7_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TGeoPainter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_8_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TGeoPainter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_9_6(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TGeoPainter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_0_7(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TGeoPainter::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_1_7(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TGeoPainter*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_2_7(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_3_7(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_4_7(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoPainter*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_5_7(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TGeoPainter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_6_7(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TGeoPainter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_7_7(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TGeoPainter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_299_8_7(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TGeoPainter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__GeomPainter_299_9_7(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TGeoPainter *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TGeoPainter(*(TGeoPainter*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoPainter G__TTGeoPainter;
static int G__G__GeomPainter_299_0_8(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TGeoPainter *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TGeoPainter *)((G__getstructoffset())+sizeof(TGeoPainter)*i);
   else  delete (TGeoPainter *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoExtrusion */
static int G__G__GeomPainter_300_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TGeoExtrusion *p=NULL;
   if(G__getaryconstruct()) p=new TGeoExtrusion[G__getaryconstruct()];
   else                    p=new TGeoExtrusion;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoExtrusion);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_300_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TGeoExtrusion *p=NULL;
      p = new TGeoExtrusion(
(const char*)G__int(libp->para[0]),(TGeoVolume*)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2]),(Double_t)G__double(libp->para[3]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoExtrusion);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_300_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TGeoExtrusion*)(G__getstructoffset()))->GetNode((Int_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_300_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const TGeoExtrusion*)(G__getstructoffset()))->IsExtrusion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_300_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TGeoExtrusion*)(G__getstructoffset()))->Draw((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoExtrusion*)(G__getstructoffset()))->Draw();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_300_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TGeoExtrusion*)(G__getstructoffset()))->PrintInfo();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_300_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TGeoExtrusion*)(G__getstructoffset()))->Sizeof3D();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_300_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TGeoExtrusion::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_300_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TGeoExtrusion::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_300_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TGeoExtrusion::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_300_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TGeoExtrusion::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_300_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TGeoExtrusion*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_300_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoExtrusion*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_300_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoExtrusion*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_300_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoExtrusion*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_300_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TGeoExtrusion::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_300_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TGeoExtrusion::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_300_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TGeoExtrusion::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_300_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TGeoExtrusion::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__GeomPainter_300_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TGeoExtrusion *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TGeoExtrusion(*(TGeoExtrusion*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoExtrusion);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoExtrusion G__TTGeoExtrusion;
static int G__G__GeomPainter_300_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TGeoExtrusion *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TGeoExtrusion *)((G__getstructoffset())+sizeof(TGeoExtrusion)*i);
   else  delete (TGeoExtrusion *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__GeomPainter_300_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TGeoExtrusion *dest = (TGeoExtrusion*)(G__getstructoffset());
   *dest = (*(TGeoExtrusion*)libp->para[0].ref);
   const TGeoExtrusion& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TGeoNodeOverlap */
static int G__G__GeomPainter_301_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TGeoNodeOverlap *p=NULL;
   if(G__getaryconstruct()) p=new TGeoNodeOverlap[G__getaryconstruct()];
   else                    p=new TGeoNodeOverlap;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNodeOverlap);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_301_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TGeoNodeOverlap *p=NULL;
      p = new TGeoNodeOverlap(
(const char*)G__int(libp->para[0]),(TGeoVolume*)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2]),(Int_t)G__int(libp->para[3])
,(Double_t)G__double(libp->para[4]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNodeOverlap);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_301_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TGeoNodeOverlap*)(G__getstructoffset()))->GetNode((Int_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_301_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const TGeoNodeOverlap*)(G__getstructoffset()))->IsExtrusion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_301_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((TGeoNodeOverlap*)(G__getstructoffset()))->Draw((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((TGeoNodeOverlap*)(G__getstructoffset()))->Draw();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_301_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TGeoNodeOverlap*)(G__getstructoffset()))->PrintInfo();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_301_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((const TGeoNodeOverlap*)(G__getstructoffset()))->Sizeof3D();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_301_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)TGeoNodeOverlap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_301_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TGeoNodeOverlap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_301_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)TGeoNodeOverlap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_301_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      TGeoNodeOverlap::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_301_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const TGeoNodeOverlap*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_301_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoNodeOverlap*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_301_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoNodeOverlap*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_301_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((TGeoNodeOverlap*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_301_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TGeoNodeOverlap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_301_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TGeoNodeOverlap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_301_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)TGeoNodeOverlap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__GeomPainter_301_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)TGeoNodeOverlap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__GeomPainter_301_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   TGeoNodeOverlap *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new TGeoNodeOverlap(*(TGeoNodeOverlap*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNodeOverlap);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TGeoNodeOverlap G__TTGeoNodeOverlap;
static int G__G__GeomPainter_301_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (TGeoNodeOverlap *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (TGeoNodeOverlap *)((G__getstructoffset())+sizeof(TGeoNodeOverlap)*i);
   else  delete (TGeoNodeOverlap *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__GeomPainter_301_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   TGeoNodeOverlap *dest = (TGeoNodeOverlap*)(G__getstructoffset());
   *dest = (*(TGeoNodeOverlap*)libp->para[0].ref);
   const TGeoNodeOverlap& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TGeoTrack */

/* TGeoChecker */

/* TGeoOverlap */

/* TGeoPainter */

/* TGeoExtrusion */

/* TGeoNodeOverlap */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__GeomPainter {
 public:
  G__Sizep2memfuncG__GeomPainter() {p=&G__Sizep2memfuncG__GeomPainter::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__GeomPainter::*p)();
};

size_t G__get_sizep2memfuncG__GeomPainter()
{
  G__Sizep2memfuncG__GeomPainter a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__GeomPainter() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack))) {
     TGeoTrack *G__Lderived;
     G__Lderived=(TGeoTrack*)0x1000;
     {
       TVirtualGeoTrack *G__Lpbase=(TVirtualGeoTrack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack),G__get_linked_tagnum(&G__G__GeomPainterLN_TVirtualGeoTrack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack),G__get_linked_tagnum(&G__G__GeomPainterLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGeoAtt *G__Lpbase=(TGeoAtt*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack),G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoAtt),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack),G__get_linked_tagnum(&G__G__GeomPainterLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack),G__get_linked_tagnum(&G__G__GeomPainterLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker))) {
     TGeoChecker *G__Lderived;
     G__Lderived=(TGeoChecker*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker),G__get_linked_tagnum(&G__G__GeomPainterLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap))) {
     TGeoOverlap *G__Lderived;
     G__Lderived=(TGeoOverlap*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap),G__get_linked_tagnum(&G__G__GeomPainterLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap),G__get_linked_tagnum(&G__G__GeomPainterLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap),G__get_linked_tagnum(&G__G__GeomPainterLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap),G__get_linked_tagnum(&G__G__GeomPainterLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap),G__get_linked_tagnum(&G__G__GeomPainterLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter))) {
     TGeoPainter *G__Lderived;
     G__Lderived=(TGeoPainter*)0x1000;
     {
       TVirtualGeoPainter *G__Lpbase=(TVirtualGeoPainter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter),G__get_linked_tagnum(&G__G__GeomPainterLN_TVirtualGeoPainter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter),G__get_linked_tagnum(&G__G__GeomPainterLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoExtrusion))) {
     TGeoExtrusion *G__Lderived;
     G__Lderived=(TGeoExtrusion*)0x1000;
     {
       TGeoOverlap *G__Lpbase=(TGeoOverlap*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoExtrusion),G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoExtrusion),G__get_linked_tagnum(&G__G__GeomPainterLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoExtrusion),G__get_linked_tagnum(&G__G__GeomPainterLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoExtrusion),G__get_linked_tagnum(&G__G__GeomPainterLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoExtrusion),G__get_linked_tagnum(&G__G__GeomPainterLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoExtrusion),G__get_linked_tagnum(&G__G__GeomPainterLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNodeOverlap))) {
     TGeoNodeOverlap *G__Lderived;
     G__Lderived=(TGeoNodeOverlap*)0x1000;
     {
       TGeoOverlap *G__Lpbase=(TGeoOverlap*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNodeOverlap),G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNodeOverlap),G__get_linked_tagnum(&G__G__GeomPainterLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNodeOverlap),G__get_linked_tagnum(&G__G__GeomPainterLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNodeOverlap),G__get_linked_tagnum(&G__G__GeomPainterLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNodeOverlap),G__get_linked_tagnum(&G__G__GeomPainterLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAtt3D *G__Lpbase=(TAtt3D*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNodeOverlap),G__get_linked_tagnum(&G__G__GeomPainterLN_TAtt3D),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__GeomPainter() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,
-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,
-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,
-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,
-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,
-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,
-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<TStreamerInfo*>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__GeomPainterLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__GeomPainterLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__GeomPainterLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__GeomPainterLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("vector<unsigned int>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__GeomPainterLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__GeomPainterLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__GeomPainterLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.42 2005/03/10 17:57:04 rdm Exp $",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TGeoTrack */
static void G__setup_memvarTGeoTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack));
   { TGeoTrack *p; p=(TGeoTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrackcLcLEGeoParticleActions),-1,-2,1,"kGeoPDefault=128",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrackcLcLEGeoParticleActions),-1,-2,1,"kGeoPOnelevel=256",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrackcLcLEGeoParticleActions),-1,-2,1,"kGeoPAllDaughters=512",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrackcLcLEGeoParticleActions),-1,-2,1,"kGeoPType=1024",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrackcLcLEGeoParticleActions),-1,-2,1,"kGeoPDrawn=2048",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPointsSize=",0,"capacity of points array");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNpoints=",0,"number of stored points");
   G__memvar_setup((void*)NULL,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPoints=",0,"[fNpoints] array of points (x,y,z,t) belonging to this track");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoChecker */
static void G__setup_memvarTGeoChecker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker));
   { TGeoChecker *p; p=(TGeoChecker*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoManager),-1,-1,4,"fGeoManager=",0,"pointer to geometry manager");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoVolume),-1,-1,4,"fVsafe=",0,"volume to which a safety sphere node was added");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoOverlap */
static void G__setup_memvarTGeoOverlap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap));
   { TGeoOverlap *p; p=(TGeoOverlap*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fOverlap=",0,"overlap distance");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoVolume),-1,-1,2,"fVolume=",0,"volume containing the overlap");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TPolyMarker3D),-1,-1,2,"fMarker=",0,"points in the overlapping region");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoPainter */
static void G__setup_memvarTGeoPainter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter));
   { TGeoPainter *p; p=(TGeoPainter*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBombX=",0,"bomb factor on X");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBombY=",0,"bomb factor on Y");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBombZ=",0,"bomb factor on Z");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBombR=",0,"bomb factor on radius (cyl or sph)");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCheckedBox[6]=",0,"bounding box of checked node");
   G__memvar_setup((void*)NULL,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMat[9]=",0,"view rotation matrix");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNsegments=",0,"number of segments approximating circles");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNVisNodes=",0,"number of visible nodes");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVisLevel=",0,"depth for drawing");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVisOption=",0,"global visualization option");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fExplodedView=",0,"type of exploding current view");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fVisLock=",0,"lock for adding visible volumes");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fTopVisible=",0,"set top volume visible");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPaintingOverlaps=",0,"lock overlaps painting");
   G__memvar_setup((void*)NULL,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsRaytracing=",0,"raytracing flag");
   G__memvar_setup((void*)NULL,67,0,1,-1,-1,-1,4,"fVisBranch=",0,"drawn branch");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNode),-1,-1,4,"fCheckedNode=",0,"checked node");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap),-1,-1,4,"fOverlap=",0,"current overlap");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoMatrix),-1,-1,4,"fMatrix=",0,"current local matrix in case of overlaps");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoManager),-1,-1,4,"fGeoManager=",0,"geometry to which applies");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker),-1,-1,4,"fChecker=",0,"geometry checker");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoShape),-1,-1,4,"fClippingShape=",0,"clipping shape");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoVolume),-1,-1,4,"fLastVolume=",0,"last drawn volume");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TObjArray),-1,-1,4,"fVisVolumes=",0,"list of visible volumes");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoExtrusion */
static void G__setup_memvarTGeoExtrusion(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoExtrusion));
   { TGeoExtrusion *p; p=(TGeoExtrusion*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNode),-1,-1,4,"fNode=",0,"extruding daughter");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TGeoNodeOverlap */
static void G__setup_memvarTGeoNodeOverlap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNodeOverlap));
   { TGeoNodeOverlap *p; p=(TGeoNodeOverlap*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNode),-1,-1,4,"fNode1=",0,"first node");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNode),-1,-1,4,"fNode2=",0,"second node");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__GeomPainter() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTGeoTrack(void) {
   /* TGeoTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack));
   G__memfunc_setup("TGeoTrack",868,G__G__GeomPainter_144_1_0,105,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TGeoTrack",868,G__G__GeomPainter_144_2_0,105,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack),-1,0,4,1,1,0,
"i - 'Int_t' 0 - id i - 'Int_t' 0 - pdgcode "
"U 'TVirtualGeoTrack' - 0 0 parent U 'TObject' - 0 0 particle",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("AddDaughter",1085,G__G__GeomPainter_144_3_0,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TVirtualGeoTrack),-1,0,3,1,1,0,
"i - 'Int_t' 0 - id i - 'Int_t' 0 - pdgcode "
"U 'TObject' - 0 0 particle",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("AddDaughter",1085,G__G__GeomPainter_144_4_0,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"U 'TVirtualGeoTrack' - 0 - other",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("AddPoint",787,G__G__GeomPainter_144_5_0,121,-1,-1,0,4,1,1,0,
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z d - 'Double_t' 0 - t",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("AnimateTrack",1204,G__G__GeomPainter_144_6_0,121,-1,-1,0,4,1,1,0,
"d - 'Double_t' 0 0 tmin d - 'Double_t' 0 5E-8 tmax "
"d - 'Double_t' 0 200 nframes C - 'Option_t' 10 \"/*\" option","*MENU*",(void*)NULL,1);
   G__memfunc_setup("Browse",626,G__G__GeomPainter_144_7_0,121,-1,-1,0,1,1,1,0,"U 'TBrowser' - 0 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("DistancetoPrimitive",1991,G__G__GeomPainter_144_8_0,105,-1,G__defined_typename("Int_t"),0,2,1,1,0,
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Draw",398,G__G__GeomPainter_144_9_0,121,-1,-1,0,1,1,1,0,"C - 'Option_t' 10 \"\" option","*MENU*",(void*)NULL,1);
   G__memfunc_setup("ExecuteEvent",1237,G__G__GeomPainter_144_0_1,121,-1,-1,0,3,1,1,0,
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetObjectInfo",1283,G__G__GeomPainter_144_1_1,67,-1,-1,0,2,1,1,8,
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetNpoints",1035,G__G__GeomPainter_144_2_1,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetPoint",810,G__G__GeomPainter_144_3_1,105,-1,G__defined_typename("Int_t"),0,5,1,1,8,
"i - 'Int_t' 0 - i d - 'Double_t' 1 - x "
"d - 'Double_t' 1 - y d - 'Double_t' 1 - z "
"d - 'Double_t' 1 - t",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetPoint",810,G__G__GeomPainter_144_4_1,68,-1,G__defined_typename("Double_t"),0,1,1,1,9,"i - 'Int_t' 0 - i",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetPoint",810,G__G__GeomPainter_144_5_1,105,-1,G__defined_typename("Int_t"),0,3,1,1,8,
"d - 'Double_t' 0 - tof D - 'Double_t' 0 - point "
"i - 'Int_t' 0 0 istart",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsFolder",792,G__G__GeomPainter_144_6_1,103,-1,G__defined_typename("Bool_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Paint",508,G__G__GeomPainter_144_7_1,121,-1,-1,0,1,1,1,0,"C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("PaintCollect",1218,G__G__GeomPainter_144_8_1,121,-1,-1,0,2,1,1,0,
"d - 'Double_t' 0 - time D - 'Double_t' 0 - box",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("PaintCollectTrack",1719,G__G__GeomPainter_144_9_1,121,-1,-1,0,2,1,1,0,
"d - 'Double_t' 0 - time D - 'Double_t' 0 - box",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("PaintMarker",1118,G__G__GeomPainter_144_0_2,121,-1,-1,0,2,1,1,0,
"D - 'Double_t' 0 - point C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("PaintTrack",1009,G__G__GeomPainter_144_1_2,121,-1,-1,0,1,1,1,0,"C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Print",525,G__G__GeomPainter_144_2_2,121,-1,-1,0,1,1,1,8,"C - 'Option_t' 10 \"\" option","*MENU*",(void*)NULL,1);
   G__memfunc_setup("ResetTrack",1016,G__G__GeomPainter_144_3_2,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SearchPoint",1120,G__G__GeomPainter_144_4_2,105,-1,G__defined_typename("Int_t"),0,2,1,1,8,
"d - 'Double_t' 0 - time i - 'Int_t' 0 0 istart",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetBits",702,G__G__GeomPainter_144_5_2,121,-1,-1,0,4,1,1,0,
"g - 'Bool_t' 0 kTRUE is_default g - 'Bool_t' 0 kFALSE is_onelevel "
"g - 'Bool_t' 0 kFALSE is_all g - 'Bool_t' 0 kFALSE is_type",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Size",411,G__G__GeomPainter_144_6_2,105,-1,G__defined_typename("Int_t"),0,2,1,1,0,
"i - 'Int_t' 1 - imin i - 'Int_t' 1 - imax",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Sizeof3D",743,G__G__GeomPainter_144_7_2,121,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Class",502,G__G__GeomPainter_144_8_2,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TGeoTrack::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__GeomPainter_144_9_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TGeoTrack::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__GeomPainter_144_0_3,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TGeoTrack::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__GeomPainter_144_1_3,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TGeoTrack::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__GeomPainter_144_2_3,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__GeomPainter_144_3_3,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__GeomPainter_144_4_3,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeomPainter_144_5_3,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeomPainter_144_6_3,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TGeoTrack::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeomPainter_144_7_3,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TGeoTrack::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeomPainter_144_8_3,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TGeoTrack::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeomPainter_144_9_3,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TGeoTrack::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TGeoTrack",868,G__G__GeomPainter_144_0_4,(int)('i'),G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack),-1,0,1,1,1,0,"u 'TGeoTrack' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TGeoTrack",994,G__G__GeomPainter_144_1_4,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__GeomPainter_144_2_4,(int)('u'),G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack),-1,1,1,1,1,0,"u 'TGeoTrack' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoChecker(void) {
   /* TGeoChecker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker));
   G__memfunc_setup("TGeoChecker",1060,G__G__GeomPainter_152_1_0,105,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TGeoChecker",1060,G__G__GeomPainter_152_2_0,105,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker),-1,0,1,1,1,0,"U 'TGeoManager' - 0 - geom",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TGeoChecker",1060,G__G__GeomPainter_152_3_0,105,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker),-1,0,2,1,1,0,
"C - - 10 - treename C - - 10 - filename",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("CheckGeometry",1322,G__G__GeomPainter_152_4_0,121,-1,-1,0,4,1,1,8,
"i - 'Int_t' 0 - nrays d - 'Double_t' 0 - startx "
"d - 'Double_t' 0 - starty d - 'Double_t' 0 - startz",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("CheckOverlaps",1322,G__G__GeomPainter_152_5_0,121,-1,-1,0,3,1,1,8,
"U 'TGeoVolume' - 10 - vol d - 'Double_t' 0 0.1 ovlp "
"C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("CheckPoint",1000,G__G__GeomPainter_152_6_0,121,-1,-1,0,4,1,1,0,
"d - 'Double_t' 0 0 x d - 'Double_t' 0 0 y "
"d - 'Double_t' 0 0 z C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("CheckVoxels",1119,G__G__GeomPainter_152_7_0,100,-1,G__defined_typename("Double_t"),0,4,1,1,0,
"U 'TGeoVolume' - 0 - vol U 'TGeoVoxelFinder' - 0 - voxels "
"D - 'Double_t' 0 - xyz i - 'Int_t' 0 - npoints",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("LegoPlot",806,G__G__GeomPainter_152_8_0,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TH2F),-1,0,9,1,1,0,
"i - 'Int_t' 0 60 ntheta d - 'Double_t' 0 0. themin "
"d - 'Double_t' 0 180. themax i - 'Int_t' 0 90 nphi "
"d - 'Double_t' 0 0. phimin d - 'Double_t' 0 360. phimax "
"d - 'Double_t' 0 0. rmin d - 'Double_t' 0 9999999 rmax "
"C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("PrintOverlaps",1369,G__G__GeomPainter_152_9_0,121,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("RandomPoints",1246,G__G__GeomPainter_152_0_1,121,-1,-1,0,3,1,1,0,
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - npoints "
"C - 'Option_t' 10 - option",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("RandomRays",1024,G__G__GeomPainter_152_1_1,121,-1,-1,0,4,1,1,0,
"i - 'Int_t' 0 - nrays d - 'Double_t' 0 - startx "
"d - 'Double_t' 0 - starty d - 'Double_t' 0 - startz",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SamplePoints",1247,G__G__GeomPainter_152_2_1,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNode),-1,0,4,1,1,0,
"i - 'Int_t' 0 - npoints d - 'Double_t' 1 - dist "
"d - 'Double_t' 0 - epsil C - - 10 - g3path",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ShootRay",825,G__G__GeomPainter_152_3_1,121,-1,-1,0,8,1,1,8,
"D - 'Double_t' 0 - start d - 'Double_t' 0 - dirx "
"d - 'Double_t' 0 - diry d - 'Double_t' 0 - dirz "
"D - 'Double_t' 0 - array i - 'Int_t' 1 - nelem "
"i - 'Int_t' 1 - dim D - 'Double_t' 0 0 enpoint",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Test",416,G__G__GeomPainter_152_4_1,121,-1,-1,0,2,1,1,0,
"i - 'Int_t' 0 - npoints C - 'Option_t' 10 - option",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TestOverlaps",1260,G__G__GeomPainter_152_5_1,121,-1,-1,0,1,1,1,0,"C - - 10 - path",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TestVoxels",1057,G__G__GeomPainter_152_6_1,103,-1,G__defined_typename("Bool_t"),0,2,1,1,0,
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 1000000 npoints",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Weight",616,G__G__GeomPainter_152_7_1,100,-1,G__defined_typename("Double_t"),0,2,1,1,0,
"d - 'Double_t' 0 0.01 precision C - 'Option_t' 10 \"v\" option",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__GeomPainter_152_8_1,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TGeoChecker::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__GeomPainter_152_9_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TGeoChecker::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__GeomPainter_152_0_2,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TGeoChecker::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__GeomPainter_152_1_2,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TGeoChecker::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__GeomPainter_152_2_2,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__GeomPainter_152_3_2,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__GeomPainter_152_4_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeomPainter_152_5_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeomPainter_152_6_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TGeoChecker::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeomPainter_152_7_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TGeoChecker::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeomPainter_152_8_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TGeoChecker::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeomPainter_152_9_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TGeoChecker::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TGeoChecker",1060,G__G__GeomPainter_152_0_3,(int)('i'),G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker),-1,0,1,1,1,0,"u 'TGeoChecker' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TGeoChecker",1186,G__G__GeomPainter_152_1_3,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__GeomPainter_152_2_3,(int)('u'),G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker),-1,1,1,1,1,0,"u 'TGeoChecker' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoOverlap(void) {
   /* TGeoOverlap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap));
   G__memfunc_setup("Browse",626,G__G__GeomPainter_298_3_0,121,-1,-1,0,1,1,1,0,"U 'TBrowser' - 0 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Compare",711,G__G__GeomPainter_298_4_0,105,-1,G__defined_typename("Int_t"),0,1,1,1,8,"U 'TObject' - 10 - obj",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("DistancetoPrimitive",1991,G__G__GeomPainter_298_5_0,105,-1,G__defined_typename("Int_t"),0,2,1,1,0,
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Draw",398,G__G__GeomPainter_298_6_0,121,-1,-1,0,1,1,1,0,"C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("ExecuteEvent",1237,G__G__GeomPainter_298_7_0,121,-1,-1,0,3,1,1,0,
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetPolyMarker",1318,G__G__GeomPainter_298_8_0,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TPolyMarker3D),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetNode",678,G__G__GeomPainter_298_9_0,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNode),-1,0,1,1,1,8,"i - 'Int_t' 0 - iovlp",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("GetOverlap",1017,G__G__GeomPainter_298_0_1,100,-1,G__defined_typename("Double_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetVolume",920,G__G__GeomPainter_298_1_1,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoVolume),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsExtrusion",1165,G__G__GeomPainter_298_2_1,103,-1,G__defined_typename("Bool_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("IsFolder",792,G__G__GeomPainter_298_3_1,103,-1,G__defined_typename("Bool_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("IsSortable",1016,G__G__GeomPainter_298_4_1,103,-1,G__defined_typename("Bool_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Paint",508,G__G__GeomPainter_298_5_1,121,-1,-1,0,1,1,1,0,"C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("PrintInfo",921,G__G__GeomPainter_298_6_1,121,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("Sizeof3D",743,G__G__GeomPainter_298_7_1,121,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,3);
   G__memfunc_setup("SetNextPoint",1237,G__G__GeomPainter_298_8_1,121,-1,-1,0,3,1,1,0,
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - z",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetVolume",932,G__G__GeomPainter_298_9_1,121,-1,-1,0,1,1,1,0,"U 'TGeoVolume' - 0 - vol",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetOverlap",1029,G__G__GeomPainter_298_0_2,121,-1,-1,0,1,1,1,0,"d - 'Double_t' 0 - ovlp",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__G__GeomPainter_298_1_2,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TGeoOverlap::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__GeomPainter_298_2_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TGeoOverlap::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__GeomPainter_298_3_2,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TGeoOverlap::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__GeomPainter_298_4_2,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TGeoOverlap::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__GeomPainter_298_5_2,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__GeomPainter_298_6_2,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__GeomPainter_298_7_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeomPainter_298_8_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeomPainter_298_9_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TGeoOverlap::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeomPainter_298_0_3,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TGeoOverlap::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeomPainter_298_1_3,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TGeoOverlap::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeomPainter_298_2_3,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TGeoOverlap::DeclFileLine),0);
   // automatic destructor
   G__memfunc_setup("~TGeoOverlap",1222,G__G__GeomPainter_298_3_3,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__GeomPainter_298_4_3,(int)('u'),G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap),-1,1,1,1,1,0,"u 'TGeoOverlap' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoPainter(void) {
   /* TGeoPainter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter));
   G__memfunc_setup("DefineColors",1213,(G__InterfaceMethod)NULL,121,-1,-1,0,0,1,4,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("LocalToMasterVect",1708,(G__InterfaceMethod)NULL,121,-1,-1,0,2,1,4,8,
"D - 'Double_t' 10 - local D - 'Double_t' 0 - master",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ClearVisibleVolumes",1952,(G__InterfaceMethod)NULL,121,-1,-1,0,0,1,2,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("TGeoPainter",1090,G__G__GeomPainter_299_4_0,105,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter),-1,0,1,1,1,0,"U 'TGeoManager' - 0 - manager",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("AddSize3D",795,G__G__GeomPainter_299_5_0,121,-1,-1,0,3,1,1,0,
"i - 'Int_t' 0 - numpoints i - 'Int_t' 0 - numsegs "
"i - 'Int_t' 0 - numpolys",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("AddTrack",766,G__G__GeomPainter_299_6_0,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TVirtualGeoTrack),-1,0,3,1,1,0,
"i - 'Int_t' 0 - id i - 'Int_t' 0 - pdgcode "
"U 'TObject' - 0 - part",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("AddTrackPoint",1288,G__G__GeomPainter_299_7_0,121,-1,-1,0,3,1,1,0,
"D - 'Double_t' 0 - point D - 'Double_t' 0 - box "
"g - 'Bool_t' 0 kFALSE reset",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("BombTranslation",1551,G__G__GeomPainter_299_8_0,121,-1,-1,0,2,1,1,0,
"D - 'Double_t' 10 - tr D - 'Double_t' 0 - bombtr",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("CheckGeometry",1322,G__G__GeomPainter_299_9_0,121,-1,-1,0,4,1,1,8,
"i - 'Int_t' 0 - nrays d - 'Double_t' 0 - startx "
"d - 'Double_t' 0 - starty d - 'Double_t' 0 - startz",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("CheckPoint",1000,G__G__GeomPainter_299_0_1,121,-1,-1,0,4,1,1,0,
"d - 'Double_t' 0 0 x d - 'Double_t' 0 0 y "
"d - 'Double_t' 0 0 z C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("CheckOverlaps",1322,G__G__GeomPainter_299_1_1,121,-1,-1,0,3,1,1,8,
"U 'TGeoVolume' - 10 - vol d - 'Double_t' 0 0.1 ovlp "
"C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("CountVisibleNodes",1744,G__G__GeomPainter_299_2_1,105,-1,G__defined_typename("Int_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("DefaultAngles",1311,G__G__GeomPainter_299_3_1,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("DefaultColors",1335,G__G__GeomPainter_299_4_1,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("DistanceToPrimitiveVol",2264,G__G__GeomPainter_299_5_1,105,-1,G__defined_typename("Int_t"),0,3,1,1,0,
"U 'TGeoVolume' - 0 - vol i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Draw",398,G__G__GeomPainter_299_6_1,121,-1,-1,0,1,1,1,0,"C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("DrawOverlap",1127,G__G__GeomPainter_299_7_1,121,-1,-1,0,2,1,1,0,
"Y - - 0 - ovlp C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("DrawCurrentPoint",1659,G__G__GeomPainter_299_8_1,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 - color",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("DrawOnly",816,G__G__GeomPainter_299_9_1,121,-1,-1,0,1,1,1,0,"C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("DrawPanel",894,G__G__GeomPainter_299_0_2,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("DrawPath",795,G__G__GeomPainter_299_1_2,121,-1,-1,0,1,1,1,0,"C - - 10 - path",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("EstimateCameraMove",1820,G__G__GeomPainter_299_2_2,121,-1,-1,0,4,1,1,0,
"d - 'Double_t' 0 - tmin d - 'Double_t' 0 - tmax "
"D - 'Double_t' 0 - start D - 'Double_t' 0 - end",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ExecuteVolumeEvent",1869,G__G__GeomPainter_299_3_2,121,-1,-1,0,4,1,1,0,
"U 'TGeoVolume' - 0 - volume i - 'Int_t' 0 - event "
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetVolumeInfo",1316,G__G__GeomPainter_299_4_2,67,-1,-1,0,3,1,1,8,
"U 'TGeoVolume' - 10 - volume i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetBombFactors",1394,G__G__GeomPainter_299_5_2,121,-1,-1,0,4,1,1,8,
"d - 'Double_t' 1 - bombx d - 'Double_t' 1 - bomby "
"d - 'Double_t' 1 - bombz d - 'Double_t' 1 - bombr",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetBombMode",1061,G__G__GeomPainter_299_6_2,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetCheckedNode",1357,G__G__GeomPainter_299_7_2,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNode),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetChecker",981,G__G__GeomPainter_299_8_2,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetColor",799,G__G__GeomPainter_299_9_2,105,-1,G__defined_typename("Int_t"),0,2,1,1,8,
"i - 'Int_t' 0 - base f - 'Float_t' 0 - light",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetDrawPath",1083,G__G__GeomPainter_299_0_3,67,-1,-1,0,0,1,1,9,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetDrawnVolume",1428,G__G__GeomPainter_299_1_3,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoVolume),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetVisLevel",1098,G__G__GeomPainter_299_2_3,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetVisOption",1227,G__G__GeomPainter_299_3_3,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetNsegments",1236,G__G__GeomPainter_299_4_3,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GrabFocus",892,G__G__GeomPainter_299_5_3,121,-1,-1,0,4,1,1,0,
"i - 'Int_t' 0 0 nfr d - 'Double_t' 0 0 dlong "
"d - 'Double_t' 0 0 dlat d - 'Double_t' 0 0 dpsi",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetViewBox",996,G__G__GeomPainter_299_6_3,68,-1,G__defined_typename("Double_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("GetViewAngles",1301,G__G__GeomPainter_299_7_3,121,-1,-1,0,3,1,1,0,
"d - 'Double_t' 1 - longitude d - 'Double_t' 1 - latitude "
"d - 'Double_t' 1 - psi",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("IsExplodedView",1420,G__G__GeomPainter_299_8_3,103,-1,G__defined_typename("Bool_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("IsRaytracing",1232,G__G__GeomPainter_299_9_3,103,-1,G__defined_typename("Bool_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("LegoPlot",806,G__G__GeomPainter_299_0_4,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TH2F),-1,0,9,1,1,0,
"i - 'Int_t' 0 60 ntheta d - 'Double_t' 0 0. themin "
"d - 'Double_t' 0 180. themax i - 'Int_t' 0 90 nphi "
"d - 'Double_t' 0 0. phimin d - 'Double_t' 0 360. phimax "
"d - 'Double_t' 0 0. rmin d - 'Double_t' 0 9999999 rmax "
"C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ModifiedPad",1078,G__G__GeomPainter_299_1_4,121,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Paint",508,G__G__GeomPainter_299_2_4,121,-1,-1,0,1,1,1,0,"C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("PaintNode",898,G__G__GeomPainter_299_3_4,121,-1,-1,0,2,1,1,0,
"U 'TGeoNode' - 0 - node C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("PaintShape",1005,G__G__GeomPainter_299_4_4,103,-1,G__defined_typename("Bool_t"),0,2,1,1,8,
"u 'TGeoShape' - 11 - shape C - 'Option_t' 10 - option",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("PaintOverlap",1237,G__G__GeomPainter_299_5_4,121,-1,-1,0,2,1,1,0,
"Y - - 0 - ovlp C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("PrintOverlaps",1369,G__G__GeomPainter_299_6_4,121,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("PaintPhysicalNode",1727,G__G__GeomPainter_299_7_4,121,-1,-1,0,2,1,1,0,
"U 'TGeoPhysicalNode' - 0 - node C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("RandomPoints",1246,G__G__GeomPainter_299_8_4,121,-1,-1,0,3,1,1,0,
"U 'TGeoVolume' - 10 - vol i - 'Int_t' 0 - npoints "
"C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("RandomRays",1024,G__G__GeomPainter_299_9_4,121,-1,-1,0,4,1,1,0,
"i - 'Int_t' 0 - nrays d - 'Double_t' 0 - startx "
"d - 'Double_t' 0 - starty d - 'Double_t' 0 - startz",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Raytrace",827,G__G__GeomPainter_299_0_5,121,-1,-1,0,1,1,1,0,"C - 'Option_t' 10 \"\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SamplePoints",1247,G__G__GeomPainter_299_1_5,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNode),-1,0,4,1,1,0,
"i - 'Int_t' 0 - npoints d - 'Double_t' 1 - dist "
"d - 'Double_t' 0 - epsil C - - 10 - g3path",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SetBombFactors",1406,G__G__GeomPainter_299_2_5,121,-1,-1,0,4,1,1,0,
"d - 'Double_t' 0 1.3 bombx d - 'Double_t' 0 1.3 bomby "
"d - 'Double_t' 0 1.3 bombz d - 'Double_t' 0 1.3 bombr",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SetClippingShape",1619,G__G__GeomPainter_299_3_5,121,-1,-1,0,1,1,1,0,"U 'TGeoShape' - 0 - shape",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SetExplodedView",1532,G__G__GeomPainter_299_4_5,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 0 iopt",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SetNsegments",1248,G__G__GeomPainter_299_5_5,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 20 nseg",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SetGeoManager",1282,G__G__GeomPainter_299_6_5,121,-1,-1,0,1,1,1,0,"U 'TGeoManager' - 0 - geom",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SetRaytracing",1344,G__G__GeomPainter_299_7_5,121,-1,-1,0,1,1,1,0,"g - 'Bool_t' 0 kTRUE flag",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SetTopVisible",1325,G__G__GeomPainter_299_8_5,121,-1,-1,0,1,1,1,0,"g - 'Bool_t' 0 kTRUE vis",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SetVisLevel",1110,G__G__GeomPainter_299_9_5,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 3 level",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("SetVisOption",1239,G__G__GeomPainter_299_0_6,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 0 option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShapeDistancetoPrimitive",2488,G__G__GeomPainter_299_1_6,105,-1,G__defined_typename("Int_t"),0,4,1,1,8,
"U 'TGeoShape' - 10 - shape i - 'Int_t' 0 - numpoints "
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Test",416,G__G__GeomPainter_299_2_6,121,-1,-1,0,2,1,1,0,
"i - 'Int_t' 0 - npoints C - 'Option_t' 10 - option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("TestOverlaps",1260,G__G__GeomPainter_299_3_6,121,-1,-1,0,1,1,1,0,"C - - 10 - path",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("TestVoxels",1057,G__G__GeomPainter_299_4_6,103,-1,G__defined_typename("Bool_t"),0,1,1,1,0,"U 'TGeoVolume' - 0 - vol",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("UnbombTranslation",1778,G__G__GeomPainter_299_5_6,121,-1,-1,0,2,1,1,0,
"D - 'Double_t' 10 - tr D - 'Double_t' 0 - bombtr",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Weight",616,G__G__GeomPainter_299_6_6,100,-1,G__defined_typename("Double_t"),0,2,1,1,0,
"d - 'Double_t' 0 - precision C - 'Option_t' 10 \"v\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Class",502,G__G__GeomPainter_299_7_6,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TGeoPainter::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__GeomPainter_299_8_6,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TGeoPainter::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__GeomPainter_299_9_6,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TGeoPainter::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__GeomPainter_299_0_7,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TGeoPainter::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__GeomPainter_299_1_7,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__GeomPainter_299_2_7,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__GeomPainter_299_3_7,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeomPainter_299_4_7,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeomPainter_299_5_7,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TGeoPainter::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeomPainter_299_6_7,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TGeoPainter::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeomPainter_299_7_7,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TGeoPainter::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeomPainter_299_8_7,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TGeoPainter::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TGeoPainter",1090,G__G__GeomPainter_299_9_7,(int)('i'),G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter),-1,0,1,1,1,0,"u 'TGeoPainter' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TGeoPainter",1216,G__G__GeomPainter_299_0_8,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoExtrusion(void) {
   /* TGeoExtrusion */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoExtrusion));
   G__memfunc_setup("TGeoExtrusion",1344,G__G__GeomPainter_300_1_0,105,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoExtrusion),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TGeoExtrusion",1344,G__G__GeomPainter_300_2_0,105,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoExtrusion),-1,0,4,1,1,0,
"C - - 10 - name U 'TGeoVolume' - 0 - vol "
"i - 'Int_t' 0 - inode d - 'Double_t' 0 - ovlp",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetNode",678,G__G__GeomPainter_300_3_0,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNode),-1,0,1,1,1,8,"i - 'Int_t' 0 - iovlp",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("IsExtrusion",1165,G__G__GeomPainter_300_4_0,103,-1,G__defined_typename("Bool_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Draw",398,G__G__GeomPainter_300_5_0,121,-1,-1,0,1,1,1,0,"C - 'Option_t' 10 \"\" option","*MENU*",(void*)NULL,1);
   G__memfunc_setup("PrintInfo",921,G__G__GeomPainter_300_6_0,121,-1,-1,0,0,1,1,8,"","*MENU*",(void*)NULL,1);
   G__memfunc_setup("Sizeof3D",743,G__G__GeomPainter_300_7_0,121,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Class",502,G__G__GeomPainter_300_8_0,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TGeoExtrusion::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__GeomPainter_300_9_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TGeoExtrusion::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__GeomPainter_300_0_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TGeoExtrusion::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__GeomPainter_300_1_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TGeoExtrusion::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__GeomPainter_300_2_1,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__GeomPainter_300_3_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__GeomPainter_300_4_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeomPainter_300_5_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeomPainter_300_6_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TGeoExtrusion::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeomPainter_300_7_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TGeoExtrusion::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeomPainter_300_8_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TGeoExtrusion::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeomPainter_300_9_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TGeoExtrusion::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TGeoExtrusion",1344,G__G__GeomPainter_300_0_2,(int)('i'),G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoExtrusion),-1,0,1,1,1,0,"u 'TGeoExtrusion' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TGeoExtrusion",1470,G__G__GeomPainter_300_1_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__GeomPainter_300_2_2,(int)('u'),G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoExtrusion),-1,1,1,1,1,0,"u 'TGeoExtrusion' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTGeoNodeOverlap(void) {
   /* TGeoNodeOverlap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNodeOverlap));
   G__memfunc_setup("TGeoNodeOverlap",1486,G__G__GeomPainter_301_1_0,105,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNodeOverlap),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("TGeoNodeOverlap",1486,G__G__GeomPainter_301_2_0,105,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNodeOverlap),-1,0,5,1,1,0,
"C - - 10 - name U 'TGeoVolume' - 0 - vol "
"i - 'Int_t' 0 - inode1 i - 'Int_t' 0 - inode2 "
"d - 'Double_t' 0 - ovlp",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetNode",678,G__G__GeomPainter_301_3_0,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNode),-1,0,1,1,1,8,"i - 'Int_t' 0 - iovlp",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("IsExtrusion",1165,G__G__GeomPainter_301_4_0,103,-1,G__defined_typename("Bool_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Draw",398,G__G__GeomPainter_301_5_0,121,-1,-1,0,1,1,1,0,"C - 'Option_t' 10 \"\" option","*MENU*",(void*)NULL,1);
   G__memfunc_setup("PrintInfo",921,G__G__GeomPainter_301_6_0,121,-1,-1,0,0,1,1,8,"","*MENU*",(void*)NULL,1);
   G__memfunc_setup("Sizeof3D",743,G__G__GeomPainter_301_7_0,121,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Class",502,G__G__GeomPainter_301_8_0,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&TGeoNodeOverlap::Class),0);
   G__memfunc_setup("Class_Name",982,G__G__GeomPainter_301_9_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TGeoNodeOverlap::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__G__GeomPainter_301_0_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&TGeoNodeOverlap::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__G__GeomPainter_301_1_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&TGeoNodeOverlap::Dictionary),0);
   G__memfunc_setup("IsA",253,G__G__GeomPainter_301_2_1,85,G__get_linked_tagnum(&G__G__GeomPainterLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__G__GeomPainter_301_3_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__G__GeomPainter_301_4_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__GeomPainter_301_5_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__G__GeomPainter_301_6_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TGeoNodeOverlap::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__G__GeomPainter_301_7_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TGeoNodeOverlap::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__G__GeomPainter_301_8_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&TGeoNodeOverlap::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__G__GeomPainter_301_9_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&TGeoNodeOverlap::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("TGeoNodeOverlap",1486,G__G__GeomPainter_301_0_2,(int)('i'),G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNodeOverlap),-1,0,1,1,1,0,"u 'TGeoNodeOverlap' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~TGeoNodeOverlap",1612,G__G__GeomPainter_301_1_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__G__GeomPainter_301_2_2,(int)('u'),G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNodeOverlap),-1,1,1,1,1,0,"u 'TGeoNodeOverlap' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__GeomPainter() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__GeomPainter() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__GeomPainter() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__GeomPainterLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TBrowser = { "TBrowser" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR = { "vector<TStreamerInfo*,allocator<TStreamerInfo*> >" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TStreamerInfo*,allocator<TStreamerInfo*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoAtt = { "TGeoAtt" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TAttLine = { "TAttLine" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TAttMarker = { "TAttMarker" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TVirtualGeoTrack = { "TVirtualGeoTrack" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TAtt3D = { "TAtt3D" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TPolyMarker3D = { "TPolyMarker3D" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoTrack = { "TGeoTrack" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoTrackcLcLEGeoParticleActions = { "TGeoTrack::EGeoParticleActions" , 101 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoVolume = { "TGeoVolume" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoVoxelFinder = { "TGeoVoxelFinder" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoNode = { "TGeoNode" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoManager = { "TGeoManager" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoChecker = { "TGeoChecker" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoShape = { "TGeoShape" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TVirtualGeoPainter = { "TVirtualGeoPainter" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<unsigned int,allocator<unsigned int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TAttFill = { "TAttFill" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoMatrix = { "TGeoMatrix" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoPhysicalNode = { "TGeoPhysicalNode" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoOverlap = { "TGeoOverlap" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoPainter = { "TGeoPainter" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoExtrusion = { "TGeoExtrusion" , 99 , -1 };
G__linked_taginfo G__G__GeomPainterLN_TGeoNodeOverlap = { "TGeoNodeOverlap" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__GeomPainter() {
  G__G__GeomPainterLN_TClass.tagnum = -1 ;
  G__G__GeomPainterLN_TBuffer.tagnum = -1 ;
  G__G__GeomPainterLN_TMemberInspector.tagnum = -1 ;
  G__G__GeomPainterLN_TObject.tagnum = -1 ;
  G__G__GeomPainterLN_TNamed.tagnum = -1 ;
  G__G__GeomPainterLN_TBrowser.tagnum = -1 ;
  G__G__GeomPainterLN_TObjArray.tagnum = -1 ;
  G__G__GeomPainterLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR.tagnum = -1 ;
  G__G__GeomPainterLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoAtt.tagnum = -1 ;
  G__G__GeomPainterLN_TAttLine.tagnum = -1 ;
  G__G__GeomPainterLN_TAttMarker.tagnum = -1 ;
  G__G__GeomPainterLN_TVirtualGeoTrack.tagnum = -1 ;
  G__G__GeomPainterLN_TAtt3D.tagnum = -1 ;
  G__G__GeomPainterLN_TPolyMarker3D.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoTrack.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoTrackcLcLEGeoParticleActions.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoVolume.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoVoxelFinder.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoNode.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoManager.tagnum = -1 ;
  G__G__GeomPainterLN_TH2F.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoChecker.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoShape.tagnum = -1 ;
  G__G__GeomPainterLN_TVirtualGeoPainter.tagnum = -1 ;
  G__G__GeomPainterLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__G__GeomPainterLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__GeomPainterLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__G__GeomPainterLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__GeomPainterLN_TAttFill.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoMatrix.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoPhysicalNode.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoOverlap.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoPainter.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoExtrusion.tagnum = -1 ;
  G__G__GeomPainterLN_TGeoNodeOverlap.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__GeomPainter() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum(&G__G__GeomPainterLN_TClass);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TBuffer);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TMemberInspector);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TObject);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TNamed);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TBrowser);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TObjArray);
   G__get_linked_tagnum(&G__G__GeomPainterLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR);
   G__get_linked_tagnum(&G__G__GeomPainterLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoAtt);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TAttLine);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TAttMarker);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TVirtualGeoTrack);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TAtt3D);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TPolyMarker3D);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrack),sizeof(TGeoTrack),-1,324864,"geometry tracks class",G__setup_memvarTGeoTrack,G__setup_memfuncTGeoTrack);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoTrackcLcLEGeoParticleActions);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoVolume);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoVoxelFinder);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNode);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoManager);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TH2F);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoChecker),sizeof(TGeoChecker),-1,324864,"a simple geometry checker",G__setup_memvarTGeoChecker,G__setup_memfuncTGeoChecker);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoShape);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TVirtualGeoPainter);
   G__get_linked_tagnum(&G__G__GeomPainterLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum(&G__G__GeomPainterLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__G__GeomPainterLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum(&G__G__GeomPainterLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TAttFill);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoMatrix);
   G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPhysicalNode);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoOverlap),sizeof(TGeoOverlap),-1,324869,"base class for geometical overlaps",G__setup_memvarTGeoOverlap,G__setup_memfuncTGeoOverlap);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoPainter),sizeof(TGeoPainter),-1,324608,"geometry painter",G__setup_memvarTGeoPainter,G__setup_memfuncTGeoPainter);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoExtrusion),sizeof(TGeoExtrusion),-1,324864,"class representing an extruding node ",G__setup_memvarTGeoExtrusion,G__setup_memfuncTGeoExtrusion);
   G__tagtable_setup(G__get_linked_tagnum(&G__G__GeomPainterLN_TGeoNodeOverlap),sizeof(TGeoNodeOverlap),-1,324864,"class representing 2 overlapping nodes",G__setup_memvarTGeoNodeOverlap,G__setup_memfuncTGeoNodeOverlap);
}
extern "C" void G__cpp_setupG__GeomPainter(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__GeomPainter()");
  G__set_cpp_environmentG__GeomPainter();
  G__cpp_setup_tagtableG__GeomPainter();

  G__cpp_setup_inheritanceG__GeomPainter();

  G__cpp_setup_typetableG__GeomPainter();

  G__cpp_setup_memvarG__GeomPainter();

  G__cpp_setup_memfuncG__GeomPainter();
  G__cpp_setup_globalG__GeomPainter();
  G__cpp_setup_funcG__GeomPainter();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__GeomPainter();
  return;
}
class G__cpp_setup_initG__GeomPainter {
  public:
    G__cpp_setup_initG__GeomPainter() { G__add_setup_func("G__GeomPainter",(G__incsetup)(&G__cpp_setupG__GeomPainter)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__GeomPainter() { G__remove_setup_func("G__GeomPainter"); }
};
G__cpp_setup_initG__GeomPainter G__cpp_setup_initializerG__GeomPainter;

