//  File:         RKIntegrator.hh
//  Description:  This file contains the definition of template RKIntegrator
//  Created    :  October 1, 1994
//  Authors    :  Nikolay Malitsky  (malitsky@ivory.ssc.gov)
//
//
//  Copyright SSCL
//  2550 Beckleymeade Ave.
//  Dallas, TX, 75237
//

#ifndef RKINTEGRATOR_H
#define RKINTEGRATOR_H

#define RKIntegratorNumberParameters 30

#include "NumLib/NumLib.hh"
#include "Beam/Beam.hh"

template<class Object, class ObjectSet>
class RKIntegrator : public Beam
{
 public :

   RKIntegrator();
   RKIntegrator(void (*extField)(double x, Object* y, Object* bF,
    Object* eF, double* prms), double* extParameters, double extStep);
   ~RKIntegrator();

// Tracking

   ObjectSet& operator*(ObjectSet& m);

 protected:

   double  step;
   double parameters[RKIntegratorNumberParameters+1];
   void   (*field)(double x, Object* y, Object* bF, Object* eF, double* prms);

 // Runge Kutta Method

   void rightSide(double, Object* y, Object* dydx);
   void rk4(Object* y, Object* dydx, int n, double x, double h);
   void rkdumb(Object* vstart, int nvar, double x1, double x2, int nstep);

   Object     bField[4];
   Object     eField[4];
   ObjectSet  tmpParticle;

};

// ---------   Constructors & destructor  ----------

template<class Object, class ObjectSet>
RKIntegrator<Object, ObjectSet>::RKIntegrator()
{
   cerr << "Usage of RKIntegrator:"
        << " RKIntegrator id(funField, parameters, intStep); \n";
   exit(1);
}

template<class Object, class ObjectSet>
RKIntegrator<Object, ObjectSet>::RKIntegrator(void (*extField)(double x, Object* y, Object* bF, Object* eF,
				 double* parameters),
			   double* extParam, double  extStep)
{
   if(extField == 0  || extParam == 0 || extStep == 0){
    cerr << "Error: RKIntegrator::RKIntegrator(extField, extParam, extStep)"
	 << " - input parameters are not defined \n";
    exit(1);
   }
   if(extParam[0] < 1){
    cerr << "Error: RKIntegrator::RKIntegrator(extField, extParam, extStep)"
	 << " - number of parameters (extParam[0]) < 1 \n";
    exit(1);
   }
   step       = extStep;
   field      = extField;
   for(int i=0; i <= extParam[0]; i++)
	  parameters[i] = extParam[i];
}

template<class Object, class ObjectSet>
RKIntegrator<Object, ObjectSet>::~RKIntegrator()
{
   field = 0;
}

// Tracking

template<class Object, class ObjectSet>
ObjectSet& RKIntegrator<Object, ObjectSet>::operator*(ObjectSet& p)
{
  int nvar = BEAM_DIM, i;
  Object* vstart;
  vstart = new Object[nvar+1];
  if(!vstart){
    cerr << "Error: RKIntegrator<Object, ObjectSet>::operator*(ObjectSet& p)"
	 << " - memory allocation failure \n";
    exit(1);
  }
  for(i=1; i <= nvar; i++) vstart[i] = p[i];
  double x1 = 0.;
  double x2 = parameters[1];
  int nstep = (int) (parameters[1]/step);
  if(step < 0.){
    x1 = x2;
    x2 = 0.;
    nstep = -nstep;
  }
  
   rkdumb(vstart, nvar, x1, x2, nstep);

  int tmpOrder = 0;
  for(i=1; i <= nvar; i++)
      tmpOrder = max(tmpOrder, vstart[i].order());

  for(i=1; i <= nvar; i++) 
      tmpParticle[i] = vstart[i](tmpOrder);
  delete [] vstart;
  return(tmpParticle);
}

template<class Object, class ObjectSet>
void RKIntegrator<Object, ObjectSet>::rightSide(double x, Object* y, Object* dydx)
{
     Object psp0, delxR;

     for(int i=1; i <= BEAM_DIM; i++) dydx[i] = 0.0;
     (*field)(x, y, bField, eField, parameters);

     psp0 =  1. - y[2]*y[2];
     if(BEAM_DIM > 2) psp0 -= y[4]*y[4];
     if(BEAM_DIM > 4){
        psp0 += y[6]*y[6];
        psp0 += (2./v0byc)*y[6];
     }
     psp0 = sqrt(psp0);

     dydx[2] = bField[0]*psp0;
     delxR  = (1. + bField[0]*y[1]);

     dydx[1]  = delxR/psp0*y[2];
     dydx[2] -= bField[2]*delxR;

     if(BEAM_DIM <= 2) return;

     dydx[3]  = delxR/psp0*y[4];
     dydx[2] += bField[3]*dydx[3];
     dydx[4]  = bField[1]*delxR;
     dydx[4] -= bField[3]*dydx[1];


     if(BEAM_DIM <= 4) return;

     dydx[5]  =  delxR/psp0;
     dydx[5] *=  y[6] + 1./v0byc;
     dydx[5]  =  1./v0byc - dydx[5];
     dydx[6]  =  0.;


     return;
}


//---------------------------------------------------
// Integration of Ordinary Differential Equations
//---------------------------------------------------

template<class Object, class ObjectSet>
void RKIntegrator<Object,ObjectSet>::rk4(Object* y, Object* dydx, int n, double x, double h)
{
  int i;
  double xh, hh, h6;
  Object *dym, *dyt, *yt;

  dym = new Object[n+1];
  dyt = new Object[n+1];
  yt  = new Object[n+1];
  if(!yt)
  {
    cerr << "rk4: allocation failure in yt\n";
    exit(1);
  }
  hh = h*0.5;
  h6 = h/6.0;
  xh = x+hh;
  for(i=1; i <= n; i++) yt[i] = y[i] + hh*dydx[i]; // First  step
  rightSide(xh, yt, dyt);                          // Second step
  for(i=1; i <= n; i++) yt[i] = y[i] + hh*dyt[i];
  rightSide(xh, yt, dym);                          // Third  step
  for(i=1; i <= n; i++)
  {
    yt[i]   = y[i] + h*dym[i];
    dym[i] += dyt[i];
  }
  rightSide(x+h, yt, dyt);                         // Fourth step
  for(i=1; i <= n; i++)
    y[i] = y[i] + h6*(dydx[i] + dyt[i] +2.0*dym[i]);

  delete [] yt;
  delete [] dyt;
  delete [] dym;
}

template<class Object, class ObjectSet>
void RKIntegrator<Object, ObjectSet>::rkdumb(Object* vstart, int nvar, double x1, double x2, int nstep)
{
   int i, k;
   double x, h;
   Object *v, *dv;

   v    = new Object[nvar+1];
   dv   = new Object[nvar+1];

  if(!dv)
  {
    cerr << "rkdumb: allocation failure in dv\n";
    exit(1);
  }

// Load starting values

  for (i=1; i <= nvar; i++)  v[i]    = vstart[i];
  x     = x1;
  h     = (x2-x1)/nstep;

// Take nstep steps

  for (k=1; k <= nstep; k++)
  {
    rightSide(x, v, dv);
    rk4(v, dv, nvar, x, h);
    if(x+h == x)
    {
       cerr << "Step size too small in routine rkdumb \n";
       exit(1);
    }
    x += h;
  }

  for (i=1; i <= nvar; i++) vstart[i] = v[i];

  delete [] dv;
  delete [] v;

}

#endif

